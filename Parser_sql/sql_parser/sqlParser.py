# Generated from /Users/anastasiapereslavceva/Sql_parser/Parser_sql/sql.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009f")
        buf.write("\u04be\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\7\2f\n\2\f\2\16")
        buf.write("\2i\13\2\3\2\3\2\3\3\7\3n\n\3\f\3\16\3q\13\3\3\3\3\3\6")
        buf.write("\3u\n\3\r\3\16\3v\3\3\7\3z\n\3\f\3\16\3}\13\3\3\3\7\3")
        buf.write("\u0080\n\3\f\3\16\3\u0083\13\3\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\5\4\u008f\n\4\3\5\3\5\3\5\3\5\3\5\5\5")
        buf.write("\u0096\n\5\3\5\3\5\5\5\u009a\n\5\5\5\u009c\n\5\3\6\3\6")
        buf.write("\5\6\u00a0\n\6\3\6\3\6\3\6\3\6\5\6\u00a6\n\6\3\6\3\6\3")
        buf.write("\6\5\6\u00ab\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u00b4")
        buf.write("\n\6\f\6\16\6\u00b7\13\6\3\6\3\6\3\6\5\6\u00bc\n\6\3\7")
        buf.write("\3\7\5\7\u00c0\n\7\3\7\3\7\3\7\3\7\5\7\u00c6\n\7\3\7\3")
        buf.write("\7\3\7\5\7\u00cb\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u00d2\n\7")
        buf.write("\f\7\16\7\u00d5\13\7\3\7\3\7\7\7\u00d9\n\7\f\7\16\7\u00dc")
        buf.write("\13\7\3\7\3\7\3\7\5\7\u00e1\n\7\3\7\3\7\5\7\u00e5\n\7")
        buf.write("\3\b\3\b\5\b\u00e9\n\b\3\b\3\b\3\b\5\b\u00ee\n\b\3\b\3")
        buf.write("\b\5\b\u00f2\n\b\3\b\5\b\u00f5\n\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0107")
        buf.write("\n\b\3\b\3\b\3\b\5\b\u010c\n\b\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\7\t\u0114\n\t\f\t\16\t\u0117\13\t\3\t\3\t\5\t\u011b\n")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0127\n")
        buf.write("\t\3\t\3\t\5\t\u012b\n\t\7\t\u012d\n\t\f\t\16\t\u0130")
        buf.write("\13\t\3\t\5\t\u0133\n\t\3\t\3\t\3\t\3\t\3\t\5\t\u013a")
        buf.write("\n\t\5\t\u013c\n\t\3\n\3\n\5\n\u0140\n\n\3\n\3\n\3\n\5")
        buf.write("\n\u0145\n\n\3\n\3\n\3\n\3\n\7\n\u014b\n\n\f\n\16\n\u014e")
        buf.write("\13\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\7\n\u015e\n\n\f\n\16\n\u0161\13\n\3\n\3\n\3\n")
        buf.write("\5\n\u0166\n\n\3\13\6\13\u0169\n\13\r\13\16\13\u016a\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u0177\n\13\3\f\3\f\3\f\5\f\u017c\n\f\3\f\5\f\u017f\n")
        buf.write("\f\3\r\5\r\u0182\n\r\3\r\3\r\3\r\5\r\u0187\n\r\3\r\3\r")
        buf.write("\5\r\u018b\n\r\3\r\6\r\u018e\n\r\r\r\16\r\u018f\3\r\3")
        buf.write("\r\3\r\3\r\3\r\7\r\u0197\n\r\f\r\16\r\u019a\13\r\5\r\u019c")
        buf.write("\n\r\3\r\3\r\3\r\3\r\5\r\u01a2\n\r\5\r\u01a4\n\r\3\16")
        buf.write("\5\16\u01a7\n\16\3\16\3\16\3\16\3\16\7\16\u01ad\n\16\f")
        buf.write("\16\16\16\u01b0\13\16\3\16\3\16\3\16\3\16\3\16\7\16\u01b7")
        buf.write("\n\16\f\16\16\16\u01ba\13\16\5\16\u01bc\n\16\3\16\3\16")
        buf.write("\3\16\3\16\5\16\u01c2\n\16\5\16\u01c4\n\16\3\17\5\17\u01c7")
        buf.write("\n\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u01cf\n\17\f")
        buf.write("\17\16\17\u01d2\13\17\5\17\u01d4\n\17\3\17\3\17\3\17\3")
        buf.write("\17\5\17\u01da\n\17\5\17\u01dc\n\17\3\20\5\20\u01df\n")
        buf.write("\20\3\20\3\20\3\20\3\20\7\20\u01e5\n\20\f\20\16\20\u01e8")
        buf.write("\13\20\3\20\3\20\3\20\3\20\3\20\7\20\u01ef\n\20\f\20\16")
        buf.write("\20\u01f2\13\20\5\20\u01f4\n\20\3\20\3\20\3\20\3\20\5")
        buf.write("\20\u01fa\n\20\5\20\u01fc\n\20\3\21\3\21\5\21\u0200\n")
        buf.write("\21\3\21\3\21\3\21\7\21\u0205\n\21\f\21\16\21\u0208\13")
        buf.write("\21\3\21\3\21\3\21\3\21\7\21\u020e\n\21\f\21\16\21\u0211")
        buf.write("\13\21\3\21\5\21\u0214\n\21\5\21\u0216\n\21\3\21\3\21")
        buf.write("\5\21\u021a\n\21\3\21\3\21\3\21\3\21\3\21\7\21\u0221\n")
        buf.write("\21\f\21\16\21\u0224\13\21\3\21\3\21\5\21\u0228\n\21\5")
        buf.write("\21\u022a\n\21\3\21\3\21\3\21\3\21\3\21\7\21\u0231\n\21")
        buf.write("\f\21\16\21\u0234\13\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\7\21\u023c\n\21\f\21\16\21\u023f\13\21\3\21\3\21\7\21")
        buf.write("\u0243\n\21\f\21\16\21\u0246\13\21\5\21\u0248\n\21\3\22")
        buf.write("\5\22\u024b\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\5\22\u0258\n\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u0264\n\22\f\22\16")
        buf.write("\22\u0267\13\22\3\22\3\22\5\22\u026b\n\22\3\23\5\23\u026e")
        buf.write("\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u027b\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\7\23\u0287\n\23\f\23\16\23\u028a\13")
        buf.write("\23\3\23\3\23\5\23\u028e\n\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\7\23\u0295\n\23\f\23\16\23\u0298\13\23\5\23\u029a\n\23")
        buf.write("\3\23\3\23\3\23\3\23\5\23\u02a0\n\23\5\23\u02a2\n\23\3")
        buf.write("\24\5\24\u02a5\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24")
        buf.write("\u02b8\n\24\3\24\3\24\3\24\3\24\5\24\u02be\n\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\7\24\u02c5\n\24\f\24\16\24\u02c8\13")
        buf.write("\24\3\24\3\24\5\24\u02cc\n\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\7\24\u02d3\n\24\f\24\16\24\u02d6\13\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\7\24\u02de\n\24\f\24\16\24\u02e1\13\24")
        buf.write("\3\24\3\24\7\24\u02e5\n\24\f\24\16\24\u02e8\13\24\3\24")
        buf.write("\3\24\3\24\5\24\u02ed\n\24\3\25\3\25\3\25\5\25\u02f2\n")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u02fa\n\25\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\5\26\u0302\n\26\3\26\3\26\3")
        buf.write("\26\5\26\u0307\n\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u0312\n\26\3\26\5\26\u0315\n\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\5\26\u031d\n\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\6\26\u0324\n\26\r\26\16\26\u0325\3\26\3\26")
        buf.write("\5\26\u032a\n\26\3\26\3\26\5\26\u032e\n\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\5\26\u034b\n\26\3\26\3\26\3\26\5\26\u0350")
        buf.write("\n\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0359\n")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0361\n\26\f\26")
        buf.write("\16\26\u0364\13\26\5\26\u0366\n\26\3\26\3\26\3\26\3\26")
        buf.write("\5\26\u036c\n\26\3\26\5\26\u036f\n\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\5\26\u0376\n\26\3\26\3\26\3\26\3\26\5\26\u037c")
        buf.write("\n\26\3\26\3\26\3\26\3\26\3\26\5\26\u0383\n\26\7\26\u0385")
        buf.write("\n\26\f\26\16\26\u0388\13\26\3\27\3\27\5\27\u038c\n\27")
        buf.write("\3\27\3\27\3\27\7\27\u0391\n\27\f\27\16\27\u0394\13\27")
        buf.write("\3\30\3\30\3\30\3\30\3\30\7\30\u039b\n\30\f\30\16\30\u039e")
        buf.write("\13\30\3\30\3\30\5\30\u03a2\n\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\31\3\31\3\31\5\31\u03ac\n\31\3\31\5\31\u03af\n\31")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u03b8\n\32\3")
        buf.write("\32\5\32\u03bb\n\32\5\32\u03bd\n\32\3\33\3\33\3\33\5\33")
        buf.write("\u03c2\n\33\3\33\3\33\5\33\u03c6\n\33\3\33\5\33\u03c9")
        buf.write("\n\33\3\33\3\33\3\33\3\33\3\33\5\33\u03d0\n\33\3\33\3")
        buf.write("\33\3\33\5\33\u03d5\n\33\3\33\3\33\3\33\3\33\3\33\7\33")
        buf.write("\u03dc\n\33\f\33\16\33\u03df\13\33\5\33\u03e1\n\33\3\33")
        buf.write("\3\33\5\33\u03e5\n\33\3\33\5\33\u03e8\n\33\3\33\3\33\3")
        buf.write("\33\3\33\7\33\u03ee\n\33\f\33\16\33\u03f1\13\33\3\33\5")
        buf.write("\33\u03f4\n\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u03fc")
        buf.write("\n\33\3\33\5\33\u03ff\n\33\5\33\u0401\n\33\3\34\3\34\3")
        buf.write("\34\3\34\3\34\7\34\u0408\n\34\f\34\16\34\u040b\13\34\3")
        buf.write("\35\3\35\5\35\u040f\n\35\3\35\3\35\5\35\u0413\n\35\3\35")
        buf.write("\3\35\5\35\u0417\n\35\3\35\5\35\u041a\n\35\3\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\7\36\u0423\n\36\f\36\16\36\u0426")
        buf.write("\13\36\3\36\3\36\5\36\u042a\n\36\3\37\3\37\5\37\u042e")
        buf.write("\n\37\3\37\3\37\3\37\7\37\u0433\n\37\f\37\16\37\u0436")
        buf.write("\13\37\3\37\3\37\3\37\3\37\7\37\u043c\n\37\f\37\16\37")
        buf.write("\u043f\13\37\3\37\5\37\u0442\n\37\5\37\u0444\n\37\3\37")
        buf.write("\3\37\5\37\u0448\n\37\3\37\3\37\3\37\3\37\3\37\7\37\u044f")
        buf.write("\n\37\f\37\16\37\u0452\13\37\3\37\3\37\5\37\u0456\n\37")
        buf.write("\5\37\u0458\n\37\3\37\3\37\3\37\3\37\3\37\7\37\u045f\n")
        buf.write("\37\f\37\16\37\u0462\13\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\7\37\u046a\n\37\f\37\16\37\u046d\13\37\3\37\3\37\7")
        buf.write("\37\u0471\n\37\f\37\16\37\u0474\13\37\5\37\u0476\n\37")
        buf.write("\3 \3 \3 \5 \u047b\n \3!\3!\3!\3!\3!\5!\u0482\n!\3\"\3")
        buf.write("\"\3#\5#\u0487\n#\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\5\'")
        buf.write("\u0493\n\'\3\'\7\'\u0496\n\'\f\'\16\'\u0499\13\'\3(\3")
        buf.write("(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u04b3\n\61\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\5\62\u04bc\n\62\3\62\4\u00d3")
        buf.write("\u016a\3*\63\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b\2\22\3\2\u0085")
        buf.write("\u0086\4\2$$>>\4\2==\u008d\u008d\4\2\7\7ll\4\2\37\37@")
        buf.write("@\4\2\t\t\16\17\3\2\n\13\3\2\20\23\3\2\24\27\4\2\b\b\30")
        buf.write("\32\6\2OOcceexx\7\2\33\33JJSS||\177\177\6\2\668jj\u0098")
        buf.write("\u0098\u009a\u009b\4\2\n\fhh\4\2\u0097\u0097\u009a\u009a")
        buf.write("\3\2\33\u0096\2\u057f\2g\3\2\2\2\4o\3\2\2\2\6\u008e\3")
        buf.write("\2\2\2\b\u0090\3\2\2\2\n\u009d\3\2\2\2\f\u00bd\3\2\2\2")
        buf.write("\16\u00e8\3\2\2\2\20\u010d\3\2\2\2\22\u013f\3\2\2\2\24")
        buf.write("\u0168\3\2\2\2\26\u0178\3\2\2\2\30\u0181\3\2\2\2\32\u01a6")
        buf.write("\3\2\2\2\34\u01c6\3\2\2\2\36\u01de\3\2\2\2 \u0247\3\2")
        buf.write("\2\2\"\u024a\3\2\2\2$\u026d\3\2\2\2&\u02a4\3\2\2\2(\u02f1")
        buf.write("\3\2\2\2*\u032d\3\2\2\2,\u0389\3\2\2\2.\u0395\3\2\2\2")
        buf.write("\60\u03a8\3\2\2\2\62\u03bc\3\2\2\2\64\u0400\3\2\2\2\66")
        buf.write("\u0402\3\2\2\28\u0419\3\2\2\2:\u0429\3\2\2\2<\u0475\3")
        buf.write("\2\2\2>\u047a\3\2\2\2@\u0481\3\2\2\2B\u0483\3\2\2\2D\u0486")
        buf.write("\3\2\2\2F\u048a\3\2\2\2H\u048c\3\2\2\2J\u048e\3\2\2\2")
        buf.write("L\u0490\3\2\2\2N\u049a\3\2\2\2P\u049c\3\2\2\2R\u049e\3")
        buf.write("\2\2\2T\u04a0\3\2\2\2V\u04a2\3\2\2\2X\u04a4\3\2\2\2Z\u04a6")
        buf.write("\3\2\2\2\\\u04a8\3\2\2\2^\u04aa\3\2\2\2`\u04b2\3\2\2\2")
        buf.write("b\u04bb\3\2\2\2df\5\4\3\2ed\3\2\2\2fi\3\2\2\2ge\3\2\2")
        buf.write("\2gh\3\2\2\2hj\3\2\2\2ig\3\2\2\2jk\7\2\2\3k\3\3\2\2\2")
        buf.write("ln\7\3\2\2ml\3\2\2\2nq\3\2\2\2om\3\2\2\2op\3\2\2\2pr\3")
        buf.write("\2\2\2qo\3\2\2\2r{\5\6\4\2su\7\3\2\2ts\3\2\2\2uv\3\2\2")
        buf.write("\2vt\3\2\2\2vw\3\2\2\2wx\3\2\2\2xz\5\6\4\2yt\3\2\2\2z")
        buf.write("}\3\2\2\2{y\3\2\2\2{|\3\2\2\2|\u0081\3\2\2\2}{\3\2\2\2")
        buf.write("~\u0080\7\3\2\2\177~\3\2\2\2\u0080\u0083\3\2\2\2\u0081")
        buf.write("\177\3\2\2\2\u0081\u0082\3\2\2\2\u0082\5\3\2\2\2\u0083")
        buf.write("\u0081\3\2\2\2\u0084\u008f\5\30\r\2\u0085\u008f\5\32\16")
        buf.write("\2\u0086\u008f\5\34\17\2\u0087\u008f\5\36\20\2\u0088\u008f")
        buf.write("\5\n\6\2\u0089\u008f\5\f\7\2\u008a\u008f\5\b\5\2\u008b")
        buf.write("\u008f\5\"\22\2\u008c\u008f\5$\23\2\u008d\u008f\5&\24")
        buf.write("\2\u008e\u0084\3\2\2\2\u008e\u0085\3\2\2\2\u008e\u0086")
        buf.write("\3\2\2\2\u008e\u0087\3\2\2\2\u008e\u0088\3\2\2\2\u008e")
        buf.write("\u0089\3\2\2\2\u008e\u008a\3\2\2\2\u008e\u008b\3\2\2\2")
        buf.write("\u008e\u008c\3\2\2\2\u008e\u008d\3\2\2\2\u008f\7\3\2\2")
        buf.write("\2\u0090\u009b\7y\2\2\u0091\u009c\5\\/\2\u0092\u0093\5")
        buf.write("R*\2\u0093\u0094\7\4\2\2\u0094\u0096\3\2\2\2\u0095\u0092")
        buf.write("\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0099\3\2\2\2\u0097")
        buf.write("\u009a\5X-\2\u0098\u009a\5^\60\2\u0099\u0097\3\2\2\2\u0099")
        buf.write("\u0098\3\2\2\2\u009a\u009c\3\2\2\2\u009b\u0091\3\2\2\2")
        buf.write("\u009b\u0095\3\2\2\2\u009b\u009c\3\2\2\2\u009c\t\3\2\2")
        buf.write("\2\u009d\u009f\7\64\2\2\u009e\u00a0\7\u008c\2\2\u009f")
        buf.write("\u009e\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a1\3\2\2\2")
        buf.write("\u00a1\u00a5\7V\2\2\u00a2\u00a3\7R\2\2\u00a3\u00a4\7h")
        buf.write("\2\2\u00a4\u00a6\7H\2\2\u00a5\u00a2\3\2\2\2\u00a5\u00a6")
        buf.write("\3\2\2\2\u00a6\u00aa\3\2\2\2\u00a7\u00a8\5R*\2\u00a8\u00a9")
        buf.write("\7\4\2\2\u00a9\u00ab\3\2\2\2\u00aa\u00a7\3\2\2\2\u00aa")
        buf.write("\u00ab\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00ad\5^\60\2")
        buf.write("\u00ad\u00ae\7m\2\2\u00ae\u00af\5X-\2\u00af\u00b0\7\5")
        buf.write("\2\2\u00b0\u00b5\5\26\f\2\u00b1\u00b2\7\7\2\2\u00b2\u00b4")
        buf.write("\5\26\f\2\u00b3\u00b1\3\2\2\2\u00b4\u00b7\3\2\2\2\u00b5")
        buf.write("\u00b3\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b8\3\2\2\2")
        buf.write("\u00b7\u00b5\3\2\2\2\u00b8\u00bb\7\6\2\2\u00b9\u00ba\7")
        buf.write("\u0094\2\2\u00ba\u00bc\5*\26\2\u00bb\u00b9\3\2\2\2\u00bb")
        buf.write("\u00bc\3\2\2\2\u00bc\13\3\2\2\2\u00bd\u00bf\7\64\2\2\u00be")
        buf.write("\u00c0\t\2\2\2\u00bf\u00be\3\2\2\2\u00bf\u00c0\3\2\2\2")
        buf.write("\u00c0\u00c1\3\2\2\2\u00c1\u00c5\7\u0084\2\2\u00c2\u00c3")
        buf.write("\7R\2\2\u00c3\u00c4\7h\2\2\u00c4\u00c6\7H\2\2\u00c5\u00c2")
        buf.write("\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00ca\3\2\2\2\u00c7")
        buf.write("\u00c8\5R*\2\u00c8\u00c9\7\4\2\2\u00c9\u00cb\3\2\2\2\u00ca")
        buf.write("\u00c7\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\3\2\2\2")
        buf.write("\u00cc\u00e4\5X-\2\u00cd\u00ce\7\5\2\2\u00ce\u00d3\5L")
        buf.write("\'\2\u00cf\u00d0\7\7\2\2\u00d0\u00d2\5L\'\2\u00d1\u00cf")
        buf.write("\3\2\2\2\u00d2\u00d5\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d3")
        buf.write("\u00d1\3\2\2\2\u00d4\u00da\3\2\2\2\u00d5\u00d3\3\2\2\2")
        buf.write("\u00d6\u00d7\7\7\2\2\u00d7\u00d9\5\22\n\2\u00d8\u00d6")
        buf.write("\3\2\2\2\u00d9\u00dc\3\2\2\2\u00da\u00d8\3\2\2\2\u00da")
        buf.write("\u00db\3\2\2\2\u00db\u00dd\3\2\2\2\u00dc\u00da\3\2\2\2")
        buf.write("\u00dd\u00e0\7\6\2\2\u00de\u00df\7\u0096\2\2\u00df\u00e1")
        buf.write("\7\u0097\2\2\u00e0\u00de\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1")
        buf.write("\u00e5\3\2\2\2\u00e2\u00e3\7#\2\2\u00e3\u00e5\5\36\20")
        buf.write("\2\u00e4\u00cd\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e5\r\3\2")
        buf.write("\2\2\u00e6\u00e7\7\63\2\2\u00e7\u00e9\5P)\2\u00e8\u00e6")
        buf.write("\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u010b\3\2\2\2\u00ea")
        buf.write("\u00eb\7s\2\2\u00eb\u00ed\7a\2\2\u00ec\u00ee\t\3\2\2\u00ed")
        buf.write("\u00ec\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00ef\3\2\2\2")
        buf.write("\u00ef\u00f1\5> \2\u00f0\u00f2\7&\2\2\u00f1\u00f0\3\2")
        buf.write("\2\2\u00f1\u00f2\3\2\2\2\u00f2\u010c\3\2\2\2\u00f3\u00f5")
        buf.write("\7h\2\2\u00f4\u00f3\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5")
        buf.write("\u00f6\3\2\2\2\u00f6\u00f7\7j\2\2\u00f7\u010c\5> \2\u00f8")
        buf.write("\u00f9\7\u008c\2\2\u00f9\u010c\5> \2\u00fa\u00fb\7.\2")
        buf.write("\2\u00fb\u00fc\7\5\2\2\u00fc\u00fd\5*\26\2\u00fd\u00fe")
        buf.write("\7\6\2\2\u00fe\u010c\3\2\2\2\u00ff\u0106\7:\2\2\u0100")
        buf.write("\u0107\5D#\2\u0101\u0107\5F$\2\u0102\u0103\7\5\2\2\u0103")
        buf.write("\u0104\5*\26\2\u0104\u0105\7\6\2\2\u0105\u0107\3\2\2\2")
        buf.write("\u0106\u0100\3\2\2\2\u0106\u0101\3\2\2\2\u0106\u0102\3")
        buf.write("\2\2\2\u0107\u010c\3\2\2\2\u0108\u0109\7/\2\2\u0109\u010c")
        buf.write("\5\\/\2\u010a\u010c\5\20\t\2\u010b\u00ea\3\2\2\2\u010b")
        buf.write("\u00f4\3\2\2\2\u010b\u00f8\3\2\2\2\u010b\u00fa\3\2\2\2")
        buf.write("\u010b\u00ff\3\2\2\2\u010b\u0108\3\2\2\2\u010b\u010a\3")
        buf.write("\2\2\2\u010c\17\3\2\2\2\u010d\u010e\7w\2\2\u010e\u011a")
        buf.write("\5B\"\2\u010f\u0110\7\5\2\2\u0110\u0115\5Z.\2\u0111\u0112")
        buf.write("\7\7\2\2\u0112\u0114\5Z.\2\u0113\u0111\3\2\2\2\u0114\u0117")
        buf.write("\3\2\2\2\u0115\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116")
        buf.write("\u0118\3\2\2\2\u0117\u0115\3\2\2\2\u0118\u0119\7\6\2\2")
        buf.write("\u0119\u011b\3\2\2\2\u011a\u010f\3\2\2\2\u011a\u011b\3")
        buf.write("\2\2\2\u011b\u012e\3\2\2\2\u011c\u011d\7m\2\2\u011d\u0126")
        buf.write("\t\4\2\2\u011e\u011f\7\u0083\2\2\u011f\u0127\7j\2\2\u0120")
        buf.write("\u0121\7\u0083\2\2\u0121\u0127\7:\2\2\u0122\u0127\7+\2")
        buf.write("\2\u0123\u0127\7}\2\2\u0124\u0125\7g\2\2\u0125\u0127\7")
        buf.write("\34\2\2\u0126\u011e\3\2\2\2\u0126\u0120\3\2\2\2\u0126")
        buf.write("\u0122\3\2\2\2\u0126\u0123\3\2\2\2\u0126\u0124\3\2\2\2")
        buf.write("\u0127\u012b\3\2\2\2\u0128\u0129\7e\2\2\u0129\u012b\5")
        buf.write("P)\2\u012a\u011c\3\2\2\2\u012a\u0128\3\2\2\2\u012b\u012d")
        buf.write("\3\2\2\2\u012c\u012a\3\2\2\2\u012d\u0130\3\2\2\2\u012e")
        buf.write("\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u013b\3\2\2\2")
        buf.write("\u0130\u012e\3\2\2\2\u0131\u0133\7h\2\2\u0132\u0131\3")
        buf.write("\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0139")
        buf.write("\7;\2\2\u0135\u0136\7X\2\2\u0136\u013a\7<\2\2\u0137\u0138")
        buf.write("\7X\2\2\u0138\u013a\7T\2\2\u0139\u0135\3\2\2\2\u0139\u0137")
        buf.write("\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013c\3\2\2\2\u013b")
        buf.write("\u0132\3\2\2\2\u013b\u013c\3\2\2\2\u013c\21\3\2\2\2\u013d")
        buf.write("\u013e\7\63\2\2\u013e\u0140\5P)\2\u013f\u013d\3\2\2\2")
        buf.write("\u013f\u0140\3\2\2\2\u0140\u0165\3\2\2\2\u0141\u0142\7")
        buf.write("s\2\2\u0142\u0145\7a\2\2\u0143\u0145\7\u008c\2\2\u0144")
        buf.write("\u0141\3\2\2\2\u0144\u0143\3\2\2\2\u0145\u0146\3\2\2\2")
        buf.write("\u0146\u0147\7\5\2\2\u0147\u014c\5\26\f\2\u0148\u0149")
        buf.write("\7\7\2\2\u0149\u014b\5\26\f\2\u014a\u0148\3\2\2\2\u014b")
        buf.write("\u014e\3\2\2\2\u014c\u014a\3\2\2\2\u014c\u014d\3\2\2\2")
        buf.write("\u014d\u014f\3\2\2\2\u014e\u014c\3\2\2\2\u014f\u0150\7")
        buf.write("\6\2\2\u0150\u0151\5> \2\u0151\u0166\3\2\2\2\u0152\u0153")
        buf.write("\7.\2\2\u0153\u0154\7\5\2\2\u0154\u0155\5*\26\2\u0155")
        buf.write("\u0156\7\6\2\2\u0156\u0166\3\2\2\2\u0157\u0158\7L\2\2")
        buf.write("\u0158\u0159\7a\2\2\u0159\u015a\7\5\2\2\u015a\u015f\5")
        buf.write("Z.\2\u015b\u015c\7\7\2\2\u015c\u015e\5Z.\2\u015d\u015b")
        buf.write("\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\u0162\3\2\2\2\u0161\u015f\3\2\2\2")
        buf.write("\u0162\u0163\7\6\2\2\u0163\u0164\5\20\t\2\u0164\u0166")
        buf.write("\3\2\2\2\u0165\u0144\3\2\2\2\u0165\u0152\3\2\2\2\u0165")
        buf.write("\u0157\3\2\2\2\u0166\23\3\2\2\2\u0167\u0169\5P)\2\u0168")
        buf.write("\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016b\3\2\2\2")
        buf.write("\u016a\u0168\3\2\2\2\u016b\u0176\3\2\2\2\u016c\u016d\7")
        buf.write("\5\2\2\u016d\u016e\5D#\2\u016e\u016f\7\6\2\2\u016f\u0177")
        buf.write("\3\2\2\2\u0170\u0171\7\5\2\2\u0171\u0172\5D#\2\u0172\u0173")
        buf.write("\7\7\2\2\u0173\u0174\5D#\2\u0174\u0175\7\6\2\2\u0175\u0177")
        buf.write("\3\2\2\2\u0176\u016c\3\2\2\2\u0176\u0170\3\2\2\2\u0176")
        buf.write("\u0177\3\2\2\2\u0177\25\3\2\2\2\u0178\u017b\5Z.\2\u0179")
        buf.write("\u017a\7/\2\2\u017a\u017c\5\\/\2\u017b\u0179\3\2\2\2\u017b")
        buf.write("\u017c\3\2\2\2\u017c\u017e\3\2\2\2\u017d\u017f\t\3\2\2")
        buf.write("\u017e\u017d\3\2\2\2\u017e\u017f\3\2\2\2\u017f\27\3\2")
        buf.write("\2\2\u0180\u0182\5,\27\2\u0181\u0180\3\2\2\2\u0181\u0182")
        buf.write("\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u018d\5<\37\2\u0184")
        buf.write("\u0186\7\u008b\2\2\u0185\u0187\7\37\2\2\u0186\u0185\3")
        buf.write("\2\2\2\u0186\u0187\3\2\2\2\u0187\u018b\3\2\2\2\u0188\u018b")
        buf.write("\7\\\2\2\u0189\u018b\7F\2\2\u018a\u0184\3\2\2\2\u018a")
        buf.write("\u0188\3\2\2\2\u018a\u0189\3\2\2\2\u018b\u018c\3\2\2\2")
        buf.write("\u018c\u018e\5<\37\2\u018d\u018a\3\2\2\2\u018e\u018f\3")
        buf.write("\2\2\2\u018f\u018d\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u019b")
        buf.write("\3\2\2\2\u0191\u0192\7o\2\2\u0192\u0193\7*\2\2\u0193\u0198")
        buf.write("\5\60\31\2\u0194\u0195\7\7\2\2\u0195\u0197\5\60\31\2\u0196")
        buf.write("\u0194\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0196\3\2\2\2")
        buf.write("\u0198\u0199\3\2\2\2\u0199\u019c\3\2\2\2\u019a\u0198\3")
        buf.write("\2\2\2\u019b\u0191\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u01a3")
        buf.write("\3\2\2\2\u019d\u019e\7d\2\2\u019e\u01a1\5*\26\2\u019f")
        buf.write("\u01a0\t\5\2\2\u01a0\u01a2\5*\26\2\u01a1\u019f\3\2\2\2")
        buf.write("\u01a1\u01a2\3\2\2\2\u01a2\u01a4\3\2\2\2\u01a3\u019d\3")
        buf.write("\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\31\3\2\2\2\u01a5\u01a7")
        buf.write("\5,\27\2\u01a6\u01a5\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7")
        buf.write("\u01a8\3\2\2\2\u01a8\u01ae\5<\37\2\u01a9\u01aa\5@!\2\u01aa")
        buf.write("\u01ab\5<\37\2\u01ab\u01ad\3\2\2\2\u01ac\u01a9\3\2\2\2")
        buf.write("\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae\u01af\3")
        buf.write("\2\2\2\u01af\u01bb\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b1\u01b2")
        buf.write("\7o\2\2\u01b2\u01b3\7*\2\2\u01b3\u01b8\5\60\31\2\u01b4")
        buf.write("\u01b5\7\7\2\2\u01b5\u01b7\5\60\31\2\u01b6\u01b4\3\2\2")
        buf.write("\2\u01b7\u01ba\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b8\u01b9")
        buf.write("\3\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01b8\3\2\2\2\u01bb")
        buf.write("\u01b1\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01c3\3\2\2\2")
        buf.write("\u01bd\u01be\7d\2\2\u01be\u01c1\5*\26\2\u01bf\u01c0\t")
        buf.write("\5\2\2\u01c0\u01c2\5*\26\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2")
        buf.write("\3\2\2\2\u01c2\u01c4\3\2\2\2\u01c3\u01bd\3\2\2\2\u01c3")
        buf.write("\u01c4\3\2\2\2\u01c4\33\3\2\2\2\u01c5\u01c7\5,\27\2\u01c6")
        buf.write("\u01c5\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01c8\3\2\2\2")
        buf.write("\u01c8\u01d3\5<\37\2\u01c9\u01ca\7o\2\2\u01ca\u01cb\7")
        buf.write("*\2\2\u01cb\u01d0\5\60\31\2\u01cc\u01cd\7\7\2\2\u01cd")
        buf.write("\u01cf\5\60\31\2\u01ce\u01cc\3\2\2\2\u01cf\u01d2\3\2\2")
        buf.write("\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d4")
        buf.write("\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d3\u01c9\3\2\2\2\u01d3")
        buf.write("\u01d4\3\2\2\2\u01d4\u01db\3\2\2\2\u01d5\u01d6\7d\2\2")
        buf.write("\u01d6\u01d9\5*\26\2\u01d7\u01d8\t\5\2\2\u01d8\u01da\5")
        buf.write("*\26\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01dc")
        buf.write("\3\2\2\2\u01db\u01d5\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc")
        buf.write("\35\3\2\2\2\u01dd\u01df\5,\27\2\u01de\u01dd\3\2\2\2\u01de")
        buf.write("\u01df\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e6\5 \21\2")
        buf.write("\u01e1\u01e2\5@!\2\u01e2\u01e3\5 \21\2\u01e3\u01e5\3\2")
        buf.write("\2\2\u01e4\u01e1\3\2\2\2\u01e5\u01e8\3\2\2\2\u01e6\u01e4")
        buf.write("\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01f3\3\2\2\2\u01e8")
        buf.write("\u01e6\3\2\2\2\u01e9\u01ea\7o\2\2\u01ea\u01eb\7*\2\2\u01eb")
        buf.write("\u01f0\5\60\31\2\u01ec\u01ed\7\7\2\2\u01ed\u01ef\5\60")
        buf.write("\31\2\u01ee\u01ec\3\2\2\2\u01ef\u01f2\3\2\2\2\u01f0\u01ee")
        buf.write("\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f4\3\2\2\2\u01f2")
        buf.write("\u01f0\3\2\2\2\u01f3\u01e9\3\2\2\2\u01f3\u01f4\3\2\2\2")
        buf.write("\u01f4\u01fb\3\2\2\2\u01f5\u01f6\7d\2\2\u01f6\u01f9\5")
        buf.write("*\26\2\u01f7\u01f8\t\5\2\2\u01f8\u01fa\5*\26\2\u01f9\u01f7")
        buf.write("\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fc\3\2\2\2\u01fb")
        buf.write("\u01f5\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\37\3\2\2\2\u01fd")
        buf.write("\u01ff\7\u0082\2\2\u01fe\u0200\t\6\2\2\u01ff\u01fe\3\2")
        buf.write("\2\2\u01ff\u0200\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0206")
        buf.write("\5\62\32\2\u0202\u0203\7\7\2\2\u0203\u0205\5\62\32\2\u0204")
        buf.write("\u0202\3\2\2\2\u0205\u0208\3\2\2\2\u0206\u0204\3\2\2\2")
        buf.write("\u0206\u0207\3\2\2\2\u0207\u0215\3\2\2\2\u0208\u0206\3")
        buf.write("\2\2\2\u0209\u0213\7M\2\2\u020a\u020f\5\64\33\2\u020b")
        buf.write("\u020c\7\7\2\2\u020c\u020e\5\64\33\2\u020d\u020b\3\2\2")
        buf.write("\2\u020e\u0211\3\2\2\2\u020f\u020d\3\2\2\2\u020f\u0210")
        buf.write("\3\2\2\2\u0210\u0214\3\2\2\2\u0211\u020f\3\2\2\2\u0212")
        buf.write("\u0214\5\66\34\2\u0213\u020a\3\2\2\2\u0213\u0212\3\2\2")
        buf.write("\2\u0214\u0216\3\2\2\2\u0215\u0209\3\2\2\2\u0215\u0216")
        buf.write("\3\2\2\2\u0216\u0219\3\2\2\2\u0217\u0218\7\u0094\2\2\u0218")
        buf.write("\u021a\5*\26\2\u0219\u0217\3\2\2\2\u0219\u021a\3\2\2\2")
        buf.write("\u021a\u0229\3\2\2\2\u021b\u021c\7P\2\2\u021c\u021d\7")
        buf.write("*\2\2\u021d\u0222\5*\26\2\u021e\u021f\7\7\2\2\u021f\u0221")
        buf.write("\5*\26\2\u0220\u021e\3\2\2\2\u0221\u0224\3\2\2\2\u0222")
        buf.write("\u0220\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0227\3\2\2\2")
        buf.write("\u0224\u0222\3\2\2\2\u0225\u0226\7Q\2\2\u0226\u0228\5")
        buf.write("*\26\2\u0227\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u022a")
        buf.write("\3\2\2\2\u0229\u021b\3\2\2\2\u0229\u022a\3\2\2\2\u022a")
        buf.write("\u0248\3\2\2\2\u022b\u022c\7\u0090\2\2\u022c\u022d\7\5")
        buf.write("\2\2\u022d\u0232\5*\26\2\u022e\u022f\7\7\2\2\u022f\u0231")
        buf.write("\5*\26\2\u0230\u022e\3\2\2\2\u0231\u0234\3\2\2\2\u0232")
        buf.write("\u0230\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0235\3\2\2\2")
        buf.write("\u0234\u0232\3\2\2\2\u0235\u0244\7\6\2\2\u0236\u0237\7")
        buf.write("\7\2\2\u0237\u0238\7\5\2\2\u0238\u023d\5*\26\2\u0239\u023a")
        buf.write("\7\7\2\2\u023a\u023c\5*\26\2\u023b\u0239\3\2\2\2\u023c")
        buf.write("\u023f\3\2\2\2\u023d\u023b\3\2\2\2\u023d\u023e\3\2\2\2")
        buf.write("\u023e\u0240\3\2\2\2\u023f\u023d\3\2\2\2\u0240\u0241\7")
        buf.write("\6\2\2\u0241\u0243\3\2\2\2\u0242\u0236\3\2\2\2\u0243\u0246")
        buf.write("\3\2\2\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245")
        buf.write("\u0248\3\2\2\2\u0246\u0244\3\2\2\2\u0247\u01fd\3\2\2\2")
        buf.write("\u0247\u022b\3\2\2\2\u0248!\3\2\2\2\u0249\u024b\5,\27")
        buf.write("\2\u024a\u0249\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u0257\7\u008d\2\2\u024d\u024e\7n\2\2\u024e")
        buf.write("\u0258\7\177\2\2\u024f\u0250\7n\2\2\u0250\u0258\7\33\2")
        buf.write("\2\u0251\u0252\7n\2\2\u0252\u0258\7|\2\2\u0253\u0254\7")
        buf.write("n\2\2\u0254\u0258\7J\2\2\u0255\u0256\7n\2\2\u0256\u0258")
        buf.write("\7S\2\2\u0257\u024d\3\2\2\2\u0257\u024f\3\2\2\2\u0257")
        buf.write("\u0251\3\2\2\2\u0257\u0253\3\2\2\2\u0257\u0255\3\2\2\2")
        buf.write("\u0257\u0258\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025a\5")
        buf.write("(\25\2\u025a\u025b\7\u0083\2\2\u025b\u025c\5Z.\2\u025c")
        buf.write("\u025d\7\b\2\2\u025d\u0265\5*\26\2\u025e\u025f\7\7\2\2")
        buf.write("\u025f\u0260\5Z.\2\u0260\u0261\7\b\2\2\u0261\u0262\5*")
        buf.write("\26\2\u0262\u0264\3\2\2\2\u0263\u025e\3\2\2\2\u0264\u0267")
        buf.write("\3\2\2\2\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2\u0266")
        buf.write("\u026a\3\2\2\2\u0267\u0265\3\2\2\2\u0268\u0269\7\u0094")
        buf.write("\2\2\u0269\u026b\5*\26\2\u026a\u0268\3\2\2\2\u026a\u026b")
        buf.write("\3\2\2\2\u026b#\3\2\2\2\u026c\u026e\5,\27\2\u026d\u026c")
        buf.write("\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u026f\3\2\2\2\u026f")
        buf.write("\u027a\7\u008d\2\2\u0270\u0271\7n\2\2\u0271\u027b\7\177")
        buf.write("\2\2\u0272\u0273\7n\2\2\u0273\u027b\7\33\2\2\u0274\u0275")
        buf.write("\7n\2\2\u0275\u027b\7|\2\2\u0276\u0277\7n\2\2\u0277\u027b")
        buf.write("\7J\2\2\u0278\u0279\7n\2\2\u0279\u027b\7S\2\2\u027a\u0270")
        buf.write("\3\2\2\2\u027a\u0272\3\2\2\2\u027a\u0274\3\2\2\2\u027a")
        buf.write("\u0276\3\2\2\2\u027a\u0278\3\2\2\2\u027a\u027b\3\2\2\2")
        buf.write("\u027b\u027c\3\2\2\2\u027c\u027d\5(\25\2\u027d\u027e\7")
        buf.write("\u0083\2\2\u027e\u027f\5Z.\2\u027f\u0280\7\b\2\2\u0280")
        buf.write("\u0288\5*\26\2\u0281\u0282\7\7\2\2\u0282\u0283\5Z.\2\u0283")
        buf.write("\u0284\7\b\2\2\u0284\u0285\5*\26\2\u0285\u0287\3\2\2\2")
        buf.write("\u0286\u0281\3\2\2\2\u0287\u028a\3\2\2\2\u0288\u0286\3")
        buf.write("\2\2\2\u0288\u0289\3\2\2\2\u0289\u028d\3\2\2\2\u028a\u0288")
        buf.write("\3\2\2\2\u028b\u028c\7\u0094\2\2\u028c\u028e\5*\26\2\u028d")
        buf.write("\u028b\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u02a1\3\2\2\2")
        buf.write("\u028f\u0290\7o\2\2\u0290\u0291\7*\2\2\u0291\u0296\5\60")
        buf.write("\31\2\u0292\u0293\7\7\2\2\u0293\u0295\5\60\31\2\u0294")
        buf.write("\u0292\3\2\2\2\u0295\u0298\3\2\2\2\u0296\u0294\3\2\2\2")
        buf.write("\u0296\u0297\3\2\2\2\u0297\u029a\3\2\2\2\u0298\u0296\3")
        buf.write("\2\2\2\u0299\u028f\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b")
        buf.write("\3\2\2\2\u029b\u029c\7d\2\2\u029c\u029f\5*\26\2\u029d")
        buf.write("\u029e\t\5\2\2\u029e\u02a0\5*\26\2\u029f\u029d\3\2\2\2")
        buf.write("\u029f\u02a0\3\2\2\2\u02a0\u02a2\3\2\2\2\u02a1\u0299\3")
        buf.write("\2\2\2\u02a1\u02a2\3\2\2\2\u02a2%\3\2\2\2\u02a3\u02a5")
        buf.write("\5,\27\2\u02a4\u02a3\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5")
        buf.write("\u02b7\3\2\2\2\u02a6\u02b8\7Z\2\2\u02a7\u02b8\7|\2\2\u02a8")
        buf.write("\u02a9\7Z\2\2\u02a9\u02aa\7n\2\2\u02aa\u02b8\7|\2\2\u02ab")
        buf.write("\u02ac\7Z\2\2\u02ac\u02ad\7n\2\2\u02ad\u02b8\7\177\2\2")
        buf.write("\u02ae\u02af\7Z\2\2\u02af\u02b0\7n\2\2\u02b0\u02b8\7\33")
        buf.write("\2\2\u02b1\u02b2\7Z\2\2\u02b2\u02b3\7n\2\2\u02b3\u02b8")
        buf.write("\7J\2\2\u02b4\u02b5\7Z\2\2\u02b5\u02b6\7n\2\2\u02b6\u02b8")
        buf.write("\7S\2\2\u02b7\u02a6\3\2\2\2\u02b7\u02a7\3\2\2\2\u02b7")
        buf.write("\u02a8\3\2\2\2\u02b7\u02ab\3\2\2\2\u02b7\u02ae\3\2\2\2")
        buf.write("\u02b7\u02b1\3\2\2\2\u02b7\u02b4\3\2\2\2\u02b8\u02b9\3")
        buf.write("\2\2\2\u02b9\u02bd\7]\2\2\u02ba\u02bb\5R*\2\u02bb\u02bc")
        buf.write("\7\4\2\2\u02bc\u02be\3\2\2\2\u02bd\u02ba\3\2\2\2\u02bd")
        buf.write("\u02be\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02cb\5X-\2\u02c0")
        buf.write("\u02c1\7\5\2\2\u02c1\u02c6\5Z.\2\u02c2\u02c3\7\7\2\2\u02c3")
        buf.write("\u02c5\5Z.\2\u02c4\u02c2\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6")
        buf.write("\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c9\3\2\2\2")
        buf.write("\u02c8\u02c6\3\2\2\2\u02c9\u02ca\7\6\2\2\u02ca\u02cc\3")
        buf.write("\2\2\2\u02cb\u02c0\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02ec")
        buf.write("\3\2\2\2\u02cd\u02ce\7\u0090\2\2\u02ce\u02cf\7\5\2\2\u02cf")
        buf.write("\u02d4\5*\26\2\u02d0\u02d1\7\7\2\2\u02d1\u02d3\5*\26\2")
        buf.write("\u02d2\u02d0\3\2\2\2\u02d3\u02d6\3\2\2\2\u02d4\u02d2\3")
        buf.write("\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d7\3\2\2\2\u02d6\u02d4")
        buf.write("\3\2\2\2\u02d7\u02e6\7\6\2\2\u02d8\u02d9\7\7\2\2\u02d9")
        buf.write("\u02da\7\5\2\2\u02da\u02df\5*\26\2\u02db\u02dc\7\7\2\2")
        buf.write("\u02dc\u02de\5*\26\2\u02dd\u02db\3\2\2\2\u02de\u02e1\3")
        buf.write("\2\2\2\u02df\u02dd\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e2")
        buf.write("\3\2\2\2\u02e1\u02df\3\2\2\2\u02e2\u02e3\7\6\2\2\u02e3")
        buf.write("\u02e5\3\2\2\2\u02e4\u02d8\3\2\2\2\u02e5\u02e8\3\2\2\2")
        buf.write("\u02e6\u02e4\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02ed\3")
        buf.write("\2\2\2\u02e8\u02e6\3\2\2\2\u02e9\u02ed\5\36\20\2\u02ea")
        buf.write("\u02eb\7:\2\2\u02eb\u02ed\7\u0090\2\2\u02ec\u02cd\3\2")
        buf.write("\2\2\u02ec\u02e9\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ed\'\3")
        buf.write("\2\2\2\u02ee\u02ef\5R*\2\u02ef\u02f0\7\4\2\2\u02f0\u02f2")
        buf.write("\3\2\2\2\u02f1\u02ee\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2")
        buf.write("\u02f3\3\2\2\2\u02f3\u02f9\5X-\2\u02f4\u02f5\7W\2\2\u02f5")
        buf.write("\u02f6\7*\2\2\u02f6\u02fa\5^\60\2\u02f7\u02f8\7h\2\2\u02f8")
        buf.write("\u02fa\7W\2\2\u02f9\u02f4\3\2\2\2\u02f9\u02f7\3\2\2\2")
        buf.write("\u02f9\u02fa\3\2\2\2\u02fa)\3\2\2\2\u02fb\u02fc\b\26\1")
        buf.write("\2\u02fc\u032e\5F$\2\u02fd\u032e\7\u0099\2\2\u02fe\u02ff")
        buf.write("\5R*\2\u02ff\u0300\7\4\2\2\u0300\u0302\3\2\2\2\u0301\u02fe")
        buf.write("\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0303\3\2\2\2\u0303")
        buf.write("\u0304\5X-\2\u0304\u0305\7\4\2\2\u0305\u0307\3\2\2\2\u0306")
        buf.write("\u0301\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0308\3\2\2\2")
        buf.write("\u0308\u032e\5Z.\2\u0309\u030a\5H%\2\u030a\u030b\5*\26")
        buf.write("\24\u030b\u032e\3\2\2\2\u030c\u030d\7\5\2\2\u030d\u030e")
        buf.write("\5*\26\2\u030e\u030f\7\6\2\2\u030f\u032e\3\2\2\2\u0310")
        buf.write("\u0312\7h\2\2\u0311\u0310\3\2\2\2\u0311\u0312\3\2\2\2")
        buf.write("\u0312\u0313\3\2\2\2\u0313\u0315\7H\2\2\u0314\u0311\3")
        buf.write("\2\2\2\u0314\u0315\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0317")
        buf.write("\7\5\2\2\u0317\u0318\5\36\20\2\u0318\u0319\7\6\2\2\u0319")
        buf.write("\u032e\3\2\2\2\u031a\u031c\7,\2\2\u031b\u031d\5*\26\2")
        buf.write("\u031c\u031b\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u0323\3")
        buf.write("\2\2\2\u031e\u031f\7\u0093\2\2\u031f\u0320\5*\26\2\u0320")
        buf.write("\u0321\7\u0087\2\2\u0321\u0322\5*\26\2\u0322\u0324\3\2")
        buf.write("\2\2\u0323\u031e\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0323")
        buf.write("\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u0329\3\2\2\2\u0327")
        buf.write("\u0328\7C\2\2\u0328\u032a\5*\26\2\u0329\u0327\3\2\2\2")
        buf.write("\u0329\u032a\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032c\7")
        buf.write("D\2\2\u032c\u032e\3\2\2\2\u032d\u02fb\3\2\2\2\u032d\u02fd")
        buf.write("\3\2\2\2\u032d\u0306\3\2\2\2\u032d\u0309\3\2\2\2\u032d")
        buf.write("\u030c\3\2\2\2\u032d\u0314\3\2\2\2\u032d\u031a\3\2\2\2")
        buf.write("\u032e\u0386\3\2\2\2\u032f\u0330\f\23\2\2\u0330\u0331")
        buf.write("\7\r\2\2\u0331\u0385\5*\26\24\u0332\u0333\f\22\2\2\u0333")
        buf.write("\u0334\t\7\2\2\u0334\u0385\5*\26\23\u0335\u0336\f\21\2")
        buf.write("\2\u0336\u0337\t\b\2\2\u0337\u0385\5*\26\22\u0338\u0339")
        buf.write("\f\20\2\2\u0339\u033a\t\t\2\2\u033a\u0385\5*\26\21\u033b")
        buf.write("\u033c\f\17\2\2\u033c\u033d\t\n\2\2\u033d\u0385\5*\26")
        buf.write("\20\u033e\u033f\f\16\2\2\u033f\u0340\t\13\2\2\u0340\u0385")
        buf.write("\5*\26\17\u0341\u0342\f\f\2\2\u0342\u0343\7\"\2\2\u0343")
        buf.write("\u0385\5*\26\r\u0344\u0345\f\13\2\2\u0345\u0346\7n\2\2")
        buf.write("\u0346\u0385\5*\26\f\u0347\u0348\f\6\2\2\u0348\u034a\7")
        buf.write("^\2\2\u0349\u034b\7h\2\2\u034a\u0349\3\2\2\2\u034a\u034b")
        buf.write("\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u0385\5*\26\7\u034d")
        buf.write("\u034f\f\5\2\2\u034e\u0350\7h\2\2\u034f\u034e\3\2\2\2")
        buf.write("\u034f\u0350\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0352\7")
        buf.write(")\2\2\u0352\u0353\5*\26\2\u0353\u0354\7\"\2\2\u0354\u0355")
        buf.write("\5*\26\6\u0355\u0385\3\2\2\2\u0356\u0358\f\r\2\2\u0357")
        buf.write("\u0359\7h\2\2\u0358\u0357\3\2\2\2\u0358\u0359\3\2\2\2")
        buf.write("\u0359\u035a\3\2\2\2\u035a\u036e\7U\2\2\u035b\u0365\7")
        buf.write("\5\2\2\u035c\u0366\5\36\20\2\u035d\u0362\5*\26\2\u035e")
        buf.write("\u035f\7\7\2\2\u035f\u0361\5*\26\2\u0360\u035e\3\2\2\2")
        buf.write("\u0361\u0364\3\2\2\2\u0362\u0360\3\2\2\2\u0362\u0363\3")
        buf.write("\2\2\2\u0363\u0366\3\2\2\2\u0364\u0362\3\2\2\2\u0365\u035c")
        buf.write("\3\2\2\2\u0365\u035d\3\2\2\2\u0365\u0366\3\2\2\2\u0366")
        buf.write("\u0367\3\2\2\2\u0367\u036f\7\6\2\2\u0368\u0369\5R*\2\u0369")
        buf.write("\u036a\7\4\2\2\u036a\u036c\3\2\2\2\u036b\u0368\3\2\2\2")
        buf.write("\u036b\u036c\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036f\5")
        buf.write("X-\2\u036e\u035b\3\2\2\2\u036e\u036b\3\2\2\2\u036f\u0385")
        buf.write("\3\2\2\2\u0370\u0371\f\t\2\2\u0371\u0372\7/\2\2\u0372")
        buf.write("\u0385\5\\/\2\u0373\u0375\f\b\2\2\u0374\u0376\7h\2\2\u0375")
        buf.write("\u0374\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0377\3\2\2\2")
        buf.write("\u0377\u0378\t\f\2\2\u0378\u037b\5*\26\2\u0379\u037a\7")
        buf.write("E\2\2\u037a\u037c\5*\26\2\u037b\u0379\3\2\2\2\u037b\u037c")
        buf.write("\3\2\2\2\u037c\u0385\3\2\2\2\u037d\u0382\f\7\2\2\u037e")
        buf.write("\u0383\7_\2\2\u037f\u0383\7i\2\2\u0380\u0381\7h\2\2\u0381")
        buf.write("\u0383\7j\2\2\u0382\u037e\3\2\2\2\u0382\u037f\3\2\2\2")
        buf.write("\u0382\u0380\3\2\2\2\u0383\u0385\3\2\2\2\u0384\u032f\3")
        buf.write("\2\2\2\u0384\u0332\3\2\2\2\u0384\u0335\3\2\2\2\u0384\u0338")
        buf.write("\3\2\2\2\u0384\u033b\3\2\2\2\u0384\u033e\3\2\2\2\u0384")
        buf.write("\u0341\3\2\2\2\u0384\u0344\3\2\2\2\u0384\u0347\3\2\2\2")
        buf.write("\u0384\u034d\3\2\2\2\u0384\u0356\3\2\2\2\u0384\u0370\3")
        buf.write("\2\2\2\u0384\u0373\3\2\2\2\u0384\u037d\3\2\2\2\u0385\u0388")
        buf.write("\3\2\2\2\u0386\u0384\3\2\2\2\u0386\u0387\3\2\2\2\u0387")
        buf.write("+\3\2\2\2\u0388\u0386\3\2\2\2\u0389\u038b\7\u0095\2\2")
        buf.write("\u038a\u038c\7v\2\2\u038b\u038a\3\2\2\2\u038b\u038c\3")
        buf.write("\2\2\2\u038c\u038d\3\2\2\2\u038d\u0392\5.\30\2\u038e\u038f")
        buf.write("\7\7\2\2\u038f\u0391\5.\30\2\u0390\u038e\3\2\2\2\u0391")
        buf.write("\u0394\3\2\2\2\u0392\u0390\3\2\2\2\u0392\u0393\3\2\2\2")
        buf.write("\u0393-\3\2\2\2\u0394\u0392\3\2\2\2\u0395\u03a1\5X-\2")
        buf.write("\u0396\u0397\7\5\2\2\u0397\u039c\5Z.\2\u0398\u0399\7\7")
        buf.write("\2\2\u0399\u039b\5Z.\2\u039a\u0398\3\2\2\2\u039b\u039e")
        buf.write("\3\2\2\2\u039c\u039a\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039f\3\2\2\2\u039e\u039c\3\2\2\2\u039f\u03a0\7\6\2\2")
        buf.write("\u03a0\u03a2\3\2\2\2\u03a1\u0396\3\2\2\2\u03a1\u03a2\3")
        buf.write("\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\7#\2\2\u03a4\u03a5")
        buf.write("\7\5\2\2\u03a5\u03a6\5\36\20\2\u03a6\u03a7\7\6\2\2\u03a7")
        buf.write("/\3\2\2\2\u03a8\u03ab\5*\26\2\u03a9\u03aa\7/\2\2\u03aa")
        buf.write("\u03ac\5\\/\2\u03ab\u03a9\3\2\2\2\u03ab\u03ac\3\2\2\2")
        buf.write("\u03ac\u03ae\3\2\2\2\u03ad\u03af\t\3\2\2\u03ae\u03ad\3")
        buf.write("\2\2\2\u03ae\u03af\3\2\2\2\u03af\61\3\2\2\2\u03b0\u03bd")
        buf.write("\7\t\2\2\u03b1\u03b2\5X-\2\u03b2\u03b3\7\4\2\2\u03b3\u03b4")
        buf.write("\7\t\2\2\u03b4\u03bd\3\2\2\2\u03b5\u03ba\5*\26\2\u03b6")
        buf.write("\u03b8\7#\2\2\u03b7\u03b6\3\2\2\2\u03b7\u03b8\3\2\2\2")
        buf.write("\u03b8\u03b9\3\2\2\2\u03b9\u03bb\5J&\2\u03ba\u03b7\3\2")
        buf.write("\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bd\3\2\2\2\u03bc\u03b0")
        buf.write("\3\2\2\2\u03bc\u03b1\3\2\2\2\u03bc\u03b5\3\2\2\2\u03bd")
        buf.write("\63\3\2\2\2\u03be\u03bf\5T+\2\u03bf\u03c0\7\4\2\2\u03c0")
        buf.write("\u03c2\3\2\2\2\u03c1\u03be\3\2\2\2\u03c1\u03c2\3\2\2\2")
        buf.write("\u03c2\u03c3\3\2\2\2\u03c3\u03c8\5X-\2\u03c4\u03c6\7#")
        buf.write("\2\2\u03c5\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c7")
        buf.write("\3\2\2\2\u03c7\u03c9\5`\61\2\u03c8\u03c5\3\2\2\2\u03c8")
        buf.write("\u03c9\3\2\2\2\u03c9\u03cf\3\2\2\2\u03ca\u03cb\7W\2\2")
        buf.write("\u03cb\u03cc\7*\2\2\u03cc\u03d0\5^\60\2\u03cd\u03ce\7")
        buf.write("h\2\2\u03ce\u03d0\7W\2\2\u03cf\u03ca\3\2\2\2\u03cf\u03cd")
        buf.write("\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u0401\3\2\2\2\u03d1")
        buf.write("\u03d2\5T+\2\u03d2\u03d3\7\4\2\2\u03d3\u03d5\3\2\2\2\u03d4")
        buf.write("\u03d1\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2")
        buf.write("\u03d6\u03d7\5V,\2\u03d7\u03e0\7\5\2\2\u03d8\u03dd\5*")
        buf.write("\26\2\u03d9\u03da\7\7\2\2\u03da\u03dc\5*\26\2\u03db\u03d9")
        buf.write("\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd")
        buf.write("\u03de\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2")
        buf.write("\u03e0\u03d8\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2\3")
        buf.write("\2\2\2\u03e2\u03e7\7\6\2\2\u03e3\u03e5\7#\2\2\u03e4\u03e3")
        buf.write("\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6")
        buf.write("\u03e8\5`\61\2\u03e7\u03e4\3\2\2\2\u03e7\u03e8\3\2\2\2")
        buf.write("\u03e8\u0401\3\2\2\2\u03e9\u03f3\7\5\2\2\u03ea\u03ef\5")
        buf.write("\64\33\2\u03eb\u03ec\7\7\2\2\u03ec\u03ee\5\64\33\2\u03ed")
        buf.write("\u03eb\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed\3\2\2\2")
        buf.write("\u03ef\u03f0\3\2\2\2\u03f0\u03f4\3\2\2\2\u03f1\u03ef\3")
        buf.write("\2\2\2\u03f2\u03f4\5\66\34\2\u03f3\u03ea\3\2\2\2\u03f3")
        buf.write("\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\7\6\2\2")
        buf.write("\u03f6\u0401\3\2\2\2\u03f7\u03f8\7\5\2\2\u03f8\u03f9\5")
        buf.write("\36\20\2\u03f9\u03fe\7\6\2\2\u03fa\u03fc\7#\2\2\u03fb")
        buf.write("\u03fa\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\3\2\2\2")
        buf.write("\u03fd\u03ff\5`\61\2\u03fe\u03fb\3\2\2\2\u03fe\u03ff\3")
        buf.write("\2\2\2\u03ff\u0401\3\2\2\2\u0400\u03c1\3\2\2\2\u0400\u03d4")
        buf.write("\3\2\2\2\u0400\u03e9\3\2\2\2\u0400\u03f7\3\2\2\2\u0401")
        buf.write("\65\3\2\2\2\u0402\u0409\5\64\33\2\u0403\u0404\58\35\2")
        buf.write("\u0404\u0405\5\64\33\2\u0405\u0406\5:\36\2\u0406\u0408")
        buf.write("\3\2\2\2\u0407\u0403\3\2\2\2\u0408\u040b\3\2\2\2\u0409")
        buf.write("\u0407\3\2\2\2\u0409\u040a\3\2\2\2\u040a\67\3\2\2\2\u040b")
        buf.write("\u0409\3\2\2\2\u040c\u041a\7\7\2\2\u040d\u040f\7f\2\2")
        buf.write("\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0416\3")
        buf.write("\2\2\2\u0410\u0412\7b\2\2\u0411\u0413\7p\2\2\u0412\u0411")
        buf.write("\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0417\3\2\2\2\u0414")
        buf.write("\u0417\7Y\2\2\u0415\u0417\7\65\2\2\u0416\u0410\3\2\2\2")
        buf.write("\u0416\u0414\3\2\2\2\u0416\u0415\3\2\2\2\u0416\u0417\3")
        buf.write("\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a\7`\2\2\u0419\u040c")
        buf.write("\3\2\2\2\u0419\u040e\3\2\2\2\u041a9\3\2\2\2\u041b\u041c")
        buf.write("\7m\2\2\u041c\u042a\5*\26\2\u041d\u041e\7\u008e\2\2\u041e")
        buf.write("\u041f\7\5\2\2\u041f\u0424\5Z.\2\u0420\u0421\7\7\2\2\u0421")
        buf.write("\u0423\5Z.\2\u0422\u0420\3\2\2\2\u0423\u0426\3\2\2\2\u0424")
        buf.write("\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0427\3\2\2\2")
        buf.write("\u0426\u0424\3\2\2\2\u0427\u0428\7\6\2\2\u0428\u042a\3")
        buf.write("\2\2\2\u0429\u041b\3\2\2\2\u0429\u041d\3\2\2\2\u0429\u042a")
        buf.write("\3\2\2\2\u042a;\3\2\2\2\u042b\u042d\7\u0082\2\2\u042c")
        buf.write("\u042e\t\6\2\2\u042d\u042c\3\2\2\2\u042d\u042e\3\2\2\2")
        buf.write("\u042e\u042f\3\2\2\2\u042f\u0434\5\62\32\2\u0430\u0431")
        buf.write("\7\7\2\2\u0431\u0433\5\62\32\2\u0432\u0430\3\2\2\2\u0433")
        buf.write("\u0436\3\2\2\2\u0434\u0432\3\2\2\2\u0434\u0435\3\2\2\2")
        buf.write("\u0435\u0443\3\2\2\2\u0436\u0434\3\2\2\2\u0437\u0441\7")
        buf.write("M\2\2\u0438\u043d\5\64\33\2\u0439\u043a\7\7\2\2\u043a")
        buf.write("\u043c\5\64\33\2\u043b\u0439\3\2\2\2\u043c\u043f\3\2\2")
        buf.write("\2\u043d\u043b\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0442")
        buf.write("\3\2\2\2\u043f\u043d\3\2\2\2\u0440\u0442\5\66\34\2\u0441")
        buf.write("\u0438\3\2\2\2\u0441\u0440\3\2\2\2\u0442\u0444\3\2\2\2")
        buf.write("\u0443\u0437\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0447\3")
        buf.write("\2\2\2\u0445\u0446\7\u0094\2\2\u0446\u0448\5*\26\2\u0447")
        buf.write("\u0445\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0457\3\2\2\2")
        buf.write("\u0449\u044a\7P\2\2\u044a\u044b\7*\2\2\u044b\u0450\5*")
        buf.write("\26\2\u044c\u044d\7\7\2\2\u044d\u044f\5*\26\2\u044e\u044c")
        buf.write("\3\2\2\2\u044f\u0452\3\2\2\2\u0450\u044e\3\2\2\2\u0450")
        buf.write("\u0451\3\2\2\2\u0451\u0455\3\2\2\2\u0452\u0450\3\2\2\2")
        buf.write("\u0453\u0454\7Q\2\2\u0454\u0456\5*\26\2\u0455\u0453\3")
        buf.write("\2\2\2\u0455\u0456\3\2\2\2\u0456\u0458\3\2\2\2\u0457\u0449")
        buf.write("\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u0476\3\2\2\2\u0459")
        buf.write("\u045a\7\u0090\2\2\u045a\u045b\7\5\2\2\u045b\u0460\5*")
        buf.write("\26\2\u045c\u045d\7\7\2\2\u045d\u045f\5*\26\2\u045e\u045c")
        buf.write("\3\2\2\2\u045f\u0462\3\2\2\2\u0460\u045e\3\2\2\2\u0460")
        buf.write("\u0461\3\2\2\2\u0461\u0463\3\2\2\2\u0462\u0460\3\2\2\2")
        buf.write("\u0463\u0472\7\6\2\2\u0464\u0465\7\7\2\2\u0465\u0466\7")
        buf.write("\5\2\2\u0466\u046b\5*\26\2\u0467\u0468\7\7\2\2\u0468\u046a")
        buf.write("\5*\26\2\u0469\u0467\3\2\2\2\u046a\u046d\3\2\2\2\u046b")
        buf.write("\u0469\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\3\2\2\2")
        buf.write("\u046d\u046b\3\2\2\2\u046e\u046f\7\6\2\2\u046f\u0471\3")
        buf.write("\2\2\2\u0470\u0464\3\2\2\2\u0471\u0474\3\2\2\2\u0472\u0470")
        buf.write("\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0476\3\2\2\2\u0474")
        buf.write("\u0472\3\2\2\2\u0475\u042b\3\2\2\2\u0475\u0459\3\2\2\2")
        buf.write("\u0476=\3\2\2\2\u0477\u0478\7m\2\2\u0478\u0479\7\62\2")
        buf.write("\2\u0479\u047b\t\r\2\2\u047a\u0477\3\2\2\2\u047a\u047b")
        buf.write("\3\2\2\2\u047b?\3\2\2\2\u047c\u0482\7\u008b\2\2\u047d")
        buf.write("\u047e\7\u008b\2\2\u047e\u0482\7\37\2\2\u047f\u0482\7")
        buf.write("\\\2\2\u0480\u0482\7F\2\2\u0481\u047c\3\2\2\2\u0481\u047d")
        buf.write("\3\2\2\2\u0481\u047f\3\2\2\2\u0481\u0480\3\2\2\2\u0482")
        buf.write("A\3\2\2\2\u0483\u0484\5b\62\2\u0484C\3\2\2\2\u0485\u0487")
        buf.write("\t\b\2\2\u0486\u0485\3\2\2\2\u0486\u0487\3\2\2\2\u0487")
        buf.write("\u0488\3\2\2\2\u0488\u0489\7\u0098\2\2\u0489E\3\2\2\2")
        buf.write("\u048a\u048b\t\16\2\2\u048bG\3\2\2\2\u048c\u048d\t\17")
        buf.write("\2\2\u048dI\3\2\2\2\u048e\u048f\t\20\2\2\u048fK\3\2\2")
        buf.write("\2\u0490\u0492\5Z.\2\u0491\u0493\5\24\13\2\u0492\u0491")
        buf.write("\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0497\3\2\2\2\u0494")
        buf.write("\u0496\5\16\b\2\u0495\u0494\3\2\2\2\u0496\u0499\3\2\2")
        buf.write("\2\u0497\u0495\3\2\2\2\u0497\u0498\3\2\2\2\u0498M\3\2")
        buf.write("\2\2\u0499\u0497\3\2\2\2\u049a\u049b\t\21\2\2\u049bO\3")
        buf.write("\2\2\2\u049c\u049d\5b\62\2\u049dQ\3\2\2\2\u049e\u049f")
        buf.write("\5b\62\2\u049fS\3\2\2\2\u04a0\u04a1\5b\62\2\u04a1U\3\2")
        buf.write("\2\2\u04a2\u04a3\5b\62\2\u04a3W\3\2\2\2\u04a4\u04a5\5")
        buf.write("b\62\2\u04a5Y\3\2\2\2\u04a6\u04a7\5b\62\2\u04a7[\3\2\2")
        buf.write("\2\u04a8\u04a9\5b\62\2\u04a9]\3\2\2\2\u04aa\u04ab\5b\62")
        buf.write("\2\u04ab_\3\2\2\2\u04ac\u04b3\7\u0097\2\2\u04ad\u04b3")
        buf.write("\7\u009a\2\2\u04ae\u04af\7\5\2\2\u04af\u04b0\5`\61\2\u04b0")
        buf.write("\u04b1\7\6\2\2\u04b1\u04b3\3\2\2\2\u04b2\u04ac\3\2\2\2")
        buf.write("\u04b2\u04ad\3\2\2\2\u04b2\u04ae\3\2\2\2\u04b3a\3\2\2")
        buf.write("\2\u04b4\u04bc\7\u0097\2\2\u04b5\u04bc\5N(\2\u04b6\u04bc")
        buf.write("\7\u009a\2\2\u04b7\u04b8\7\5\2\2\u04b8\u04b9\5b\62\2\u04b9")
        buf.write("\u04ba\7\6\2\2\u04ba\u04bc\3\2\2\2\u04bb\u04b4\3\2\2\2")
        buf.write("\u04bb\u04b5\3\2\2\2\u04bb\u04b6\3\2\2\2\u04bb\u04b7\3")
        buf.write("\2\2\2\u04bcc\3\2\2\2\u00b1gov{\u0081\u008e\u0095\u0099")
        buf.write("\u009b\u009f\u00a5\u00aa\u00b5\u00bb\u00bf\u00c5\u00ca")
        buf.write("\u00d3\u00da\u00e0\u00e4\u00e8\u00ed\u00f1\u00f4\u0106")
        buf.write("\u010b\u0115\u011a\u0126\u012a\u012e\u0132\u0139\u013b")
        buf.write("\u013f\u0144\u014c\u015f\u0165\u016a\u0176\u017b\u017e")
        buf.write("\u0181\u0186\u018a\u018f\u0198\u019b\u01a1\u01a3\u01a6")
        buf.write("\u01ae\u01b8\u01bb\u01c1\u01c3\u01c6\u01d0\u01d3\u01d9")
        buf.write("\u01db\u01de\u01e6\u01f0\u01f3\u01f9\u01fb\u01ff\u0206")
        buf.write("\u020f\u0213\u0215\u0219\u0222\u0227\u0229\u0232\u023d")
        buf.write("\u0244\u0247\u024a\u0257\u0265\u026a\u026d\u027a\u0288")
        buf.write("\u028d\u0296\u0299\u029f\u02a1\u02a4\u02b7\u02bd\u02c6")
        buf.write("\u02cb\u02d4\u02df\u02e6\u02ec\u02f1\u02f9\u0301\u0306")
        buf.write("\u0311\u0314\u031c\u0325\u0329\u032d\u034a\u034f\u0358")
        buf.write("\u0362\u0365\u036b\u036e\u0375\u037b\u0382\u0384\u0386")
        buf.write("\u038b\u0392\u039c\u03a1\u03ab\u03ae\u03b7\u03ba\u03bc")
        buf.write("\u03c1\u03c5\u03c8\u03cf\u03d4\u03dd\u03e0\u03e4\u03e7")
        buf.write("\u03ef\u03f3\u03fb\u03fe\u0400\u0409\u040e\u0412\u0416")
        buf.write("\u0419\u0424\u0429\u042d\u0434\u043d\u0441\u0443\u0447")
        buf.write("\u0450\u0455\u0457\u0460\u046b\u0472\u0475\u047a\u0481")
        buf.write("\u0486\u0492\u0497\u04b2\u04bb")
        return buf.getvalue()


class sqlParser ( Parser ):

    grammarFileName = "sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "K_ABORT", "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", 
                      "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", "K_ASC", 
                      "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
                      "K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", 
                      "K_CHECK", "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                      "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                      "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                      "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", 
                      "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH", 
                      "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", 
                      "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
                      "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", 
                      "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX", 
                      "K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", 
                      "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                      "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                      "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                      "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", "K_ORDER", 
                      "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", 
                      "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP", 
                      "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", 
                      "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
                      "K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                      "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION", 
                      "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", 
                      "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
                      "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ]

    RULE_root = 0
    RULE_query_statements_list = 1
    RULE_statement_node = 2
    RULE_reindex_stmt = 3
    RULE_create_index_stmt = 4
    RULE_create_table_stmt = 5
    RULE_column_constraint = 6
    RULE_foreign_key_clause = 7
    RULE_table_constraint = 8
    RULE_type_name = 9
    RULE_indexed_column = 10
    RULE_compound_select_stmt = 11
    RULE_factored_select_stmt = 12
    RULE_simple_select_stmt = 13
    RULE_select_stmt = 14
    RULE_select_or_values = 15
    RULE_update_stmt = 16
    RULE_update_stmt_limited = 17
    RULE_insert_stmt = 18
    RULE_qualified_table_name = 19
    RULE_expr = 20
    RULE_with_clause = 21
    RULE_common_table_expression = 22
    RULE_ordering_term = 23
    RULE_result_column = 24
    RULE_table_or_subquery = 25
    RULE_join_clause = 26
    RULE_join_operator = 27
    RULE_join_constraint = 28
    RULE_select_core = 29
    RULE_conflict_clause = 30
    RULE_compound_operator = 31
    RULE_foreign_table = 32
    RULE_signed_number = 33
    RULE_literal_value = 34
    RULE_unary_operator = 35
    RULE_column_alias = 36
    RULE_column_def = 37
    RULE_keyword = 38
    RULE_name = 39
    RULE_database_name = 40
    RULE_schema_name = 41
    RULE_table_function_name = 42
    RULE_table_name = 43
    RULE_column_name = 44
    RULE_collation_name = 45
    RULE_index_name = 46
    RULE_table_alias = 47
    RULE_any_name = 48

    ruleNames =  [ "root", "query_statements_list", "statement_node", "reindex_stmt", 
                   "create_index_stmt", "create_table_stmt", "column_constraint", 
                   "foreign_key_clause", "table_constraint", "type_name", 
                   "indexed_column", "compound_select_stmt", "factored_select_stmt", 
                   "simple_select_stmt", "select_stmt", "select_or_values", 
                   "update_stmt", "update_stmt_limited", "insert_stmt", 
                   "qualified_table_name", "expr", "with_clause", "common_table_expression", 
                   "ordering_term", "result_column", "table_or_subquery", 
                   "join_clause", "join_operator", "join_constraint", "select_core", 
                   "conflict_clause", "compound_operator", "foreign_table", 
                   "signed_number", "literal_value", "unary_operator", "column_alias", 
                   "column_def", "keyword", "name", "database_name", "schema_name", 
                   "table_function_name", "table_name", "column_name", "collation_name", 
                   "index_name", "table_alias", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ABORT=25
    K_ACTION=26
    K_ADD=27
    K_AFTER=28
    K_ALL=29
    K_ALTER=30
    K_ANALYZE=31
    K_AND=32
    K_AS=33
    K_ASC=34
    K_ATTACH=35
    K_AUTOINCREMENT=36
    K_BEFORE=37
    K_BEGIN=38
    K_BETWEEN=39
    K_BY=40
    K_CASCADE=41
    K_CASE=42
    K_CAST=43
    K_CHECK=44
    K_COLLATE=45
    K_COLUMN=46
    K_COMMIT=47
    K_CONFLICT=48
    K_CONSTRAINT=49
    K_CREATE=50
    K_CROSS=51
    K_CURRENT_DATE=52
    K_CURRENT_TIME=53
    K_CURRENT_TIMESTAMP=54
    K_DATABASE=55
    K_DEFAULT=56
    K_DEFERRABLE=57
    K_DEFERRED=58
    K_DELETE=59
    K_DESC=60
    K_DETACH=61
    K_DISTINCT=62
    K_DROP=63
    K_EACH=64
    K_ELSE=65
    K_END=66
    K_ESCAPE=67
    K_EXCEPT=68
    K_EXCLUSIVE=69
    K_EXISTS=70
    K_EXPLAIN=71
    K_FAIL=72
    K_FOR=73
    K_FOREIGN=74
    K_FROM=75
    K_FULL=76
    K_GLOB=77
    K_GROUP=78
    K_HAVING=79
    K_IF=80
    K_IGNORE=81
    K_IMMEDIATE=82
    K_IN=83
    K_INDEX=84
    K_INDEXED=85
    K_INITIALLY=86
    K_INNER=87
    K_INSERT=88
    K_INSTEAD=89
    K_INTERSECT=90
    K_INTO=91
    K_IS=92
    K_ISNULL=93
    K_JOIN=94
    K_KEY=95
    K_LEFT=96
    K_LIKE=97
    K_LIMIT=98
    K_MATCH=99
    K_NATURAL=100
    K_NO=101
    K_NOT=102
    K_NOTNULL=103
    K_NULL=104
    K_OF=105
    K_OFFSET=106
    K_ON=107
    K_OR=108
    K_ORDER=109
    K_OUTER=110
    K_PLAN=111
    K_PRAGMA=112
    K_PRIMARY=113
    K_QUERY=114
    K_RAISE=115
    K_RECURSIVE=116
    K_REFERENCES=117
    K_REGEXP=118
    K_REINDEX=119
    K_RELEASE=120
    K_RENAME=121
    K_REPLACE=122
    K_RESTRICT=123
    K_RIGHT=124
    K_ROLLBACK=125
    K_ROW=126
    K_SAVEPOINT=127
    K_SELECT=128
    K_SET=129
    K_TABLE=130
    K_TEMP=131
    K_TEMPORARY=132
    K_THEN=133
    K_TO=134
    K_TRANSACTION=135
    K_TRIGGER=136
    K_UNION=137
    K_UNIQUE=138
    K_UPDATE=139
    K_USING=140
    K_VACUUM=141
    K_VALUES=142
    K_VIEW=143
    K_VIRTUAL=144
    K_WHEN=145
    K_WHERE=146
    K_WITH=147
    K_WITHOUT=148
    IDENTIFIER=149
    NUMERIC_LITERAL=150
    BIND_PARAMETER=151
    STRING_LITERAL=152
    BLOB_LITERAL=153
    SINGLE_LINE_COMMENT=154
    MULTILINE_COMMENT=155
    SPACES=156
    UNEXPECTED_CHAR=157

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._query_statements_list = None # Query_statements_listContext
            self.queries = list() # of Query_statements_listContexts

        def EOF(self):
            return self.getToken(sqlParser.EOF, 0)

        def query_statements_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Query_statements_listContext)
            else:
                return self.getTypedRuleContext(sqlParser.Query_statements_listContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = sqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.SCOL or _la==sqlParser.K_CREATE or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (sqlParser.K_INSERT - 88)) | (1 << (sqlParser.K_REINDEX - 88)) | (1 << (sqlParser.K_REPLACE - 88)) | (1 << (sqlParser.K_SELECT - 88)) | (1 << (sqlParser.K_UPDATE - 88)) | (1 << (sqlParser.K_VALUES - 88)) | (1 << (sqlParser.K_WITH - 88)))) != 0):
                self.state = 98
                localctx._query_statements_list = self.query_statements_list()
                localctx.queries.append(localctx._query_statements_list)
                self.state = 103
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 104
            self.match(sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_statements_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._statement_node = None # Statement_nodeContext
            self.query_statements = list() # of Statement_nodeContexts

        def statement_node(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Statement_nodeContext)
            else:
                return self.getTypedRuleContext(sqlParser.Statement_nodeContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.SCOL)
            else:
                return self.getToken(sqlParser.SCOL, i)

        def getRuleIndex(self):
            return sqlParser.RULE_query_statements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_statements_list" ):
                listener.enterQuery_statements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_statements_list" ):
                listener.exitQuery_statements_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_statements_list" ):
                return visitor.visitQuery_statements_list(self)
            else:
                return visitor.visitChildren(self)




    def query_statements_list(self):

        localctx = sqlParser.Query_statements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query_statements_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.SCOL:
                self.state = 106
                self.match(sqlParser.SCOL)
                self.state = 111
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 112
            localctx._statement_node = self.statement_node()
            localctx.query_statements.append(localctx._statement_node)
            self.state = 121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 114 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 113
                        self.match(sqlParser.SCOL)
                        self.state = 116 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==sqlParser.SCOL):
                            break

                    self.state = 118
                    localctx._statement_node = self.statement_node()
                    localctx.query_statements.append(localctx._statement_node) 
                self.state = 123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 127
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 124
                    self.match(sqlParser.SCOL) 
                self.state = 129
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nodeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Compound_select_stmtContext,0)


        def factored_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Factored_select_stmtContext,0)


        def simple_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Simple_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_table_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(sqlParser.Reindex_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(sqlParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(sqlParser.Update_stmt_limitedContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(sqlParser.Insert_stmtContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_statement_node

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_node" ):
                listener.enterStatement_node(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_node" ):
                listener.exitStatement_node(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_node" ):
                return visitor.visitStatement_node(self)
            else:
                return visitor.visitChildren(self)




    def statement_node(self):

        localctx = sqlParser.Statement_nodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement_node)
        try:
            self.state = 140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 130
                self.compound_select_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 131
                self.factored_select_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 132
                self.simple_select_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 133
                self.select_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 134
                self.create_index_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 135
                self.create_table_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 136
                self.reindex_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 137
                self.update_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 138
                self.update_stmt_limited()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 139
                self.insert_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(sqlParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReindex_stmt" ):
                return visitor.visitReindex_stmt(self)
            else:
                return visitor.visitChildren(self)




    def reindex_stmt(self):

        localctx = sqlParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self.match(sqlParser.K_REINDEX)
            self.state = 153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 143
                self.collation_name()

            elif la_ == 2:
                self.state = 147
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 144
                    self.database_name()
                    self.state = 145
                    self.match(sqlParser.DOT)


                self.state = 151
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 149
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 150
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_stmt" ):
                return visitor.visitCreate_index_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_index_stmt(self):

        localctx = sqlParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 155
            self.match(sqlParser.K_CREATE)
            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_UNIQUE:
                self.state = 156
                self.match(sqlParser.K_UNIQUE)


            self.state = 159
            self.match(sqlParser.K_INDEX)
            self.state = 163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 160
                self.match(sqlParser.K_IF)
                self.state = 161
                self.match(sqlParser.K_NOT)
                self.state = 162
                self.match(sqlParser.K_EXISTS)


            self.state = 168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 165
                self.database_name()
                self.state = 166
                self.match(sqlParser.DOT)


            self.state = 170
            self.index_name()
            self.state = 171
            self.match(sqlParser.K_ON)
            self.state = 172
            self.table_name()
            self.state = 173
            self.match(sqlParser.OPEN_PAR)
            self.state = 174
            self.indexed_column()
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 175
                self.match(sqlParser.COMMA)
                self.state = 176
                self.indexed_column()
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 182
            self.match(sqlParser.CLOSE_PAR)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 183
                self.match(sqlParser.K_WHERE)
                self.state = 184
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_defContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def K_TEMP(self):
            return self.getToken(sqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(sqlParser.K_TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_constraintContext,i)


        def K_WITHOUT(self):
            return self.getToken(sqlParser.K_WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_stmt" ):
                return visitor.visitCreate_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_table_stmt(self):

        localctx = sqlParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.match(sqlParser.K_CREATE)
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_TEMP or _la==sqlParser.K_TEMPORARY:
                self.state = 188
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_TEMP or _la==sqlParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 191
            self.match(sqlParser.K_TABLE)
            self.state = 195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 192
                self.match(sqlParser.K_IF)
                self.state = 193
                self.match(sqlParser.K_NOT)
                self.state = 194
                self.match(sqlParser.K_EXISTS)


            self.state = 200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 197
                self.database_name()
                self.state = 198
                self.match(sqlParser.DOT)


            self.state = 202
            self.table_name()
            self.state = 226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.OPEN_PAR]:
                self.state = 203
                self.match(sqlParser.OPEN_PAR)
                self.state = 204
                self.column_def()
                self.state = 209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 205
                        self.match(sqlParser.COMMA)
                        self.state = 206
                        self.column_def() 
                    self.state = 211
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 212
                    self.match(sqlParser.COMMA)
                    self.state = 213
                    self.table_constraint()
                    self.state = 218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 219
                self.match(sqlParser.CLOSE_PAR)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WITHOUT:
                    self.state = 220
                    self.match(sqlParser.K_WITHOUT)
                    self.state = 221
                    self.match(sqlParser.IDENTIFIER)


                pass
            elif token in [sqlParser.K_AS]:
                self.state = 224
                self.match(sqlParser.K_AS)
                self.state = 225
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(sqlParser.Conflict_clauseContext,0)


        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(sqlParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def signed_number(self):
            return self.getTypedRuleContext(sqlParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(sqlParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = sqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_CONSTRAINT:
                self.state = 228
                self.match(sqlParser.K_CONSTRAINT)
                self.state = 229
                self.name()


            self.state = 265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_PRIMARY]:
                self.state = 232
                self.match(sqlParser.K_PRIMARY)
                self.state = 233
                self.match(sqlParser.K_KEY)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                    self.state = 234
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 237
                self.conflict_clause()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AUTOINCREMENT:
                    self.state = 238
                    self.match(sqlParser.K_AUTOINCREMENT)


                pass
            elif token in [sqlParser.K_NOT, sqlParser.K_NULL]:
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NOT:
                    self.state = 241
                    self.match(sqlParser.K_NOT)


                self.state = 244
                self.match(sqlParser.K_NULL)
                self.state = 245
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_UNIQUE]:
                self.state = 246
                self.match(sqlParser.K_UNIQUE)
                self.state = 247
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_CHECK]:
                self.state = 248
                self.match(sqlParser.K_CHECK)
                self.state = 249
                self.match(sqlParser.OPEN_PAR)
                self.state = 250
                self.expr(0)
                self.state = 251
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_DEFAULT]:
                self.state = 253
                self.match(sqlParser.K_DEFAULT)
                self.state = 260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 254
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 255
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 256
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 257
                    self.expr(0)
                    self.state = 258
                    self.match(sqlParser.CLOSE_PAR)
                    pass


                pass
            elif token in [sqlParser.K_COLLATE]:
                self.state = 262
                self.match(sqlParser.K_COLLATE)
                self.state = 263
                self.collation_name()
                pass
            elif token in [sqlParser.K_REFERENCES]:
                self.state = 264
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(sqlParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_DEFERRABLE(self):
            return self.getToken(sqlParser.K_DEFERRABLE, 0)

        def K_ON(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ON)
            else:
                return self.getToken(sqlParser.K_ON, i)

        def K_MATCH(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_MATCH)
            else:
                return self.getToken(sqlParser.K_MATCH, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.NameContext)
            else:
                return self.getTypedRuleContext(sqlParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_DELETE)
            else:
                return self.getToken(sqlParser.K_DELETE, i)

        def K_UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_UPDATE)
            else:
                return self.getToken(sqlParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(sqlParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(sqlParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(sqlParser.K_IMMEDIATE, 0)

        def K_SET(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_SET)
            else:
                return self.getToken(sqlParser.K_SET, i)

        def K_NULL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_NULL)
            else:
                return self.getToken(sqlParser.K_NULL, i)

        def K_DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_DEFAULT)
            else:
                return self.getToken(sqlParser.K_DEFAULT, i)

        def K_CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_CASCADE)
            else:
                return self.getToken(sqlParser.K_CASCADE, i)

        def K_RESTRICT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_RESTRICT)
            else:
                return self.getToken(sqlParser.K_RESTRICT, i)

        def K_NO(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_NO)
            else:
                return self.getToken(sqlParser.K_NO, i)

        def K_ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ACTION)
            else:
                return self.getToken(sqlParser.K_ACTION, i)

        def getRuleIndex(self):
            return sqlParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_key_clause" ):
                return visitor.visitForeign_key_clause(self)
            else:
                return visitor.visitChildren(self)




    def foreign_key_clause(self):

        localctx = sqlParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(sqlParser.K_REFERENCES)
            self.state = 268
            self.foreign_table()
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 269
                self.match(sqlParser.OPEN_PAR)
                self.state = 270
                self.column_name()
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 271
                    self.match(sqlParser.COMMA)
                    self.state = 272
                    self.column_name()
                    self.state = 277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 278
                self.match(sqlParser.CLOSE_PAR)


            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_MATCH or _la==sqlParser.K_ON:
                self.state = 296
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_ON]:
                    self.state = 282
                    self.match(sqlParser.K_ON)
                    self.state = 283
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_DELETE or _la==sqlParser.K_UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 292
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        self.state = 284
                        self.match(sqlParser.K_SET)
                        self.state = 285
                        self.match(sqlParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 286
                        self.match(sqlParser.K_SET)
                        self.state = 287
                        self.match(sqlParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 288
                        self.match(sqlParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 289
                        self.match(sqlParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 290
                        self.match(sqlParser.K_NO)
                        self.state = 291
                        self.match(sqlParser.K_ACTION)
                        pass


                    pass
                elif token in [sqlParser.K_MATCH]:
                    self.state = 294
                    self.match(sqlParser.K_MATCH)
                    self.state = 295
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NOT:
                    self.state = 303
                    self.match(sqlParser.K_NOT)


                self.state = 306
                self.match(sqlParser.K_DEFERRABLE)
                self.state = 311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 307
                    self.match(sqlParser.K_INITIALLY)
                    self.state = 308
                    self.match(sqlParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 309
                    self.match(sqlParser.K_INITIALLY)
                    self.state = 310
                    self.match(sqlParser.K_IMMEDIATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(sqlParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(sqlParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = sqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_CONSTRAINT:
                self.state = 315
                self.match(sqlParser.K_CONSTRAINT)
                self.state = 316
                self.name()


            self.state = 355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_PRIMARY, sqlParser.K_UNIQUE]:
                self.state = 322
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_PRIMARY]:
                    self.state = 319
                    self.match(sqlParser.K_PRIMARY)
                    self.state = 320
                    self.match(sqlParser.K_KEY)
                    pass
                elif token in [sqlParser.K_UNIQUE]:
                    self.state = 321
                    self.match(sqlParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 324
                self.match(sqlParser.OPEN_PAR)
                self.state = 325
                self.indexed_column()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 326
                    self.match(sqlParser.COMMA)
                    self.state = 327
                    self.indexed_column()
                    self.state = 332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 333
                self.match(sqlParser.CLOSE_PAR)
                self.state = 334
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_CHECK]:
                self.state = 336
                self.match(sqlParser.K_CHECK)
                self.state = 337
                self.match(sqlParser.OPEN_PAR)
                self.state = 338
                self.expr(0)
                self.state = 339
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_FOREIGN]:
                self.state = 341
                self.match(sqlParser.K_FOREIGN)
                self.state = 342
                self.match(sqlParser.K_KEY)
                self.state = 343
                self.match(sqlParser.OPEN_PAR)
                self.state = 344
                self.column_name()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 345
                    self.match(sqlParser.COMMA)
                    self.state = 346
                    self.column_name()
                    self.state = 351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 352
                self.match(sqlParser.CLOSE_PAR)
                self.state = 353
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.NameContext)
            else:
                return self.getTypedRuleContext(sqlParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(sqlParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(sqlParser.COMMA, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = sqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 357
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 360 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 362
                self.match(sqlParser.OPEN_PAR)
                self.state = 363
                self.signed_number()
                self.state = 364
                self.match(sqlParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 366
                self.match(sqlParser.OPEN_PAR)
                self.state = 367
                self.signed_number()
                self.state = 368
                self.match(sqlParser.COMMA)
                self.state = 369
                self.signed_number()
                self.state = 370
                self.match(sqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexed_column" ):
                return visitor.visitIndexed_column(self)
            else:
                return visitor.visitChildren(self)




    def indexed_column(self):

        localctx = sqlParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.column_name()
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_COLLATE:
                self.state = 375
                self.match(sqlParser.K_COLLATE)
                self.state = 376
                self.collation_name()


            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 379
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_UNION(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_UNION)
            else:
                return self.getToken(sqlParser.K_UNION, i)

        def K_INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_INTERSECT)
            else:
                return self.getToken(sqlParser.K_INTERSECT, i)

        def K_EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_EXCEPT)
            else:
                return self.getToken(sqlParser.K_EXCEPT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def K_ALL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ALL)
            else:
                return self.getToken(sqlParser.K_ALL, i)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_select_stmt" ):
                return visitor.visitCompound_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_select_stmt(self):

        localctx = sqlParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 382
                self.with_clause()


            self.state = 385
            self.select_core()
            self.state = 395 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 392
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_UNION]:
                    self.state = 386
                    self.match(sqlParser.K_UNION)
                    self.state = 388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_ALL:
                        self.state = 387
                        self.match(sqlParser.K_ALL)


                    pass
                elif token in [sqlParser.K_INTERSECT]:
                    self.state = 390
                    self.match(sqlParser.K_INTERSECT)
                    pass
                elif token in [sqlParser.K_EXCEPT]:
                    self.state = 391
                    self.match(sqlParser.K_EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 394
                self.select_core()
                self.state = 397 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION):
                    break

            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 399
                self.match(sqlParser.K_ORDER)
                self.state = 400
                self.match(sqlParser.K_BY)
                self.state = 401
                self.ordering_term()
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 402
                    self.match(sqlParser.COMMA)
                    self.state = 403
                    self.ordering_term()
                    self.state = 408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 411
                self.match(sqlParser.K_LIMIT)
                self.state = 412
                self.expr(0)
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 413
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 414
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._select_core = None # Select_coreContext
            self.select_parts = list() # of Select_coreContexts
            self._compound_operator = None # Compound_operatorContext
            self.operators = list() # of Compound_operatorContexts

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactored_select_stmt" ):
                return visitor.visitFactored_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def factored_select_stmt(self):

        localctx = sqlParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_factored_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 419
                self.with_clause()


            self.state = 422
            localctx._select_core = self.select_core()
            localctx.select_parts.append(localctx._select_core)
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION:
                self.state = 423
                localctx._compound_operator = self.compound_operator()
                localctx.operators.append(localctx._compound_operator)
                self.state = 424
                localctx._select_core = self.select_core()
                localctx.select_parts.append(localctx._select_core)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 431
                self.match(sqlParser.K_ORDER)
                self.state = 432
                self.match(sqlParser.K_BY)
                self.state = 433
                self.ordering_term()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 434
                    self.match(sqlParser.COMMA)
                    self.state = 435
                    self.ordering_term()
                    self.state = 440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 443
                self.match(sqlParser.K_LIMIT)
                self.state = 444
                self.expr(0)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 445
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 446
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(sqlParser.Select_coreContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_select_stmt" ):
                return visitor.visitSimple_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_select_stmt(self):

        localctx = sqlParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 451
                self.with_clause()


            self.state = 454
            self.select_core()
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 455
                self.match(sqlParser.K_ORDER)
                self.state = 456
                self.match(sqlParser.K_BY)
                self.state = 457
                self.ordering_term()
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 458
                    self.match(sqlParser.COMMA)
                    self.state = 459
                    self.ordering_term()
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 467
                self.match(sqlParser.K_LIMIT)
                self.state = 468
                self.expr(0)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 469
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 470
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_or_valuesContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_stmt" ):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def select_stmt(self):

        localctx = sqlParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 475
                self.with_clause()


            self.state = 478
            self.select_or_values()
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION:
                self.state = 479
                self.compound_operator()
                self.state = 480
                self.select_or_values()
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 487
                self.match(sqlParser.K_ORDER)
                self.state = 488
                self.match(sqlParser.K_BY)
                self.state = 489
                self.ordering_term()
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 490
                    self.match(sqlParser.COMMA)
                    self.state = 491
                    self.ordering_term()
                    self.state = 496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 499
                self.match(sqlParser.K_LIMIT)
                self.state = 500
                self.expr(0)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 501
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 502
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return sqlParser.RULE_select_or_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_values" ):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_values" ):
                listener.exitSelect_or_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_or_values" ):
                return visitor.visitSelect_or_values(self)
            else:
                return visitor.visitChildren(self)




    def select_or_values(self):

        localctx = sqlParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.match(sqlParser.K_SELECT)
                self.state = 509
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 508
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 511
                self.result_column()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 512
                    self.match(sqlParser.COMMA)
                    self.state = 513
                    self.result_column()
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_FROM:
                    self.state = 519
                    self.match(sqlParser.K_FROM)
                    self.state = 529
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        self.state = 520
                        self.table_or_subquery()
                        self.state = 525
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==sqlParser.COMMA:
                            self.state = 521
                            self.match(sqlParser.COMMA)
                            self.state = 522
                            self.table_or_subquery()
                            self.state = 527
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 528
                        self.join_clause()
                        pass




                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WHERE:
                    self.state = 533
                    self.match(sqlParser.K_WHERE)
                    self.state = 534
                    self.expr(0)


                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_GROUP:
                    self.state = 537
                    self.match(sqlParser.K_GROUP)
                    self.state = 538
                    self.match(sqlParser.K_BY)
                    self.state = 539
                    self.expr(0)
                    self.state = 544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 540
                        self.match(sqlParser.COMMA)
                        self.state = 541
                        self.expr(0)
                        self.state = 546
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_HAVING:
                        self.state = 547
                        self.match(sqlParser.K_HAVING)
                        self.state = 548
                        self.expr(0)




                pass
            elif token in [sqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 553
                self.match(sqlParser.K_VALUES)
                self.state = 554
                self.match(sqlParser.OPEN_PAR)
                self.state = 555
                self.expr(0)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 556
                    self.match(sqlParser.COMMA)
                    self.state = 557
                    self.expr(0)
                    self.state = 562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 563
                self.match(sqlParser.CLOSE_PAR)
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 564
                    self.match(sqlParser.COMMA)
                    self.state = 565
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 566
                    self.expr(0)
                    self.state = 571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 567
                        self.match(sqlParser.COMMA)
                        self.state = 568
                        self.expr(0)
                        self.state = 573
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 574
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = sqlParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 583
                self.with_clause()


            self.state = 586
            self.match(sqlParser.K_UPDATE)
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 587
                self.match(sqlParser.K_OR)
                self.state = 588
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 589
                self.match(sqlParser.K_OR)
                self.state = 590
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 591
                self.match(sqlParser.K_OR)
                self.state = 592
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 593
                self.match(sqlParser.K_OR)
                self.state = 594
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 595
                self.match(sqlParser.K_OR)
                self.state = 596
                self.match(sqlParser.K_IGNORE)


            self.state = 599
            self.qualified_table_name()
            self.state = 600
            self.match(sqlParser.K_SET)
            self.state = 601
            self.column_name()
            self.state = 602
            self.match(sqlParser.ASSIGN)
            self.state = 603
            self.expr(0)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 604
                self.match(sqlParser.COMMA)
                self.state = 605
                self.column_name()
                self.state = 606
                self.match(sqlParser.ASSIGN)
                self.state = 607
                self.expr(0)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 614
                self.match(sqlParser.K_WHERE)
                self.state = 615
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt_limited" ):
                return visitor.visitUpdate_stmt_limited(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt_limited(self):

        localctx = sqlParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 618
                self.with_clause()


            self.state = 621
            self.match(sqlParser.K_UPDATE)
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 622
                self.match(sqlParser.K_OR)
                self.state = 623
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 624
                self.match(sqlParser.K_OR)
                self.state = 625
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 626
                self.match(sqlParser.K_OR)
                self.state = 627
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 628
                self.match(sqlParser.K_OR)
                self.state = 629
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 630
                self.match(sqlParser.K_OR)
                self.state = 631
                self.match(sqlParser.K_IGNORE)


            self.state = 634
            self.qualified_table_name()
            self.state = 635
            self.match(sqlParser.K_SET)
            self.state = 636
            self.column_name()
            self.state = 637
            self.match(sqlParser.ASSIGN)
            self.state = 638
            self.expr(0)
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 639
                self.match(sqlParser.COMMA)
                self.state = 640
                self.column_name()
                self.state = 641
                self.match(sqlParser.ASSIGN)
                self.state = 642
                self.expr(0)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 649
                self.match(sqlParser.K_WHERE)
                self.state = 650
                self.expr(0)


            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT or _la==sqlParser.K_ORDER:
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ORDER:
                    self.state = 653
                    self.match(sqlParser.K_ORDER)
                    self.state = 654
                    self.match(sqlParser.K_BY)
                    self.state = 655
                    self.ordering_term()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 656
                        self.match(sqlParser.COMMA)
                        self.state = 657
                        self.ordering_term()
                        self.state = 662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 665
                self.match(sqlParser.K_LIMIT)
                self.state = 666
                self.expr(0)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 667
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 668
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = sqlParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 673
                self.with_clause()


            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 676
                self.match(sqlParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 677
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 678
                self.match(sqlParser.K_INSERT)
                self.state = 679
                self.match(sqlParser.K_OR)
                self.state = 680
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 681
                self.match(sqlParser.K_INSERT)
                self.state = 682
                self.match(sqlParser.K_OR)
                self.state = 683
                self.match(sqlParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 684
                self.match(sqlParser.K_INSERT)
                self.state = 685
                self.match(sqlParser.K_OR)
                self.state = 686
                self.match(sqlParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 687
                self.match(sqlParser.K_INSERT)
                self.state = 688
                self.match(sqlParser.K_OR)
                self.state = 689
                self.match(sqlParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 690
                self.match(sqlParser.K_INSERT)
                self.state = 691
                self.match(sqlParser.K_OR)
                self.state = 692
                self.match(sqlParser.K_IGNORE)
                pass


            self.state = 695
            self.match(sqlParser.K_INTO)
            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 696
                self.database_name()
                self.state = 697
                self.match(sqlParser.DOT)


            self.state = 701
            self.table_name()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 702
                self.match(sqlParser.OPEN_PAR)
                self.state = 703
                self.column_name()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 704
                    self.match(sqlParser.COMMA)
                    self.state = 705
                    self.column_name()
                    self.state = 710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 711
                self.match(sqlParser.CLOSE_PAR)


            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 715
                self.match(sqlParser.K_VALUES)
                self.state = 716
                self.match(sqlParser.OPEN_PAR)
                self.state = 717
                self.expr(0)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 718
                    self.match(sqlParser.COMMA)
                    self.state = 719
                    self.expr(0)
                    self.state = 724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 725
                self.match(sqlParser.CLOSE_PAR)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 726
                    self.match(sqlParser.COMMA)
                    self.state = 727
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 728
                    self.expr(0)
                    self.state = 733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 729
                        self.match(sqlParser.COMMA)
                        self.state = 730
                        self.expr(0)
                        self.state = 735
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 736
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 743
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 744
                self.match(sqlParser.K_DEFAULT)
                self.state = 745
                self.match(sqlParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_table_name" ):
                return visitor.visitQualified_table_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_table_name(self):

        localctx = sqlParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 748
                self.database_name()
                self.state = 749
                self.match(sqlParser.DOT)


            self.state = 753
            self.table_name()
            self.state = 759
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_INDEXED]:
                self.state = 754
                self.match(sqlParser.K_INDEXED)
                self.state = 755
                self.match(sqlParser.K_BY)
                self.state = 756
                self.index_name()
                pass
            elif token in [sqlParser.K_NOT]:
                self.state = 757
                self.match(sqlParser.K_NOT)
                self.state = 758
                self.match(sqlParser.K_INDEXED)
                pass
            elif token in [sqlParser.K_SET]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(sqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.DOT)
            else:
                return self.getToken(sqlParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(sqlParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_WHEN)
            else:
                return self.getToken(sqlParser.K_WHEN, i)

        def K_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_THEN)
            else:
                return self.getToken(sqlParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def PIPE2(self):
            return self.getToken(sqlParser.PIPE2, 0)

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def DIV(self):
            return self.getToken(sqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(sqlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def LT2(self):
            return self.getToken(sqlParser.LT2, 0)

        def GT2(self):
            return self.getToken(sqlParser.GT2, 0)

        def AMP(self):
            return self.getToken(sqlParser.AMP, 0)

        def PIPE(self):
            return self.getToken(sqlParser.PIPE, 0)

        def LT(self):
            return self.getToken(sqlParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(sqlParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(sqlParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(sqlParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(sqlParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(sqlParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(sqlParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(sqlParser.NOT_EQ2, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sqlParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 762
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 763
                self.match(sqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 767
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 764
                        self.database_name()
                        self.state = 765
                        self.match(sqlParser.DOT)


                    self.state = 769
                    self.table_name()
                    self.state = 770
                    self.match(sqlParser.DOT)


                self.state = 774
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 775
                self.unary_operator()
                self.state = 776
                self.expr(18)
                pass

            elif la_ == 5:
                self.state = 778
                self.match(sqlParser.OPEN_PAR)
                self.state = 779
                self.expr(0)
                self.state = 780
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_EXISTS or _la==sqlParser.K_NOT:
                    self.state = 783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_NOT:
                        self.state = 782
                        self.match(sqlParser.K_NOT)


                    self.state = 785
                    self.match(sqlParser.K_EXISTS)


                self.state = 788
                self.match(sqlParser.OPEN_PAR)
                self.state = 789
                self.select_stmt()
                self.state = 790
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 792
                self.match(sqlParser.K_CASE)
                self.state = 794
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 793
                    self.expr(0)


                self.state = 801 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 796
                    self.match(sqlParser.K_WHEN)
                    self.state = 797
                    self.expr(0)
                    self.state = 798
                    self.match(sqlParser.K_THEN)
                    self.state = 799
                    self.expr(0)
                    self.state = 803 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==sqlParser.K_WHEN):
                        break

                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ELSE:
                    self.state = 805
                    self.match(sqlParser.K_ELSE)
                    self.state = 806
                    self.expr(0)


                self.state = 809
                self.match(sqlParser.K_END)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 900
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 898
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                    if la_ == 1:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 813
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 814
                        self.match(sqlParser.PIPE2)
                        self.state = 815
                        self.expr(18)
                        pass

                    elif la_ == 2:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 816
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 817
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.STAR) | (1 << sqlParser.DIV) | (1 << sqlParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 818
                        self.expr(17)
                        pass

                    elif la_ == 3:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 819
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 820
                        _la = self._input.LA(1)
                        if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 821
                        self.expr(16)
                        pass

                    elif la_ == 4:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 822
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 823
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT2) | (1 << sqlParser.GT2) | (1 << sqlParser.AMP) | (1 << sqlParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 824
                        self.expr(15)
                        pass

                    elif la_ == 5:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 825
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 826
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT) | (1 << sqlParser.LT_EQ) | (1 << sqlParser.GT) | (1 << sqlParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 827
                        self.expr(14)
                        pass

                    elif la_ == 6:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 828
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 829
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.ASSIGN) | (1 << sqlParser.EQ) | (1 << sqlParser.NOT_EQ1) | (1 << sqlParser.NOT_EQ2))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 830
                        self.expr(13)
                        pass

                    elif la_ == 7:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 831
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 832
                        self.match(sqlParser.K_AND)
                        self.state = 833
                        self.expr(11)
                        pass

                    elif la_ == 8:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 834
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 835
                        self.match(sqlParser.K_OR)
                        self.state = 836
                        self.expr(10)
                        pass

                    elif la_ == 9:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 837
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 838
                        self.match(sqlParser.K_IS)
                        self.state = 840
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                        if la_ == 1:
                            self.state = 839
                            self.match(sqlParser.K_NOT)


                        self.state = 842
                        self.expr(5)
                        pass

                    elif la_ == 10:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 843
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 845
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 844
                            self.match(sqlParser.K_NOT)


                        self.state = 847
                        self.match(sqlParser.K_BETWEEN)
                        self.state = 848
                        self.expr(0)
                        self.state = 849
                        self.match(sqlParser.K_AND)
                        self.state = 850
                        self.expr(4)
                        pass

                    elif la_ == 11:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 852
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 854
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 853
                            self.match(sqlParser.K_NOT)


                        self.state = 856
                        self.match(sqlParser.K_IN)
                        self.state = 876
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                        if la_ == 1:
                            self.state = 857
                            self.match(sqlParser.OPEN_PAR)
                            self.state = 867
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                            if la_ == 1:
                                self.state = 858
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 859
                                self.expr(0)
                                self.state = 864
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==sqlParser.COMMA:
                                    self.state = 860
                                    self.match(sqlParser.COMMA)
                                    self.state = 861
                                    self.expr(0)
                                    self.state = 866
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 869
                            self.match(sqlParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 873
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                            if la_ == 1:
                                self.state = 870
                                self.database_name()
                                self.state = 871
                                self.match(sqlParser.DOT)


                            self.state = 875
                            self.table_name()
                            pass


                        pass

                    elif la_ == 12:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 878
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 879
                        self.match(sqlParser.K_COLLATE)
                        self.state = 880
                        self.collation_name()
                        pass

                    elif la_ == 13:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 881
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 883
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 882
                            self.match(sqlParser.K_NOT)


                        self.state = 885
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (sqlParser.K_GLOB - 77)) | (1 << (sqlParser.K_LIKE - 77)) | (1 << (sqlParser.K_MATCH - 77)) | (1 << (sqlParser.K_REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 886
                        self.expr(0)
                        self.state = 889
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                        if la_ == 1:
                            self.state = 887
                            self.match(sqlParser.K_ESCAPE)
                            self.state = 888
                            self.expr(0)


                        pass

                    elif la_ == 14:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 891
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 896
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [sqlParser.K_ISNULL]:
                            self.state = 892
                            self.match(sqlParser.K_ISNULL)
                            pass
                        elif token in [sqlParser.K_NOTNULL]:
                            self.state = 893
                            self.match(sqlParser.K_NOTNULL)
                            pass
                        elif token in [sqlParser.K_NOT]:
                            self.state = 894
                            self.match(sqlParser.K_NOT)
                            self.state = 895
                            self.match(sqlParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 902
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(sqlParser.Common_table_expressionContext,i)


        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = sqlParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(sqlParser.K_WITH)
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 904
                self.match(sqlParser.K_RECURSIVE)


            self.state = 907
            self.common_table_expression()
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 908
                self.match(sqlParser.COMMA)
                self.state = 909
                self.common_table_expression()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = sqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.table_name()
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 916
                self.match(sqlParser.OPEN_PAR)
                self.state = 917
                self.column_name()
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 918
                    self.match(sqlParser.COMMA)
                    self.state = 919
                    self.column_name()
                    self.state = 924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 925
                self.match(sqlParser.CLOSE_PAR)


            self.state = 929
            self.match(sqlParser.K_AS)
            self.state = 930
            self.match(sqlParser.OPEN_PAR)
            self.state = 931
            self.select_stmt()
            self.state = 932
            self.match(sqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdering_term" ):
                return visitor.visitOrdering_term(self)
            else:
                return visitor.visitChildren(self)




    def ordering_term(self):

        localctx = sqlParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.expr(0)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_COLLATE:
                self.state = 935
                self.match(sqlParser.K_COLLATE)
                self.state = 936
                self.collation_name()


            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 939
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(sqlParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column" ):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)




    def result_column(self):

        localctx = sqlParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.match(sqlParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.table_name()
                self.state = 944
                self.match(sqlParser.DOT)
                self.state = 945
                self.match(sqlParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 947
                self.expr(0)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 948
                        self.match(sqlParser.K_AS)


                    self.state = 951
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(sqlParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(sqlParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_or_subquery" ):
                return visitor.visitTable_or_subquery(self)
            else:
                return visitor.visitChildren(self)




    def table_or_subquery(self):

        localctx = sqlParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 959
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 956
                    self.schema_name()
                    self.state = 957
                    self.match(sqlParser.DOT)


                self.state = 961
                self.table_name()
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 962
                        self.match(sqlParser.K_AS)


                    self.state = 965
                    self.table_alias()


                self.state = 973
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_INDEXED]:
                    self.state = 968
                    self.match(sqlParser.K_INDEXED)
                    self.state = 969
                    self.match(sqlParser.K_BY)
                    self.state = 970
                    self.index_name()
                    pass
                elif token in [sqlParser.K_NOT]:
                    self.state = 971
                    self.match(sqlParser.K_NOT)
                    self.state = 972
                    self.match(sqlParser.K_INDEXED)
                    pass
                elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ON, sqlParser.K_ORDER, sqlParser.K_REINDEX, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VALUES, sqlParser.K_WHERE, sqlParser.K_WITH]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 975
                    self.schema_name()
                    self.state = 976
                    self.match(sqlParser.DOT)


                self.state = 980
                self.table_function_name()
                self.state = 981
                self.match(sqlParser.OPEN_PAR)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.OPEN_PAR) | (1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE) | (1 << sqlParser.K_ABORT) | (1 << sqlParser.K_ACTION) | (1 << sqlParser.K_ADD) | (1 << sqlParser.K_AFTER) | (1 << sqlParser.K_ALL) | (1 << sqlParser.K_ALTER) | (1 << sqlParser.K_ANALYZE) | (1 << sqlParser.K_AND) | (1 << sqlParser.K_AS) | (1 << sqlParser.K_ASC) | (1 << sqlParser.K_ATTACH) | (1 << sqlParser.K_AUTOINCREMENT) | (1 << sqlParser.K_BEFORE) | (1 << sqlParser.K_BEGIN) | (1 << sqlParser.K_BETWEEN) | (1 << sqlParser.K_BY) | (1 << sqlParser.K_CASCADE) | (1 << sqlParser.K_CASE) | (1 << sqlParser.K_CAST) | (1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLLATE) | (1 << sqlParser.K_COLUMN) | (1 << sqlParser.K_COMMIT) | (1 << sqlParser.K_CONFLICT) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_CREATE) | (1 << sqlParser.K_CROSS) | (1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP) | (1 << sqlParser.K_DATABASE) | (1 << sqlParser.K_DEFAULT) | (1 << sqlParser.K_DEFERRABLE) | (1 << sqlParser.K_DEFERRED) | (1 << sqlParser.K_DELETE) | (1 << sqlParser.K_DESC) | (1 << sqlParser.K_DETACH) | (1 << sqlParser.K_DISTINCT) | (1 << sqlParser.K_DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (sqlParser.K_EACH - 64)) | (1 << (sqlParser.K_ELSE - 64)) | (1 << (sqlParser.K_END - 64)) | (1 << (sqlParser.K_ESCAPE - 64)) | (1 << (sqlParser.K_EXCEPT - 64)) | (1 << (sqlParser.K_EXCLUSIVE - 64)) | (1 << (sqlParser.K_EXISTS - 64)) | (1 << (sqlParser.K_EXPLAIN - 64)) | (1 << (sqlParser.K_FAIL - 64)) | (1 << (sqlParser.K_FOR - 64)) | (1 << (sqlParser.K_FOREIGN - 64)) | (1 << (sqlParser.K_FROM - 64)) | (1 << (sqlParser.K_FULL - 64)) | (1 << (sqlParser.K_GLOB - 64)) | (1 << (sqlParser.K_GROUP - 64)) | (1 << (sqlParser.K_HAVING - 64)) | (1 << (sqlParser.K_IF - 64)) | (1 << (sqlParser.K_IGNORE - 64)) | (1 << (sqlParser.K_IMMEDIATE - 64)) | (1 << (sqlParser.K_IN - 64)) | (1 << (sqlParser.K_INDEX - 64)) | (1 << (sqlParser.K_INDEXED - 64)) | (1 << (sqlParser.K_INITIALLY - 64)) | (1 << (sqlParser.K_INNER - 64)) | (1 << (sqlParser.K_INSERT - 64)) | (1 << (sqlParser.K_INSTEAD - 64)) | (1 << (sqlParser.K_INTERSECT - 64)) | (1 << (sqlParser.K_INTO - 64)) | (1 << (sqlParser.K_IS - 64)) | (1 << (sqlParser.K_ISNULL - 64)) | (1 << (sqlParser.K_JOIN - 64)) | (1 << (sqlParser.K_KEY - 64)) | (1 << (sqlParser.K_LEFT - 64)) | (1 << (sqlParser.K_LIKE - 64)) | (1 << (sqlParser.K_LIMIT - 64)) | (1 << (sqlParser.K_MATCH - 64)) | (1 << (sqlParser.K_NATURAL - 64)) | (1 << (sqlParser.K_NO - 64)) | (1 << (sqlParser.K_NOT - 64)) | (1 << (sqlParser.K_NOTNULL - 64)) | (1 << (sqlParser.K_NULL - 64)) | (1 << (sqlParser.K_OF - 64)) | (1 << (sqlParser.K_OFFSET - 64)) | (1 << (sqlParser.K_ON - 64)) | (1 << (sqlParser.K_OR - 64)) | (1 << (sqlParser.K_ORDER - 64)) | (1 << (sqlParser.K_OUTER - 64)) | (1 << (sqlParser.K_PLAN - 64)) | (1 << (sqlParser.K_PRAGMA - 64)) | (1 << (sqlParser.K_PRIMARY - 64)) | (1 << (sqlParser.K_QUERY - 64)) | (1 << (sqlParser.K_RAISE - 64)) | (1 << (sqlParser.K_RECURSIVE - 64)) | (1 << (sqlParser.K_REFERENCES - 64)) | (1 << (sqlParser.K_REGEXP - 64)) | (1 << (sqlParser.K_REINDEX - 64)) | (1 << (sqlParser.K_RELEASE - 64)) | (1 << (sqlParser.K_RENAME - 64)) | (1 << (sqlParser.K_REPLACE - 64)) | (1 << (sqlParser.K_RESTRICT - 64)) | (1 << (sqlParser.K_RIGHT - 64)) | (1 << (sqlParser.K_ROLLBACK - 64)) | (1 << (sqlParser.K_ROW - 64)) | (1 << (sqlParser.K_SAVEPOINT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (sqlParser.K_SELECT - 128)) | (1 << (sqlParser.K_SET - 128)) | (1 << (sqlParser.K_TABLE - 128)) | (1 << (sqlParser.K_TEMP - 128)) | (1 << (sqlParser.K_TEMPORARY - 128)) | (1 << (sqlParser.K_THEN - 128)) | (1 << (sqlParser.K_TO - 128)) | (1 << (sqlParser.K_TRANSACTION - 128)) | (1 << (sqlParser.K_TRIGGER - 128)) | (1 << (sqlParser.K_UNION - 128)) | (1 << (sqlParser.K_UNIQUE - 128)) | (1 << (sqlParser.K_UPDATE - 128)) | (1 << (sqlParser.K_USING - 128)) | (1 << (sqlParser.K_VACUUM - 128)) | (1 << (sqlParser.K_VALUES - 128)) | (1 << (sqlParser.K_VIEW - 128)) | (1 << (sqlParser.K_VIRTUAL - 128)) | (1 << (sqlParser.K_WHEN - 128)) | (1 << (sqlParser.K_WHERE - 128)) | (1 << (sqlParser.K_WITH - 128)) | (1 << (sqlParser.K_WITHOUT - 128)) | (1 << (sqlParser.IDENTIFIER - 128)) | (1 << (sqlParser.NUMERIC_LITERAL - 128)) | (1 << (sqlParser.BIND_PARAMETER - 128)) | (1 << (sqlParser.STRING_LITERAL - 128)) | (1 << (sqlParser.BLOB_LITERAL - 128)))) != 0):
                    self.state = 982
                    self.expr(0)
                    self.state = 987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 983
                        self.match(sqlParser.COMMA)
                        self.state = 984
                        self.expr(0)
                        self.state = 989
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 992
                self.match(sqlParser.CLOSE_PAR)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 993
                        self.match(sqlParser.K_AS)


                    self.state = 996
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 999
                self.match(sqlParser.OPEN_PAR)
                self.state = 1009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1000
                    self.table_or_subquery()
                    self.state = 1005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 1001
                        self.match(sqlParser.COMMA)
                        self.state = 1002
                        self.table_or_subquery()
                        self.state = 1007
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1008
                    self.join_clause()
                    pass


                self.state = 1011
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1013
                self.match(sqlParser.OPEN_PAR)
                self.state = 1014
                self.select_stmt()
                self.state = 1015
                self.match(sqlParser.CLOSE_PAR)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 1017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 1016
                        self.match(sqlParser.K_AS)


                    self.state = 1019
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = sqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.table_or_subquery()
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA or _la==sqlParser.K_CROSS or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (sqlParser.K_INNER - 87)) | (1 << (sqlParser.K_JOIN - 87)) | (1 << (sqlParser.K_LEFT - 87)) | (1 << (sqlParser.K_NATURAL - 87)))) != 0):
                self.state = 1025
                self.join_operator()
                self.state = 1026
                self.table_or_subquery()
                self.state = 1027
                self.join_constraint()
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(sqlParser.COMMA, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_operator" ):
                return visitor.visitJoin_operator(self)
            else:
                return visitor.visitChildren(self)




    def join_operator(self):

        localctx = sqlParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.match(sqlParser.COMMA)
                pass
            elif token in [sqlParser.K_CROSS, sqlParser.K_INNER, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NATURAL:
                    self.state = 1035
                    self.match(sqlParser.K_NATURAL)


                self.state = 1044
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_LEFT]:
                    self.state = 1038
                    self.match(sqlParser.K_LEFT)
                    self.state = 1040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_OUTER:
                        self.state = 1039
                        self.match(sqlParser.K_OUTER)


                    pass
                elif token in [sqlParser.K_INNER]:
                    self.state = 1042
                    self.match(sqlParser.K_INNER)
                    pass
                elif token in [sqlParser.K_CROSS]:
                    self.state = 1043
                    self.match(sqlParser.K_CROSS)
                    pass
                elif token in [sqlParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 1046
                self.match(sqlParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_constraint" ):
                return visitor.visitJoin_constraint(self)
            else:
                return visitor.visitChildren(self)




    def join_constraint(self):

        localctx = sqlParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_ON]:
                self.state = 1049
                self.match(sqlParser.K_ON)
                self.state = 1050
                self.expr(0)
                pass
            elif token in [sqlParser.K_USING]:
                self.state = 1051
                self.match(sqlParser.K_USING)
                self.state = 1052
                self.match(sqlParser.OPEN_PAR)
                self.state = 1053
                self.column_name()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 1054
                    self.match(sqlParser.COMMA)
                    self.state = 1055
                    self.column_name()
                    self.state = 1060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1061
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ORDER, sqlParser.K_REINDEX, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_VALUES, sqlParser.K_WHERE, sqlParser.K_WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._result_column = None # Result_columnContext
            self.columns = list() # of Result_columnContexts
            self._table_or_subquery = None # Table_or_subqueryContext
            self.tables = list() # of Table_or_subqueryContexts
            self.join = None # Join_clauseContext
            self.where = None # ExprContext
            self._expr = None # ExprContext
            self.group_by = list() # of ExprContexts
            self.having = None # ExprContext
            self.values = list() # of ExprContexts

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return sqlParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_core" ):
                return visitor.visitSelect_core(self)
            else:
                return visitor.visitChildren(self)




    def select_core(self):

        localctx = sqlParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1139
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1065
                self.match(sqlParser.K_SELECT)
                self.state = 1067
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1066
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1069
                localctx._result_column = self.result_column()
                localctx.columns.append(localctx._result_column)
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 1070
                    self.match(sqlParser.COMMA)
                    self.state = 1071
                    localctx._result_column = self.result_column()
                    localctx.columns.append(localctx._result_column)
                    self.state = 1076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_FROM:
                    self.state = 1077
                    self.match(sqlParser.K_FROM)
                    self.state = 1087
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1078
                        localctx._table_or_subquery = self.table_or_subquery()
                        localctx.tables.append(localctx._table_or_subquery)
                        self.state = 1083
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==sqlParser.COMMA:
                            self.state = 1079
                            self.match(sqlParser.COMMA)
                            self.state = 1080
                            localctx._table_or_subquery = self.table_or_subquery()
                            localctx.tables.append(localctx._table_or_subquery)
                            self.state = 1085
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1086
                        localctx.join = self.join_clause()
                        pass




                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WHERE:
                    self.state = 1091
                    self.match(sqlParser.K_WHERE)
                    self.state = 1092
                    localctx.where = self.expr(0)


                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_GROUP:
                    self.state = 1095
                    self.match(sqlParser.K_GROUP)
                    self.state = 1096
                    self.match(sqlParser.K_BY)
                    self.state = 1097
                    localctx._expr = self.expr(0)
                    localctx.group_by.append(localctx._expr)
                    self.state = 1102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 1098
                        self.match(sqlParser.COMMA)
                        self.state = 1099
                        localctx._expr = self.expr(0)
                        localctx.group_by.append(localctx._expr)
                        self.state = 1104
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_HAVING:
                        self.state = 1105
                        self.match(sqlParser.K_HAVING)
                        self.state = 1106
                        localctx.having = self.expr(0)




                pass
            elif token in [sqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.match(sqlParser.K_VALUES)
                self.state = 1112
                self.match(sqlParser.OPEN_PAR)
                self.state = 1113
                localctx._expr = self.expr(0)
                localctx.values.append(localctx._expr)
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 1114
                    self.match(sqlParser.COMMA)
                    self.state = 1115
                    self.expr(0)
                    self.state = 1120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1121
                self.match(sqlParser.CLOSE_PAR)
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 1122
                    self.match(sqlParser.COMMA)
                    self.state = 1123
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 1124
                    self.expr(0)
                    self.state = 1129
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 1125
                        self.match(sqlParser.COMMA)
                        self.state = 1126
                        self.expr(0)
                        self.state = 1131
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1132
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 1138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(sqlParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConflict_clause" ):
                return visitor.visitConflict_clause(self)
            else:
                return visitor.visitChildren(self)




    def conflict_clause(self):

        localctx = sqlParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ON:
                self.state = 1141
                self.match(sqlParser.K_ON)
                self.state = 1142
                self.match(sqlParser.K_CONFLICT)
                self.state = 1143
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (sqlParser.K_FAIL - 72)) | (1 << (sqlParser.K_IGNORE - 72)) | (1 << (sqlParser.K_REPLACE - 72)) | (1 << (sqlParser.K_ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_operator" ):
                return visitor.visitCompound_operator(self)
            else:
                return visitor.visitChildren(self)




    def compound_operator(self):

        localctx = sqlParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_compound_operator)
        try:
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1146
                self.match(sqlParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.match(sqlParser.K_UNION)
                self.state = 1148
                self.match(sqlParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1149
                self.match(sqlParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1150
                self.match(sqlParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_table" ):
                return visitor.visitForeign_table(self)
            else:
                return visitor.visitChildren(self)




    def foreign_table(self):

        localctx = sqlParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = sqlParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.PLUS or _la==sqlParser.MINUS:
                self.state = 1155
                _la = self._input.LA(1)
                if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1158
            self.match(sqlParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(sqlParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_value" ):
                return visitor.visitLiteral_value(self)
            else:
                return visitor.visitChildren(self)




    def literal_value(self):

        localctx = sqlParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (sqlParser.K_NULL - 104)) | (1 << (sqlParser.NUMERIC_LITERAL - 104)) | (1 << (sqlParser.STRING_LITERAL - 104)) | (1 << (sqlParser.BLOB_LITERAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(sqlParser.TILDE, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator" ):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator(self):

        localctx = sqlParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE))) != 0) or _la==sqlParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = sqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            _la = self._input.LA(1)
            if not(_la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(sqlParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def" ):
                return visitor.visitColumn_def(self)
            else:
                return visitor.visitChildren(self)




    def column_def(self):

        localctx = sqlParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.column_name()
            self.state = 1168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1167
                self.type_name()


            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLLATE) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_DEFAULT))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (sqlParser.K_NOT - 102)) | (1 << (sqlParser.K_NULL - 102)) | (1 << (sqlParser.K_PRIMARY - 102)) | (1 << (sqlParser.K_REFERENCES - 102)) | (1 << (sqlParser.K_UNIQUE - 102)))) != 0):
                self.state = 1170
                self.column_constraint()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(sqlParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(sqlParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(sqlParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(sqlParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(sqlParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(sqlParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(sqlParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(sqlParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(sqlParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(sqlParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(sqlParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(sqlParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(sqlParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(sqlParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(sqlParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(sqlParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(sqlParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(sqlParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(sqlParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(sqlParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(sqlParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(sqlParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(sqlParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(sqlParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(sqlParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(sqlParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(sqlParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(sqlParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(sqlParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(sqlParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(sqlParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(sqlParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(sqlParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(sqlParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(sqlParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(sqlParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(sqlParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(sqlParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(sqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(sqlParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(sqlParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(sqlParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(sqlParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(sqlParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(sqlParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(sqlParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(sqlParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(sqlParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(sqlParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = sqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (sqlParser.K_ABORT - 25)) | (1 << (sqlParser.K_ACTION - 25)) | (1 << (sqlParser.K_ADD - 25)) | (1 << (sqlParser.K_AFTER - 25)) | (1 << (sqlParser.K_ALL - 25)) | (1 << (sqlParser.K_ALTER - 25)) | (1 << (sqlParser.K_ANALYZE - 25)) | (1 << (sqlParser.K_AND - 25)) | (1 << (sqlParser.K_AS - 25)) | (1 << (sqlParser.K_ASC - 25)) | (1 << (sqlParser.K_ATTACH - 25)) | (1 << (sqlParser.K_AUTOINCREMENT - 25)) | (1 << (sqlParser.K_BEFORE - 25)) | (1 << (sqlParser.K_BEGIN - 25)) | (1 << (sqlParser.K_BETWEEN - 25)) | (1 << (sqlParser.K_BY - 25)) | (1 << (sqlParser.K_CASCADE - 25)) | (1 << (sqlParser.K_CASE - 25)) | (1 << (sqlParser.K_CAST - 25)) | (1 << (sqlParser.K_CHECK - 25)) | (1 << (sqlParser.K_COLLATE - 25)) | (1 << (sqlParser.K_COLUMN - 25)) | (1 << (sqlParser.K_COMMIT - 25)) | (1 << (sqlParser.K_CONFLICT - 25)) | (1 << (sqlParser.K_CONSTRAINT - 25)) | (1 << (sqlParser.K_CREATE - 25)) | (1 << (sqlParser.K_CROSS - 25)) | (1 << (sqlParser.K_CURRENT_DATE - 25)) | (1 << (sqlParser.K_CURRENT_TIME - 25)) | (1 << (sqlParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (sqlParser.K_DATABASE - 25)) | (1 << (sqlParser.K_DEFAULT - 25)) | (1 << (sqlParser.K_DEFERRABLE - 25)) | (1 << (sqlParser.K_DEFERRED - 25)) | (1 << (sqlParser.K_DELETE - 25)) | (1 << (sqlParser.K_DESC - 25)) | (1 << (sqlParser.K_DETACH - 25)) | (1 << (sqlParser.K_DISTINCT - 25)) | (1 << (sqlParser.K_DROP - 25)) | (1 << (sqlParser.K_EACH - 25)) | (1 << (sqlParser.K_ELSE - 25)) | (1 << (sqlParser.K_END - 25)) | (1 << (sqlParser.K_ESCAPE - 25)) | (1 << (sqlParser.K_EXCEPT - 25)) | (1 << (sqlParser.K_EXCLUSIVE - 25)) | (1 << (sqlParser.K_EXISTS - 25)) | (1 << (sqlParser.K_EXPLAIN - 25)) | (1 << (sqlParser.K_FAIL - 25)) | (1 << (sqlParser.K_FOR - 25)) | (1 << (sqlParser.K_FOREIGN - 25)) | (1 << (sqlParser.K_FROM - 25)) | (1 << (sqlParser.K_FULL - 25)) | (1 << (sqlParser.K_GLOB - 25)) | (1 << (sqlParser.K_GROUP - 25)) | (1 << (sqlParser.K_HAVING - 25)) | (1 << (sqlParser.K_IF - 25)) | (1 << (sqlParser.K_IGNORE - 25)) | (1 << (sqlParser.K_IMMEDIATE - 25)) | (1 << (sqlParser.K_IN - 25)) | (1 << (sqlParser.K_INDEX - 25)) | (1 << (sqlParser.K_INDEXED - 25)) | (1 << (sqlParser.K_INITIALLY - 25)) | (1 << (sqlParser.K_INNER - 25)) | (1 << (sqlParser.K_INSERT - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (sqlParser.K_INSTEAD - 89)) | (1 << (sqlParser.K_INTERSECT - 89)) | (1 << (sqlParser.K_INTO - 89)) | (1 << (sqlParser.K_IS - 89)) | (1 << (sqlParser.K_ISNULL - 89)) | (1 << (sqlParser.K_JOIN - 89)) | (1 << (sqlParser.K_KEY - 89)) | (1 << (sqlParser.K_LEFT - 89)) | (1 << (sqlParser.K_LIKE - 89)) | (1 << (sqlParser.K_LIMIT - 89)) | (1 << (sqlParser.K_MATCH - 89)) | (1 << (sqlParser.K_NATURAL - 89)) | (1 << (sqlParser.K_NO - 89)) | (1 << (sqlParser.K_NOT - 89)) | (1 << (sqlParser.K_NOTNULL - 89)) | (1 << (sqlParser.K_NULL - 89)) | (1 << (sqlParser.K_OF - 89)) | (1 << (sqlParser.K_OFFSET - 89)) | (1 << (sqlParser.K_ON - 89)) | (1 << (sqlParser.K_OR - 89)) | (1 << (sqlParser.K_ORDER - 89)) | (1 << (sqlParser.K_OUTER - 89)) | (1 << (sqlParser.K_PLAN - 89)) | (1 << (sqlParser.K_PRAGMA - 89)) | (1 << (sqlParser.K_PRIMARY - 89)) | (1 << (sqlParser.K_QUERY - 89)) | (1 << (sqlParser.K_RAISE - 89)) | (1 << (sqlParser.K_RECURSIVE - 89)) | (1 << (sqlParser.K_REFERENCES - 89)) | (1 << (sqlParser.K_REGEXP - 89)) | (1 << (sqlParser.K_REINDEX - 89)) | (1 << (sqlParser.K_RELEASE - 89)) | (1 << (sqlParser.K_RENAME - 89)) | (1 << (sqlParser.K_REPLACE - 89)) | (1 << (sqlParser.K_RESTRICT - 89)) | (1 << (sqlParser.K_RIGHT - 89)) | (1 << (sqlParser.K_ROLLBACK - 89)) | (1 << (sqlParser.K_ROW - 89)) | (1 << (sqlParser.K_SAVEPOINT - 89)) | (1 << (sqlParser.K_SELECT - 89)) | (1 << (sqlParser.K_SET - 89)) | (1 << (sqlParser.K_TABLE - 89)) | (1 << (sqlParser.K_TEMP - 89)) | (1 << (sqlParser.K_TEMPORARY - 89)) | (1 << (sqlParser.K_THEN - 89)) | (1 << (sqlParser.K_TO - 89)) | (1 << (sqlParser.K_TRANSACTION - 89)) | (1 << (sqlParser.K_TRIGGER - 89)) | (1 << (sqlParser.K_UNION - 89)) | (1 << (sqlParser.K_UNIQUE - 89)) | (1 << (sqlParser.K_UPDATE - 89)) | (1 << (sqlParser.K_USING - 89)) | (1 << (sqlParser.K_VACUUM - 89)) | (1 << (sqlParser.K_VALUES - 89)) | (1 << (sqlParser.K_VIEW - 89)) | (1 << (sqlParser.K_VIRTUAL - 89)) | (1 << (sqlParser.K_WHEN - 89)) | (1 << (sqlParser.K_WHERE - 89)) | (1 << (sqlParser.K_WITH - 89)) | (1 << (sqlParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = sqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_name" ):
                return visitor.visitDatabase_name(self)
            else:
                return visitor.visitChildren(self)




    def database_name(self):

        localctx = sqlParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = sqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_function_name" ):
                return visitor.visitTable_function_name(self)
            else:
                return visitor.visitChildren(self)




    def table_function_name(self):

        localctx = sqlParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = sqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = sqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollation_name" ):
                return visitor.visitCollation_name(self)
            else:
                return visitor.visitChildren(self)




    def collation_name(self):

        localctx = sqlParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = sqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = sqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_table_alias)
        try:
            self.state = 1200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1195
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1196
                self.match(sqlParser.OPEN_PAR)
                self.state = 1197
                self.table_alias()
                self.state = 1198
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(sqlParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_name" ):
                return visitor.visitAny_name(self)
            else:
                return visitor.visitChildren(self)




    def any_name(self):

        localctx = sqlParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_any_name)
        try:
            self.state = 1209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.K_ABORT, sqlParser.K_ACTION, sqlParser.K_ADD, sqlParser.K_AFTER, sqlParser.K_ALL, sqlParser.K_ALTER, sqlParser.K_ANALYZE, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_ATTACH, sqlParser.K_AUTOINCREMENT, sqlParser.K_BEFORE, sqlParser.K_BEGIN, sqlParser.K_BETWEEN, sqlParser.K_BY, sqlParser.K_CASCADE, sqlParser.K_CASE, sqlParser.K_CAST, sqlParser.K_CHECK, sqlParser.K_COLLATE, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONFLICT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_CURRENT_DATE, sqlParser.K_CURRENT_TIME, sqlParser.K_CURRENT_TIMESTAMP, sqlParser.K_DATABASE, sqlParser.K_DEFAULT, sqlParser.K_DEFERRABLE, sqlParser.K_DEFERRED, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DETACH, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EACH, sqlParser.K_ELSE, sqlParser.K_END, sqlParser.K_ESCAPE, sqlParser.K_EXCEPT, sqlParser.K_EXCLUSIVE, sqlParser.K_EXISTS, sqlParser.K_EXPLAIN, sqlParser.K_FAIL, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GLOB, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IF, sqlParser.K_IGNORE, sqlParser.K_IMMEDIATE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INDEXED, sqlParser.K_INITIALLY, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INSTEAD, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_ISNULL, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_MATCH, sqlParser.K_NATURAL, sqlParser.K_NO, sqlParser.K_NOT, sqlParser.K_NOTNULL, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_OUTER, sqlParser.K_PLAN, sqlParser.K_PRAGMA, sqlParser.K_PRIMARY, sqlParser.K_QUERY, sqlParser.K_RAISE, sqlParser.K_RECURSIVE, sqlParser.K_REFERENCES, sqlParser.K_REGEXP, sqlParser.K_REINDEX, sqlParser.K_RELEASE, sqlParser.K_RENAME, sqlParser.K_REPLACE, sqlParser.K_RESTRICT, sqlParser.K_RIGHT, sqlParser.K_ROLLBACK, sqlParser.K_ROW, sqlParser.K_SAVEPOINT, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_TABLE, sqlParser.K_TEMP, sqlParser.K_TEMPORARY, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_TRIGGER, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_VIEW, sqlParser.K_VIRTUAL, sqlParser.K_WHEN, sqlParser.K_WHERE, sqlParser.K_WITH, sqlParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1203
                self.keyword()
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1204
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1205
                self.match(sqlParser.OPEN_PAR)
                self.state = 1206
                self.any_name()
                self.state = 1207
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[20] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 5)
         




