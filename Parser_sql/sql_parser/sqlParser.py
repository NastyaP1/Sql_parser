# Generated from C:/Users/1/Sql_parser/Parser_sql\sql.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009f")
        buf.write("\u038b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\3\2\7\2R\n\2\f\2\16\2U\13\2\3\2\3\2\3")
        buf.write("\3\7\3Z\n\3\f\3\16\3]\13\3\3\3\3\3\6\3a\n\3\r\3\16\3b")
        buf.write("\3\3\7\3f\n\3\f\3\16\3i\13\3\3\3\7\3l\n\3\f\3\16\3o\13")
        buf.write("\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4y\n\4\3\5\5\5|\n")
        buf.write("\5\3\5\3\5\3\5\5\5\u0081\n\5\3\5\3\5\5\5\u0085\n\5\3\5")
        buf.write("\6\5\u0088\n\5\r\5\16\5\u0089\3\5\3\5\3\5\3\5\3\5\7\5")
        buf.write("\u0091\n\5\f\5\16\5\u0094\13\5\5\5\u0096\n\5\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u009c\n\5\5\5\u009e\n\5\3\6\5\6\u00a1\n\6\3")
        buf.write("\6\3\6\3\6\3\6\7\6\u00a7\n\6\f\6\16\6\u00aa\13\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\7\6\u00b1\n\6\f\6\16\6\u00b4\13\6\5\6\u00b6")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u00bc\n\6\5\6\u00be\n\6\3\7\5")
        buf.write("\7\u00c1\n\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u00c9\n\7\f\7")
        buf.write("\16\7\u00cc\13\7\5\7\u00ce\n\7\3\7\3\7\3\7\3\7\5\7\u00d4")
        buf.write("\n\7\5\7\u00d6\n\7\3\b\5\b\u00d9\n\b\3\b\3\b\3\b\3\b\7")
        buf.write("\b\u00df\n\b\f\b\16\b\u00e2\13\b\3\b\3\b\3\b\3\b\3\b\7")
        buf.write("\b\u00e9\n\b\f\b\16\b\u00ec\13\b\5\b\u00ee\n\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u00f4\n\b\5\b\u00f6\n\b\3\t\3\t\5\t\u00fa")
        buf.write("\n\t\3\t\3\t\3\t\7\t\u00ff\n\t\f\t\16\t\u0102\13\t\3\t")
        buf.write("\3\t\3\t\3\t\7\t\u0108\n\t\f\t\16\t\u010b\13\t\3\t\5\t")
        buf.write("\u010e\n\t\5\t\u0110\n\t\3\t\3\t\5\t\u0114\n\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\7\t\u011b\n\t\f\t\16\t\u011e\13\t\3\t\3\t")
        buf.write("\5\t\u0122\n\t\5\t\u0124\n\t\3\t\3\t\3\t\3\t\3\t\7\t\u012b")
        buf.write("\n\t\f\t\16\t\u012e\13\t\3\t\3\t\3\t\3\t\3\t\3\t\7\t\u0136")
        buf.write("\n\t\f\t\16\t\u0139\13\t\3\t\3\t\7\t\u013d\n\t\f\t\16")
        buf.write("\t\u0140\13\t\5\t\u0142\n\t\3\n\3\n\3\13\5\13\u0147\n")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\5\13\u0154\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\7\13\u0160\n\13\f\13\16\13\u0163\13")
        buf.write("\13\3\13\3\13\5\13\u0167\n\13\3\f\5\f\u016a\n\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0177\n\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u0183\n\f\f")
        buf.write("\f\16\f\u0186\13\f\3\f\3\f\5\f\u018a\n\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\7\f\u0191\n\f\f\f\16\f\u0194\13\f\5\f\u0196\n\f")
        buf.write("\3\f\3\f\3\f\3\f\5\f\u019c\n\f\5\f\u019e\n\f\3\r\5\r\u01a1")
        buf.write("\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\5\r\u01b4\n\r\3\r\3\r\3\r\3\r\5\r\u01ba")
        buf.write("\n\r\3\r\3\r\3\r\3\r\3\r\7\r\u01c1\n\r\f\r\16\r\u01c4")
        buf.write("\13\r\3\r\3\r\5\r\u01c8\n\r\3\r\3\r\3\r\3\r\3\r\7\r\u01cf")
        buf.write("\n\r\f\r\16\r\u01d2\13\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u01da")
        buf.write("\n\r\f\r\16\r\u01dd\13\r\3\r\3\r\7\r\u01e1\n\r\f\r\16")
        buf.write("\r\u01e4\13\r\3\r\3\r\3\r\5\r\u01e9\n\r\3\16\3\16\3\16")
        buf.write("\5\16\u01ee\n\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u01f6")
        buf.write("\n\16\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u01fe\n\17\3")
        buf.write("\17\3\17\3\17\5\17\u0203\n\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\5\17\u020e\n\17\3\17\5\17\u0211\n")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0219\n\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\6\17\u0220\n\17\r\17\16\17\u0221")
        buf.write("\3\17\3\17\5\17\u0226\n\17\3\17\3\17\5\17\u022a\n\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\5\17\u0247\n\17\3\17\3\17\3")
        buf.write("\17\5\17\u024c\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u0255\n\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u025d")
        buf.write("\n\17\f\17\16\17\u0260\13\17\5\17\u0262\n\17\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u0268\n\17\3\17\5\17\u026b\n\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\5\17\u0272\n\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u0278\n\17\3\17\3\17\3\17\3\17\3\17\5\17\u027f\n")
        buf.write("\17\7\17\u0281\n\17\f\17\16\17\u0284\13\17\3\20\3\20\5")
        buf.write("\20\u0288\n\20\3\20\3\20\3\20\7\20\u028d\n\20\f\20\16")
        buf.write("\20\u0290\13\20\3\21\3\21\3\21\3\21\3\21\7\21\u0297\n")
        buf.write("\21\f\21\16\21\u029a\13\21\3\21\3\21\5\21\u029e\n\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\5\22\u02a8\n\22")
        buf.write("\3\22\5\22\u02ab\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\5\23\u02b4\n\23\3\23\5\23\u02b7\n\23\5\23\u02b9\n")
        buf.write("\23\3\24\3\24\3\24\5\24\u02be\n\24\3\24\3\24\5\24\u02c2")
        buf.write("\n\24\3\24\5\24\u02c5\n\24\3\24\3\24\3\24\3\24\3\24\5")
        buf.write("\24\u02cc\n\24\3\24\3\24\3\24\5\24\u02d1\n\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\7\24\u02d8\n\24\f\24\16\24\u02db\13\24")
        buf.write("\5\24\u02dd\n\24\3\24\3\24\5\24\u02e1\n\24\3\24\5\24\u02e4")
        buf.write("\n\24\3\24\3\24\3\24\3\24\7\24\u02ea\n\24\f\24\16\24\u02ed")
        buf.write("\13\24\3\24\5\24\u02f0\n\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\5\24\u02f8\n\24\3\24\5\24\u02fb\n\24\5\24\u02fd\n")
        buf.write("\24\3\25\3\25\3\25\3\25\3\25\7\25\u0304\n\25\f\25\16\25")
        buf.write("\u0307\13\25\3\26\3\26\5\26\u030b\n\26\3\26\3\26\5\26")
        buf.write("\u030f\n\26\3\26\3\26\5\26\u0313\n\26\3\26\5\26\u0316")
        buf.write("\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u031f\n")
        buf.write("\27\f\27\16\27\u0322\13\27\3\27\3\27\5\27\u0326\n\27\3")
        buf.write("\30\3\30\5\30\u032a\n\30\3\30\3\30\3\30\7\30\u032f\n\30")
        buf.write("\f\30\16\30\u0332\13\30\3\30\3\30\3\30\3\30\7\30\u0338")
        buf.write("\n\30\f\30\16\30\u033b\13\30\3\30\5\30\u033e\n\30\5\30")
        buf.write("\u0340\n\30\3\30\3\30\5\30\u0344\n\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\7\30\u034b\n\30\f\30\16\30\u034e\13\30\3\30\3")
        buf.write("\30\5\30\u0352\n\30\5\30\u0354\n\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\5\31\u035b\n\31\3\32\5\32\u035e\n\32\3\32\3\32\3")
        buf.write("\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3")
        buf.write(" \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\5\'\u0380\n\'\3(\3(\3(\3(\3(\3(\3(\5(\u0389")
        buf.write("\n(\3(\2\3\34)\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLN\2\17\4\2\7\7ll\4\2\37")
        buf.write("\37@@\4\2\t\t\16\17\3\2\n\13\3\2\20\23\3\2\24\27\4\2\b")
        buf.write("\b\30\32\6\2OOcceexx\4\2$$>>\6\2\668jj\u0098\u0098\u009a")
        buf.write("\u009b\4\2\n\fhh\4\2\u0097\u0097\u009a\u009a\3\2\33\u0096")
        buf.write("\2\u041a\2S\3\2\2\2\4[\3\2\2\2\6x\3\2\2\2\b{\3\2\2\2\n")
        buf.write("\u00a0\3\2\2\2\f\u00c0\3\2\2\2\16\u00d8\3\2\2\2\20\u0141")
        buf.write("\3\2\2\2\22\u0143\3\2\2\2\24\u0146\3\2\2\2\26\u0169\3")
        buf.write("\2\2\2\30\u01a0\3\2\2\2\32\u01ed\3\2\2\2\34\u0229\3\2")
        buf.write("\2\2\36\u0285\3\2\2\2 \u0291\3\2\2\2\"\u02a4\3\2\2\2$")
        buf.write("\u02b8\3\2\2\2&\u02fc\3\2\2\2(\u02fe\3\2\2\2*\u0315\3")
        buf.write("\2\2\2,\u0325\3\2\2\2.\u0327\3\2\2\2\60\u035a\3\2\2\2")
        buf.write("\62\u035d\3\2\2\2\64\u0361\3\2\2\2\66\u0363\3\2\2\28\u0365")
        buf.write("\3\2\2\2:\u0367\3\2\2\2<\u0369\3\2\2\2>\u036b\3\2\2\2")
        buf.write("@\u036d\3\2\2\2B\u036f\3\2\2\2D\u0371\3\2\2\2F\u0373\3")
        buf.write("\2\2\2H\u0375\3\2\2\2J\u0377\3\2\2\2L\u037f\3\2\2\2N\u0388")
        buf.write("\3\2\2\2PR\5\4\3\2QP\3\2\2\2RU\3\2\2\2SQ\3\2\2\2ST\3\2")
        buf.write("\2\2TV\3\2\2\2US\3\2\2\2VW\7\2\2\3W\3\3\2\2\2XZ\7\3\2")
        buf.write("\2YX\3\2\2\2Z]\3\2\2\2[Y\3\2\2\2[\\\3\2\2\2\\^\3\2\2\2")
        buf.write("][\3\2\2\2^g\5\6\4\2_a\7\3\2\2`_\3\2\2\2ab\3\2\2\2b`\3")
        buf.write("\2\2\2bc\3\2\2\2cd\3\2\2\2df\5\6\4\2e`\3\2\2\2fi\3\2\2")
        buf.write("\2ge\3\2\2\2gh\3\2\2\2hm\3\2\2\2ig\3\2\2\2jl\7\3\2\2k")
        buf.write("j\3\2\2\2lo\3\2\2\2mk\3\2\2\2mn\3\2\2\2n\5\3\2\2\2om\3")
        buf.write("\2\2\2py\5\b\5\2qy\5\n\6\2ry\5\f\7\2sy\5\16\b\2ty\5\22")
        buf.write("\n\2uy\5\24\13\2vy\5\26\f\2wy\5\30\r\2xp\3\2\2\2xq\3\2")
        buf.write("\2\2xr\3\2\2\2xs\3\2\2\2xt\3\2\2\2xu\3\2\2\2xv\3\2\2\2")
        buf.write("xw\3\2\2\2y\7\3\2\2\2z|\5\36\20\2{z\3\2\2\2{|\3\2\2\2")
        buf.write("|}\3\2\2\2}\u0087\5.\30\2~\u0080\7\u008b\2\2\177\u0081")
        buf.write("\7\37\2\2\u0080\177\3\2\2\2\u0080\u0081\3\2\2\2\u0081")
        buf.write("\u0085\3\2\2\2\u0082\u0085\7\\\2\2\u0083\u0085\7F\2\2")
        buf.write("\u0084~\3\2\2\2\u0084\u0082\3\2\2\2\u0084\u0083\3\2\2")
        buf.write("\2\u0085\u0086\3\2\2\2\u0086\u0088\5.\30\2\u0087\u0084")
        buf.write("\3\2\2\2\u0088\u0089\3\2\2\2\u0089\u0087\3\2\2\2\u0089")
        buf.write("\u008a\3\2\2\2\u008a\u0095\3\2\2\2\u008b\u008c\7o\2\2")
        buf.write("\u008c\u008d\7*\2\2\u008d\u0092\5\"\22\2\u008e\u008f\7")
        buf.write("\7\2\2\u008f\u0091\5\"\22\2\u0090\u008e\3\2\2\2\u0091")
        buf.write("\u0094\3\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093\3\2\2\2")
        buf.write("\u0093\u0096\3\2\2\2\u0094\u0092\3\2\2\2\u0095\u008b\3")
        buf.write("\2\2\2\u0095\u0096\3\2\2\2\u0096\u009d\3\2\2\2\u0097\u0098")
        buf.write("\7d\2\2\u0098\u009b\5\34\17\2\u0099\u009a\t\2\2\2\u009a")
        buf.write("\u009c\5\34\17\2\u009b\u0099\3\2\2\2\u009b\u009c\3\2\2")
        buf.write("\2\u009c\u009e\3\2\2\2\u009d\u0097\3\2\2\2\u009d\u009e")
        buf.write("\3\2\2\2\u009e\t\3\2\2\2\u009f\u00a1\5\36\20\2\u00a0\u009f")
        buf.write("\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2")
        buf.write("\u00a8\5.\30\2\u00a3\u00a4\5\60\31\2\u00a4\u00a5\5.\30")
        buf.write("\2\u00a5\u00a7\3\2\2\2\u00a6\u00a3\3\2\2\2\u00a7\u00aa")
        buf.write("\3\2\2\2\u00a8\u00a6\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9")
        buf.write("\u00b5\3\2\2\2\u00aa\u00a8\3\2\2\2\u00ab\u00ac\7o\2\2")
        buf.write("\u00ac\u00ad\7*\2\2\u00ad\u00b2\5\"\22\2\u00ae\u00af\7")
        buf.write("\7\2\2\u00af\u00b1\5\"\22\2\u00b0\u00ae\3\2\2\2\u00b1")
        buf.write("\u00b4\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2")
        buf.write("\u00b3\u00b6\3\2\2\2\u00b4\u00b2\3\2\2\2\u00b5\u00ab\3")
        buf.write("\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00bd\3\2\2\2\u00b7\u00b8")
        buf.write("\7d\2\2\u00b8\u00bb\5\34\17\2\u00b9\u00ba\t\2\2\2\u00ba")
        buf.write("\u00bc\5\34\17\2\u00bb\u00b9\3\2\2\2\u00bb\u00bc\3\2\2")
        buf.write("\2\u00bc\u00be\3\2\2\2\u00bd\u00b7\3\2\2\2\u00bd\u00be")
        buf.write("\3\2\2\2\u00be\13\3\2\2\2\u00bf\u00c1\5\36\20\2\u00c0")
        buf.write("\u00bf\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00c2\3\2\2\2")
        buf.write("\u00c2\u00cd\5.\30\2\u00c3\u00c4\7o\2\2\u00c4\u00c5\7")
        buf.write("*\2\2\u00c5\u00ca\5\"\22\2\u00c6\u00c7\7\7\2\2\u00c7\u00c9")
        buf.write("\5\"\22\2\u00c8\u00c6\3\2\2\2\u00c9\u00cc\3\2\2\2\u00ca")
        buf.write("\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00ce\3\2\2\2")
        buf.write("\u00cc\u00ca\3\2\2\2\u00cd\u00c3\3\2\2\2\u00cd\u00ce\3")
        buf.write("\2\2\2\u00ce\u00d5\3\2\2\2\u00cf\u00d0\7d\2\2\u00d0\u00d3")
        buf.write("\5\34\17\2\u00d1\u00d2\t\2\2\2\u00d2\u00d4\5\34\17\2\u00d3")
        buf.write("\u00d1\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d6\3\2\2\2")
        buf.write("\u00d5\u00cf\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\r\3\2\2")
        buf.write("\2\u00d7\u00d9\5\36\20\2\u00d8\u00d7\3\2\2\2\u00d8\u00d9")
        buf.write("\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00e0\5\20\t\2\u00db")
        buf.write("\u00dc\5\60\31\2\u00dc\u00dd\5\20\t\2\u00dd\u00df\3\2")
        buf.write("\2\2\u00de\u00db\3\2\2\2\u00df\u00e2\3\2\2\2\u00e0\u00de")
        buf.write("\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00ed\3\2\2\2\u00e2")
        buf.write("\u00e0\3\2\2\2\u00e3\u00e4\7o\2\2\u00e4\u00e5\7*\2\2\u00e5")
        buf.write("\u00ea\5\"\22\2\u00e6\u00e7\7\7\2\2\u00e7\u00e9\5\"\22")
        buf.write("\2\u00e8\u00e6\3\2\2\2\u00e9\u00ec\3\2\2\2\u00ea\u00e8")
        buf.write("\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec")
        buf.write("\u00ea\3\2\2\2\u00ed\u00e3\3\2\2\2\u00ed\u00ee\3\2\2\2")
        buf.write("\u00ee\u00f5\3\2\2\2\u00ef\u00f0\7d\2\2\u00f0\u00f3\5")
        buf.write("\34\17\2\u00f1\u00f2\t\2\2\2\u00f2\u00f4\5\34\17\2\u00f3")
        buf.write("\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f6\3\2\2\2")
        buf.write("\u00f5\u00ef\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\17\3\2")
        buf.write("\2\2\u00f7\u00f9\7\u0082\2\2\u00f8\u00fa\t\3\2\2\u00f9")
        buf.write("\u00f8\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fb\3\2\2\2")
        buf.write("\u00fb\u0100\5$\23\2\u00fc\u00fd\7\7\2\2\u00fd\u00ff\5")
        buf.write("$\23\2\u00fe\u00fc\3\2\2\2\u00ff\u0102\3\2\2\2\u0100\u00fe")
        buf.write("\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u010f\3\2\2\2\u0102")
        buf.write("\u0100\3\2\2\2\u0103\u010d\7M\2\2\u0104\u0109\5&\24\2")
        buf.write("\u0105\u0106\7\7\2\2\u0106\u0108\5&\24\2\u0107\u0105\3")
        buf.write("\2\2\2\u0108\u010b\3\2\2\2\u0109\u0107\3\2\2\2\u0109\u010a")
        buf.write("\3\2\2\2\u010a\u010e\3\2\2\2\u010b\u0109\3\2\2\2\u010c")
        buf.write("\u010e\5(\25\2\u010d\u0104\3\2\2\2\u010d\u010c\3\2\2\2")
        buf.write("\u010e\u0110\3\2\2\2\u010f\u0103\3\2\2\2\u010f\u0110\3")
        buf.write("\2\2\2\u0110\u0113\3\2\2\2\u0111\u0112\7\u0094\2\2\u0112")
        buf.write("\u0114\5\34\17\2\u0113\u0111\3\2\2\2\u0113\u0114\3\2\2")
        buf.write("\2\u0114\u0123\3\2\2\2\u0115\u0116\7P\2\2\u0116\u0117")
        buf.write("\7*\2\2\u0117\u011c\5\34\17\2\u0118\u0119\7\7\2\2\u0119")
        buf.write("\u011b\5\34\17\2\u011a\u0118\3\2\2\2\u011b\u011e\3\2\2")
        buf.write("\2\u011c\u011a\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u0121")
        buf.write("\3\2\2\2\u011e\u011c\3\2\2\2\u011f\u0120\7Q\2\2\u0120")
        buf.write("\u0122\5\34\17\2\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2")
        buf.write("\2\u0122\u0124\3\2\2\2\u0123\u0115\3\2\2\2\u0123\u0124")
        buf.write("\3\2\2\2\u0124\u0142\3\2\2\2\u0125\u0126\7\u0090\2\2\u0126")
        buf.write("\u0127\7\5\2\2\u0127\u012c\5\34\17\2\u0128\u0129\7\7\2")
        buf.write("\2\u0129\u012b\5\34\17\2\u012a\u0128\3\2\2\2\u012b\u012e")
        buf.write("\3\2\2\2\u012c\u012a\3\2\2\2\u012c\u012d\3\2\2\2\u012d")
        buf.write("\u012f\3\2\2\2\u012e\u012c\3\2\2\2\u012f\u013e\7\6\2\2")
        buf.write("\u0130\u0131\7\7\2\2\u0131\u0132\7\5\2\2\u0132\u0137\5")
        buf.write("\34\17\2\u0133\u0134\7\7\2\2\u0134\u0136\5\34\17\2\u0135")
        buf.write("\u0133\3\2\2\2\u0136\u0139\3\2\2\2\u0137\u0135\3\2\2\2")
        buf.write("\u0137\u0138\3\2\2\2\u0138\u013a\3\2\2\2\u0139\u0137\3")
        buf.write("\2\2\2\u013a\u013b\7\6\2\2\u013b\u013d\3\2\2\2\u013c\u0130")
        buf.write("\3\2\2\2\u013d\u0140\3\2\2\2\u013e\u013c\3\2\2\2\u013e")
        buf.write("\u013f\3\2\2\2\u013f\u0142\3\2\2\2\u0140\u013e\3\2\2\2")
        buf.write("\u0141\u00f7\3\2\2\2\u0141\u0125\3\2\2\2\u0142\21\3\2")
        buf.write("\2\2\u0143\u0144\7\u008f\2\2\u0144\23\3\2\2\2\u0145\u0147")
        buf.write("\5\36\20\2\u0146\u0145\3\2\2\2\u0146\u0147\3\2\2\2\u0147")
        buf.write("\u0148\3\2\2\2\u0148\u0153\7\u008d\2\2\u0149\u014a\7n")
        buf.write("\2\2\u014a\u0154\7\177\2\2\u014b\u014c\7n\2\2\u014c\u0154")
        buf.write("\7\33\2\2\u014d\u014e\7n\2\2\u014e\u0154\7|\2\2\u014f")
        buf.write("\u0150\7n\2\2\u0150\u0154\7J\2\2\u0151\u0152\7n\2\2\u0152")
        buf.write("\u0154\7S\2\2\u0153\u0149\3\2\2\2\u0153\u014b\3\2\2\2")
        buf.write("\u0153\u014d\3\2\2\2\u0153\u014f\3\2\2\2\u0153\u0151\3")
        buf.write("\2\2\2\u0153\u0154\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0156")
        buf.write("\5\32\16\2\u0156\u0157\7\u0083\2\2\u0157\u0158\5F$\2\u0158")
        buf.write("\u0159\7\b\2\2\u0159\u0161\5\34\17\2\u015a\u015b\7\7\2")
        buf.write("\2\u015b\u015c\5F$\2\u015c\u015d\7\b\2\2\u015d\u015e\5")
        buf.write("\34\17\2\u015e\u0160\3\2\2\2\u015f\u015a\3\2\2\2\u0160")
        buf.write("\u0163\3\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2")
        buf.write("\u0162\u0166\3\2\2\2\u0163\u0161\3\2\2\2\u0164\u0165\7")
        buf.write("\u0094\2\2\u0165\u0167\5\34\17\2\u0166\u0164\3\2\2\2\u0166")
        buf.write("\u0167\3\2\2\2\u0167\25\3\2\2\2\u0168\u016a\5\36\20\2")
        buf.write("\u0169\u0168\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016b\3")
        buf.write("\2\2\2\u016b\u0176\7\u008d\2\2\u016c\u016d\7n\2\2\u016d")
        buf.write("\u0177\7\177\2\2\u016e\u016f\7n\2\2\u016f\u0177\7\33\2")
        buf.write("\2\u0170\u0171\7n\2\2\u0171\u0177\7|\2\2\u0172\u0173\7")
        buf.write("n\2\2\u0173\u0177\7J\2\2\u0174\u0175\7n\2\2\u0175\u0177")
        buf.write("\7S\2\2\u0176\u016c\3\2\2\2\u0176\u016e\3\2\2\2\u0176")
        buf.write("\u0170\3\2\2\2\u0176\u0172\3\2\2\2\u0176\u0174\3\2\2\2")
        buf.write("\u0176\u0177\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\5")
        buf.write("\32\16\2\u0179\u017a\7\u0083\2\2\u017a\u017b\5F$\2\u017b")
        buf.write("\u017c\7\b\2\2\u017c\u0184\5\34\17\2\u017d\u017e\7\7\2")
        buf.write("\2\u017e\u017f\5F$\2\u017f\u0180\7\b\2\2\u0180\u0181\5")
        buf.write("\34\17\2\u0181\u0183\3\2\2\2\u0182\u017d\3\2\2\2\u0183")
        buf.write("\u0186\3\2\2\2\u0184\u0182\3\2\2\2\u0184\u0185\3\2\2\2")
        buf.write("\u0185\u0189\3\2\2\2\u0186\u0184\3\2\2\2\u0187\u0188\7")
        buf.write("\u0094\2\2\u0188\u018a\5\34\17\2\u0189\u0187\3\2\2\2\u0189")
        buf.write("\u018a\3\2\2\2\u018a\u019d\3\2\2\2\u018b\u018c\7o\2\2")
        buf.write("\u018c\u018d\7*\2\2\u018d\u0192\5\"\22\2\u018e\u018f\7")
        buf.write("\7\2\2\u018f\u0191\5\"\22\2\u0190\u018e\3\2\2\2\u0191")
        buf.write("\u0194\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0193\3\2\2\2")
        buf.write("\u0193\u0196\3\2\2\2\u0194\u0192\3\2\2\2\u0195\u018b\3")
        buf.write("\2\2\2\u0195\u0196\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198")
        buf.write("\7d\2\2\u0198\u019b\5\34\17\2\u0199\u019a\t\2\2\2\u019a")
        buf.write("\u019c\5\34\17\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2")
        buf.write("\2\u019c\u019e\3\2\2\2\u019d\u0195\3\2\2\2\u019d\u019e")
        buf.write("\3\2\2\2\u019e\27\3\2\2\2\u019f\u01a1\5\36\20\2\u01a0")
        buf.write("\u019f\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01b3\3\2\2\2")
        buf.write("\u01a2\u01b4\7Z\2\2\u01a3\u01b4\7|\2\2\u01a4\u01a5\7Z")
        buf.write("\2\2\u01a5\u01a6\7n\2\2\u01a6\u01b4\7|\2\2\u01a7\u01a8")
        buf.write("\7Z\2\2\u01a8\u01a9\7n\2\2\u01a9\u01b4\7\177\2\2\u01aa")
        buf.write("\u01ab\7Z\2\2\u01ab\u01ac\7n\2\2\u01ac\u01b4\7\33\2\2")
        buf.write("\u01ad\u01ae\7Z\2\2\u01ae\u01af\7n\2\2\u01af\u01b4\7J")
        buf.write("\2\2\u01b0\u01b1\7Z\2\2\u01b1\u01b2\7n\2\2\u01b2\u01b4")
        buf.write("\7S\2\2\u01b3\u01a2\3\2\2\2\u01b3\u01a3\3\2\2\2\u01b3")
        buf.write("\u01a4\3\2\2\2\u01b3\u01a7\3\2\2\2\u01b3\u01aa\3\2\2\2")
        buf.write("\u01b3\u01ad\3\2\2\2\u01b3\u01b0\3\2\2\2\u01b4\u01b5\3")
        buf.write("\2\2\2\u01b5\u01b9\7]\2\2\u01b6\u01b7\5> \2\u01b7\u01b8")
        buf.write("\7\4\2\2\u01b8\u01ba\3\2\2\2\u01b9\u01b6\3\2\2\2\u01b9")
        buf.write("\u01ba\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01c7\5D#\2\u01bc")
        buf.write("\u01bd\7\5\2\2\u01bd\u01c2\5F$\2\u01be\u01bf\7\7\2\2\u01bf")
        buf.write("\u01c1\5F$\2\u01c0\u01be\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2")
        buf.write("\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c5\3\2\2\2")
        buf.write("\u01c4\u01c2\3\2\2\2\u01c5\u01c6\7\6\2\2\u01c6\u01c8\3")
        buf.write("\2\2\2\u01c7\u01bc\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01e8")
        buf.write("\3\2\2\2\u01c9\u01ca\7\u0090\2\2\u01ca\u01cb\7\5\2\2\u01cb")
        buf.write("\u01d0\5\34\17\2\u01cc\u01cd\7\7\2\2\u01cd\u01cf\5\34")
        buf.write("\17\2\u01ce\u01cc\3\2\2\2\u01cf\u01d2\3\2\2\2\u01d0\u01ce")
        buf.write("\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d3\3\2\2\2\u01d2")
        buf.write("\u01d0\3\2\2\2\u01d3\u01e2\7\6\2\2\u01d4\u01d5\7\7\2\2")
        buf.write("\u01d5\u01d6\7\5\2\2\u01d6\u01db\5\34\17\2\u01d7\u01d8")
        buf.write("\7\7\2\2\u01d8\u01da\5\34\17\2\u01d9\u01d7\3\2\2\2\u01da")
        buf.write("\u01dd\3\2\2\2\u01db\u01d9\3\2\2\2\u01db\u01dc\3\2\2\2")
        buf.write("\u01dc\u01de\3\2\2\2\u01dd\u01db\3\2\2\2\u01de\u01df\7")
        buf.write("\6\2\2\u01df\u01e1\3\2\2\2\u01e0\u01d4\3\2\2\2\u01e1\u01e4")
        buf.write("\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3")
        buf.write("\u01e9\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e5\u01e9\5\16\b")
        buf.write("\2\u01e6\u01e7\7:\2\2\u01e7\u01e9\7\u0090\2\2\u01e8\u01c9")
        buf.write("\3\2\2\2\u01e8\u01e5\3\2\2\2\u01e8\u01e6\3\2\2\2\u01e9")
        buf.write("\31\3\2\2\2\u01ea\u01eb\5> \2\u01eb\u01ec\7\4\2\2\u01ec")
        buf.write("\u01ee\3\2\2\2\u01ed\u01ea\3\2\2\2\u01ed\u01ee\3\2\2\2")
        buf.write("\u01ee\u01ef\3\2\2\2\u01ef\u01f5\5D#\2\u01f0\u01f1\7W")
        buf.write("\2\2\u01f1\u01f2\7*\2\2\u01f2\u01f6\5J&\2\u01f3\u01f4")
        buf.write("\7h\2\2\u01f4\u01f6\7W\2\2\u01f5\u01f0\3\2\2\2\u01f5\u01f3")
        buf.write("\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\33\3\2\2\2\u01f7\u01f8")
        buf.write("\b\17\1\2\u01f8\u022a\5\64\33\2\u01f9\u022a\7\u0099\2")
        buf.write("\2\u01fa\u01fb\5> \2\u01fb\u01fc\7\4\2\2\u01fc\u01fe\3")
        buf.write("\2\2\2\u01fd\u01fa\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u01ff")
        buf.write("\3\2\2\2\u01ff\u0200\5D#\2\u0200\u0201\7\4\2\2\u0201\u0203")
        buf.write("\3\2\2\2\u0202\u01fd\3\2\2\2\u0202\u0203\3\2\2\2\u0203")
        buf.write("\u0204\3\2\2\2\u0204\u022a\5F$\2\u0205\u0206\5\66\34\2")
        buf.write("\u0206\u0207\5\34\17\24\u0207\u022a\3\2\2\2\u0208\u0209")
        buf.write("\7\5\2\2\u0209\u020a\5\34\17\2\u020a\u020b\7\6\2\2\u020b")
        buf.write("\u022a\3\2\2\2\u020c\u020e\7h\2\2\u020d\u020c\3\2\2\2")
        buf.write("\u020d\u020e\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0211\7")
        buf.write("H\2\2\u0210\u020d\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0212")
        buf.write("\3\2\2\2\u0212\u0213\7\5\2\2\u0213\u0214\5\16\b\2\u0214")
        buf.write("\u0215\7\6\2\2\u0215\u022a\3\2\2\2\u0216\u0218\7,\2\2")
        buf.write("\u0217\u0219\5\34\17\2\u0218\u0217\3\2\2\2\u0218\u0219")
        buf.write("\3\2\2\2\u0219\u021f\3\2\2\2\u021a\u021b\7\u0093\2\2\u021b")
        buf.write("\u021c\5\34\17\2\u021c\u021d\7\u0087\2\2\u021d\u021e\5")
        buf.write("\34\17\2\u021e\u0220\3\2\2\2\u021f\u021a\3\2\2\2\u0220")
        buf.write("\u0221\3\2\2\2\u0221\u021f\3\2\2\2\u0221\u0222\3\2\2\2")
        buf.write("\u0222\u0225\3\2\2\2\u0223\u0224\7C\2\2\u0224\u0226\5")
        buf.write("\34\17\2\u0225\u0223\3\2\2\2\u0225\u0226\3\2\2\2\u0226")
        buf.write("\u0227\3\2\2\2\u0227\u0228\7D\2\2\u0228\u022a\3\2\2\2")
        buf.write("\u0229\u01f7\3\2\2\2\u0229\u01f9\3\2\2\2\u0229\u0202\3")
        buf.write("\2\2\2\u0229\u0205\3\2\2\2\u0229\u0208\3\2\2\2\u0229\u0210")
        buf.write("\3\2\2\2\u0229\u0216\3\2\2\2\u022a\u0282\3\2\2\2\u022b")
        buf.write("\u022c\f\23\2\2\u022c\u022d\7\r\2\2\u022d\u0281\5\34\17")
        buf.write("\24\u022e\u022f\f\22\2\2\u022f\u0230\t\4\2\2\u0230\u0281")
        buf.write("\5\34\17\23\u0231\u0232\f\21\2\2\u0232\u0233\t\5\2\2\u0233")
        buf.write("\u0281\5\34\17\22\u0234\u0235\f\20\2\2\u0235\u0236\t\6")
        buf.write("\2\2\u0236\u0281\5\34\17\21\u0237\u0238\f\17\2\2\u0238")
        buf.write("\u0239\t\7\2\2\u0239\u0281\5\34\17\20\u023a\u023b\f\16")
        buf.write("\2\2\u023b\u023c\t\b\2\2\u023c\u0281\5\34\17\17\u023d")
        buf.write("\u023e\f\f\2\2\u023e\u023f\7\"\2\2\u023f\u0281\5\34\17")
        buf.write("\r\u0240\u0241\f\13\2\2\u0241\u0242\7n\2\2\u0242\u0281")
        buf.write("\5\34\17\f\u0243\u0244\f\6\2\2\u0244\u0246\7^\2\2\u0245")
        buf.write("\u0247\7h\2\2\u0246\u0245\3\2\2\2\u0246\u0247\3\2\2\2")
        buf.write("\u0247\u0248\3\2\2\2\u0248\u0281\5\34\17\7\u0249\u024b")
        buf.write("\f\5\2\2\u024a\u024c\7h\2\2\u024b\u024a\3\2\2\2\u024b")
        buf.write("\u024c\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024e\7)\2\2")
        buf.write("\u024e\u024f\5\34\17\2\u024f\u0250\7\"\2\2\u0250\u0251")
        buf.write("\5\34\17\6\u0251\u0281\3\2\2\2\u0252\u0254\f\r\2\2\u0253")
        buf.write("\u0255\7h\2\2\u0254\u0253\3\2\2\2\u0254\u0255\3\2\2\2")
        buf.write("\u0255\u0256\3\2\2\2\u0256\u026a\7U\2\2\u0257\u0261\7")
        buf.write("\5\2\2\u0258\u0262\5\16\b\2\u0259\u025e\5\34\17\2\u025a")
        buf.write("\u025b\7\7\2\2\u025b\u025d\5\34\17\2\u025c\u025a\3\2\2")
        buf.write("\2\u025d\u0260\3\2\2\2\u025e\u025c\3\2\2\2\u025e\u025f")
        buf.write("\3\2\2\2\u025f\u0262\3\2\2\2\u0260\u025e\3\2\2\2\u0261")
        buf.write("\u0258\3\2\2\2\u0261\u0259\3\2\2\2\u0261\u0262\3\2\2\2")
        buf.write("\u0262\u0263\3\2\2\2\u0263\u026b\7\6\2\2\u0264\u0265\5")
        buf.write("> \2\u0265\u0266\7\4\2\2\u0266\u0268\3\2\2\2\u0267\u0264")
        buf.write("\3\2\2\2\u0267\u0268\3\2\2\2\u0268\u0269\3\2\2\2\u0269")
        buf.write("\u026b\5D#\2\u026a\u0257\3\2\2\2\u026a\u0267\3\2\2\2\u026b")
        buf.write("\u0281\3\2\2\2\u026c\u026d\f\t\2\2\u026d\u026e\7/\2\2")
        buf.write("\u026e\u0281\5H%\2\u026f\u0271\f\b\2\2\u0270\u0272\7h")
        buf.write("\2\2\u0271\u0270\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0273")
        buf.write("\3\2\2\2\u0273\u0274\t\t\2\2\u0274\u0277\5\34\17\2\u0275")
        buf.write("\u0276\7E\2\2\u0276\u0278\5\34\17\2\u0277\u0275\3\2\2")
        buf.write("\2\u0277\u0278\3\2\2\2\u0278\u0281\3\2\2\2\u0279\u027e")
        buf.write("\f\7\2\2\u027a\u027f\7_\2\2\u027b\u027f\7i\2\2\u027c\u027d")
        buf.write("\7h\2\2\u027d\u027f\7j\2\2\u027e\u027a\3\2\2\2\u027e\u027b")
        buf.write("\3\2\2\2\u027e\u027c\3\2\2\2\u027f\u0281\3\2\2\2\u0280")
        buf.write("\u022b\3\2\2\2\u0280\u022e\3\2\2\2\u0280\u0231\3\2\2\2")
        buf.write("\u0280\u0234\3\2\2\2\u0280\u0237\3\2\2\2\u0280\u023a\3")
        buf.write("\2\2\2\u0280\u023d\3\2\2\2\u0280\u0240\3\2\2\2\u0280\u0243")
        buf.write("\3\2\2\2\u0280\u0249\3\2\2\2\u0280\u0252\3\2\2\2\u0280")
        buf.write("\u026c\3\2\2\2\u0280\u026f\3\2\2\2\u0280\u0279\3\2\2\2")
        buf.write("\u0281\u0284\3\2\2\2\u0282\u0280\3\2\2\2\u0282\u0283\3")
        buf.write("\2\2\2\u0283\35\3\2\2\2\u0284\u0282\3\2\2\2\u0285\u0287")
        buf.write("\7\u0095\2\2\u0286\u0288\7v\2\2\u0287\u0286\3\2\2\2\u0287")
        buf.write("\u0288\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028e\5 \21\2")
        buf.write("\u028a\u028b\7\7\2\2\u028b\u028d\5 \21\2\u028c\u028a\3")
        buf.write("\2\2\2\u028d\u0290\3\2\2\2\u028e\u028c\3\2\2\2\u028e\u028f")
        buf.write("\3\2\2\2\u028f\37\3\2\2\2\u0290\u028e\3\2\2\2\u0291\u029d")
        buf.write("\5D#\2\u0292\u0293\7\5\2\2\u0293\u0298\5F$\2\u0294\u0295")
        buf.write("\7\7\2\2\u0295\u0297\5F$\2\u0296\u0294\3\2\2\2\u0297\u029a")
        buf.write("\3\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299\3\2\2\2\u0299")
        buf.write("\u029b\3\2\2\2\u029a\u0298\3\2\2\2\u029b\u029c\7\6\2\2")
        buf.write("\u029c\u029e\3\2\2\2\u029d\u0292\3\2\2\2\u029d\u029e\3")
        buf.write("\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\7#\2\2\u02a0\u02a1")
        buf.write("\7\5\2\2\u02a1\u02a2\5\16\b\2\u02a2\u02a3\7\6\2\2\u02a3")
        buf.write("!\3\2\2\2\u02a4\u02a7\5\34\17\2\u02a5\u02a6\7/\2\2\u02a6")
        buf.write("\u02a8\5H%\2\u02a7\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8")
        buf.write("\u02aa\3\2\2\2\u02a9\u02ab\t\n\2\2\u02aa\u02a9\3\2\2\2")
        buf.write("\u02aa\u02ab\3\2\2\2\u02ab#\3\2\2\2\u02ac\u02b9\7\t\2")
        buf.write("\2\u02ad\u02ae\5D#\2\u02ae\u02af\7\4\2\2\u02af\u02b0\7")
        buf.write("\t\2\2\u02b0\u02b9\3\2\2\2\u02b1\u02b6\5\34\17\2\u02b2")
        buf.write("\u02b4\7#\2\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4\3\2\2\2")
        buf.write("\u02b4\u02b5\3\2\2\2\u02b5\u02b7\58\35\2\u02b6\u02b3\3")
        buf.write("\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b9\3\2\2\2\u02b8\u02ac")
        buf.write("\3\2\2\2\u02b8\u02ad\3\2\2\2\u02b8\u02b1\3\2\2\2\u02b9")
        buf.write("%\3\2\2\2\u02ba\u02bb\5@!\2\u02bb\u02bc\7\4\2\2\u02bc")
        buf.write("\u02be\3\2\2\2\u02bd\u02ba\3\2\2\2\u02bd\u02be\3\2\2\2")
        buf.write("\u02be\u02bf\3\2\2\2\u02bf\u02c4\5D#\2\u02c0\u02c2\7#")
        buf.write("\2\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02c3")
        buf.write("\3\2\2\2\u02c3\u02c5\5L\'\2\u02c4\u02c1\3\2\2\2\u02c4")
        buf.write("\u02c5\3\2\2\2\u02c5\u02cb\3\2\2\2\u02c6\u02c7\7W\2\2")
        buf.write("\u02c7\u02c8\7*\2\2\u02c8\u02cc\5J&\2\u02c9\u02ca\7h\2")
        buf.write("\2\u02ca\u02cc\7W\2\2\u02cb\u02c6\3\2\2\2\u02cb\u02c9")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02fd\3\2\2\2\u02cd")
        buf.write("\u02ce\5@!\2\u02ce\u02cf\7\4\2\2\u02cf\u02d1\3\2\2\2\u02d0")
        buf.write("\u02cd\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d2\3\2\2\2")
        buf.write("\u02d2\u02d3\5B\"\2\u02d3\u02dc\7\5\2\2\u02d4\u02d9\5")
        buf.write("\34\17\2\u02d5\u02d6\7\7\2\2\u02d6\u02d8\5\34\17\2\u02d7")
        buf.write("\u02d5\3\2\2\2\u02d8\u02db\3\2\2\2\u02d9\u02d7\3\2\2\2")
        buf.write("\u02d9\u02da\3\2\2\2\u02da\u02dd\3\2\2\2\u02db\u02d9\3")
        buf.write("\2\2\2\u02dc\u02d4\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02de")
        buf.write("\3\2\2\2\u02de\u02e3\7\6\2\2\u02df\u02e1\7#\2\2\u02e0")
        buf.write("\u02df\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e2\3\2\2\2")
        buf.write("\u02e2\u02e4\5L\'\2\u02e3\u02e0\3\2\2\2\u02e3\u02e4\3")
        buf.write("\2\2\2\u02e4\u02fd\3\2\2\2\u02e5\u02ef\7\5\2\2\u02e6\u02eb")
        buf.write("\5&\24\2\u02e7\u02e8\7\7\2\2\u02e8\u02ea\5&\24\2\u02e9")
        buf.write("\u02e7\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb\u02e9\3\2\2\2")
        buf.write("\u02eb\u02ec\3\2\2\2\u02ec\u02f0\3\2\2\2\u02ed\u02eb\3")
        buf.write("\2\2\2\u02ee\u02f0\5(\25\2\u02ef\u02e6\3\2\2\2\u02ef\u02ee")
        buf.write("\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f2\7\6\2\2\u02f2")
        buf.write("\u02fd\3\2\2\2\u02f3\u02f4\7\5\2\2\u02f4\u02f5\5\16\b")
        buf.write("\2\u02f5\u02fa\7\6\2\2\u02f6\u02f8\7#\2\2\u02f7\u02f6")
        buf.write("\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9")
        buf.write("\u02fb\5L\'\2\u02fa\u02f7\3\2\2\2\u02fa\u02fb\3\2\2\2")
        buf.write("\u02fb\u02fd\3\2\2\2\u02fc\u02bd\3\2\2\2\u02fc\u02d0\3")
        buf.write("\2\2\2\u02fc\u02e5\3\2\2\2\u02fc\u02f3\3\2\2\2\u02fd\'")
        buf.write("\3\2\2\2\u02fe\u0305\5&\24\2\u02ff\u0300\5*\26\2\u0300")
        buf.write("\u0301\5&\24\2\u0301\u0302\5,\27\2\u0302\u0304\3\2\2\2")
        buf.write("\u0303\u02ff\3\2\2\2\u0304\u0307\3\2\2\2\u0305\u0303\3")
        buf.write("\2\2\2\u0305\u0306\3\2\2\2\u0306)\3\2\2\2\u0307\u0305")
        buf.write("\3\2\2\2\u0308\u0316\7\7\2\2\u0309\u030b\7f\2\2\u030a")
        buf.write("\u0309\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u0312\3\2\2\2")
        buf.write("\u030c\u030e\7b\2\2\u030d\u030f\7p\2\2\u030e\u030d\3\2")
        buf.write("\2\2\u030e\u030f\3\2\2\2\u030f\u0313\3\2\2\2\u0310\u0313")
        buf.write("\7Y\2\2\u0311\u0313\7\65\2\2\u0312\u030c\3\2\2\2\u0312")
        buf.write("\u0310\3\2\2\2\u0312\u0311\3\2\2\2\u0312\u0313\3\2\2\2")
        buf.write("\u0313\u0314\3\2\2\2\u0314\u0316\7`\2\2\u0315\u0308\3")
        buf.write("\2\2\2\u0315\u030a\3\2\2\2\u0316+\3\2\2\2\u0317\u0318")
        buf.write("\7m\2\2\u0318\u0326\5\34\17\2\u0319\u031a\7\u008e\2\2")
        buf.write("\u031a\u031b\7\5\2\2\u031b\u0320\5F$\2\u031c\u031d\7\7")
        buf.write("\2\2\u031d\u031f\5F$\2\u031e\u031c\3\2\2\2\u031f\u0322")
        buf.write("\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321")
        buf.write("\u0323\3\2\2\2\u0322\u0320\3\2\2\2\u0323\u0324\7\6\2\2")
        buf.write("\u0324\u0326\3\2\2\2\u0325\u0317\3\2\2\2\u0325\u0319\3")
        buf.write("\2\2\2\u0325\u0326\3\2\2\2\u0326-\3\2\2\2\u0327\u0329")
        buf.write("\7\u0082\2\2\u0328\u032a\t\3\2\2\u0329\u0328\3\2\2\2\u0329")
        buf.write("\u032a\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u0330\5$\23\2")
        buf.write("\u032c\u032d\7\7\2\2\u032d\u032f\5$\23\2\u032e\u032c\3")
        buf.write("\2\2\2\u032f\u0332\3\2\2\2\u0330\u032e\3\2\2\2\u0330\u0331")
        buf.write("\3\2\2\2\u0331\u033f\3\2\2\2\u0332\u0330\3\2\2\2\u0333")
        buf.write("\u033d\7M\2\2\u0334\u0339\5&\24\2\u0335\u0336\7\7\2\2")
        buf.write("\u0336\u0338\5&\24\2\u0337\u0335\3\2\2\2\u0338\u033b\3")
        buf.write("\2\2\2\u0339\u0337\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033e")
        buf.write("\3\2\2\2\u033b\u0339\3\2\2\2\u033c\u033e\5(\25\2\u033d")
        buf.write("\u0334\3\2\2\2\u033d\u033c\3\2\2\2\u033e\u0340\3\2\2\2")
        buf.write("\u033f\u0333\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0343\3")
        buf.write("\2\2\2\u0341\u0342\7\u0094\2\2\u0342\u0344\5\34\17\2\u0343")
        buf.write("\u0341\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0353\3\2\2\2")
        buf.write("\u0345\u0346\7P\2\2\u0346\u0347\7*\2\2\u0347\u034c\5\34")
        buf.write("\17\2\u0348\u0349\7\7\2\2\u0349\u034b\5\34\17\2\u034a")
        buf.write("\u0348\3\2\2\2\u034b\u034e\3\2\2\2\u034c\u034a\3\2\2\2")
        buf.write("\u034c\u034d\3\2\2\2\u034d\u0351\3\2\2\2\u034e\u034c\3")
        buf.write("\2\2\2\u034f\u0350\7Q\2\2\u0350\u0352\5\34\17\2\u0351")
        buf.write("\u034f\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0354\3\2\2\2")
        buf.write("\u0353\u0345\3\2\2\2\u0353\u0354\3\2\2\2\u0354/\3\2\2")
        buf.write("\2\u0355\u035b\7\u008b\2\2\u0356\u0357\7\u008b\2\2\u0357")
        buf.write("\u035b\7\37\2\2\u0358\u035b\7\\\2\2\u0359\u035b\7F\2\2")
        buf.write("\u035a\u0355\3\2\2\2\u035a\u0356\3\2\2\2\u035a\u0358\3")
        buf.write("\2\2\2\u035a\u0359\3\2\2\2\u035b\61\3\2\2\2\u035c\u035e")
        buf.write("\t\5\2\2\u035d\u035c\3\2\2\2\u035d\u035e\3\2\2\2\u035e")
        buf.write("\u035f\3\2\2\2\u035f\u0360\7\u0098\2\2\u0360\63\3\2\2")
        buf.write("\2\u0361\u0362\t\13\2\2\u0362\65\3\2\2\2\u0363\u0364\t")
        buf.write("\f\2\2\u0364\67\3\2\2\2\u0365\u0366\t\r\2\2\u03669\3\2")
        buf.write("\2\2\u0367\u0368\t\16\2\2\u0368;\3\2\2\2\u0369\u036a\5")
        buf.write("N(\2\u036a=\3\2\2\2\u036b\u036c\5N(\2\u036c?\3\2\2\2\u036d")
        buf.write("\u036e\5N(\2\u036eA\3\2\2\2\u036f\u0370\5N(\2\u0370C\3")
        buf.write("\2\2\2\u0371\u0372\5N(\2\u0372E\3\2\2\2\u0373\u0374\5")
        buf.write("N(\2\u0374G\3\2\2\2\u0375\u0376\5N(\2\u0376I\3\2\2\2\u0377")
        buf.write("\u0378\5N(\2\u0378K\3\2\2\2\u0379\u0380\7\u0097\2\2\u037a")
        buf.write("\u0380\7\u009a\2\2\u037b\u037c\7\5\2\2\u037c\u037d\5L")
        buf.write("\'\2\u037d\u037e\7\6\2\2\u037e\u0380\3\2\2\2\u037f\u0379")
        buf.write("\3\2\2\2\u037f\u037a\3\2\2\2\u037f\u037b\3\2\2\2\u0380")
        buf.write("M\3\2\2\2\u0381\u0389\7\u0097\2\2\u0382\u0389\5:\36\2")
        buf.write("\u0383\u0389\7\u009a\2\2\u0384\u0385\7\5\2\2\u0385\u0386")
        buf.write("\5N(\2\u0386\u0387\7\6\2\2\u0387\u0389\3\2\2\2\u0388\u0381")
        buf.write("\3\2\2\2\u0388\u0382\3\2\2\2\u0388\u0383\3\2\2\2\u0388")
        buf.write("\u0384\3\2\2\2\u0389O\3\2\2\2\u0084S[bgmx{\u0080\u0084")
        buf.write("\u0089\u0092\u0095\u009b\u009d\u00a0\u00a8\u00b2\u00b5")
        buf.write("\u00bb\u00bd\u00c0\u00ca\u00cd\u00d3\u00d5\u00d8\u00e0")
        buf.write("\u00ea\u00ed\u00f3\u00f5\u00f9\u0100\u0109\u010d\u010f")
        buf.write("\u0113\u011c\u0121\u0123\u012c\u0137\u013e\u0141\u0146")
        buf.write("\u0153\u0161\u0166\u0169\u0176\u0184\u0189\u0192\u0195")
        buf.write("\u019b\u019d\u01a0\u01b3\u01b9\u01c2\u01c7\u01d0\u01db")
        buf.write("\u01e2\u01e8\u01ed\u01f5\u01fd\u0202\u020d\u0210\u0218")
        buf.write("\u0221\u0225\u0229\u0246\u024b\u0254\u025e\u0261\u0267")
        buf.write("\u026a\u0271\u0277\u027e\u0280\u0282\u0287\u028e\u0298")
        buf.write("\u029d\u02a7\u02aa\u02b3\u02b6\u02b8\u02bd\u02c1\u02c4")
        buf.write("\u02cb\u02d0\u02d9\u02dc\u02e0\u02e3\u02eb\u02ef\u02f7")
        buf.write("\u02fa\u02fc\u0305\u030a\u030e\u0312\u0315\u0320\u0325")
        buf.write("\u0329\u0330\u0339\u033d\u033f\u0343\u034c\u0351\u0353")
        buf.write("\u035a\u035d\u037f\u0388")
        return buf.getvalue()


class sqlParser ( Parser ):

    grammarFileName = "sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "K_ABORT", "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", 
                      "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", "K_ASC", 
                      "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
                      "K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", 
                      "K_CHECK", "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                      "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                      "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                      "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", 
                      "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH", 
                      "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", 
                      "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
                      "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", 
                      "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX", 
                      "K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", 
                      "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                      "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                      "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                      "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", "K_ORDER", 
                      "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", 
                      "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP", 
                      "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", 
                      "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
                      "K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                      "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION", 
                      "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", 
                      "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
                      "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ]

    RULE_root = 0
    RULE_query_statements_list = 1
    RULE_statement_node = 2
    RULE_compound_select_stmt = 3
    RULE_factored_select_stmt = 4
    RULE_simple_select_stmt = 5
    RULE_select_stmt = 6
    RULE_select_or_values = 7
    RULE_vacuum_stmt = 8
    RULE_update_stmt = 9
    RULE_update_stmt_limited = 10
    RULE_insert_stmt = 11
    RULE_qualified_table_name = 12
    RULE_expr = 13
    RULE_with_clause = 14
    RULE_common_table_expression = 15
    RULE_ordering_term = 16
    RULE_result_column = 17
    RULE_table_or_subquery = 18
    RULE_join_clause = 19
    RULE_join_operator = 20
    RULE_join_constraint = 21
    RULE_select_core = 22
    RULE_compound_operator = 23
    RULE_signed_number = 24
    RULE_literal_value = 25
    RULE_unary_operator = 26
    RULE_column_alias = 27
    RULE_keyword = 28
    RULE_name = 29
    RULE_database_name = 30
    RULE_schema_name = 31
    RULE_table_function_name = 32
    RULE_table_name = 33
    RULE_column_name = 34
    RULE_collation_name = 35
    RULE_index_name = 36
    RULE_table_alias = 37
    RULE_any_name = 38

    ruleNames =  [ "root", "query_statements_list", "statement_node", "compound_select_stmt", 
                   "factored_select_stmt", "simple_select_stmt", "select_stmt", 
                   "select_or_values", "vacuum_stmt", "update_stmt", "update_stmt_limited", 
                   "insert_stmt", "qualified_table_name", "expr", "with_clause", 
                   "common_table_expression", "ordering_term", "result_column", 
                   "table_or_subquery", "join_clause", "join_operator", 
                   "join_constraint", "select_core", "compound_operator", 
                   "signed_number", "literal_value", "unary_operator", "column_alias", 
                   "keyword", "name", "database_name", "schema_name", "table_function_name", 
                   "table_name", "column_name", "collation_name", "index_name", 
                   "table_alias", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ABORT=25
    K_ACTION=26
    K_ADD=27
    K_AFTER=28
    K_ALL=29
    K_ALTER=30
    K_ANALYZE=31
    K_AND=32
    K_AS=33
    K_ASC=34
    K_ATTACH=35
    K_AUTOINCREMENT=36
    K_BEFORE=37
    K_BEGIN=38
    K_BETWEEN=39
    K_BY=40
    K_CASCADE=41
    K_CASE=42
    K_CAST=43
    K_CHECK=44
    K_COLLATE=45
    K_COLUMN=46
    K_COMMIT=47
    K_CONFLICT=48
    K_CONSTRAINT=49
    K_CREATE=50
    K_CROSS=51
    K_CURRENT_DATE=52
    K_CURRENT_TIME=53
    K_CURRENT_TIMESTAMP=54
    K_DATABASE=55
    K_DEFAULT=56
    K_DEFERRABLE=57
    K_DEFERRED=58
    K_DELETE=59
    K_DESC=60
    K_DETACH=61
    K_DISTINCT=62
    K_DROP=63
    K_EACH=64
    K_ELSE=65
    K_END=66
    K_ESCAPE=67
    K_EXCEPT=68
    K_EXCLUSIVE=69
    K_EXISTS=70
    K_EXPLAIN=71
    K_FAIL=72
    K_FOR=73
    K_FOREIGN=74
    K_FROM=75
    K_FULL=76
    K_GLOB=77
    K_GROUP=78
    K_HAVING=79
    K_IF=80
    K_IGNORE=81
    K_IMMEDIATE=82
    K_IN=83
    K_INDEX=84
    K_INDEXED=85
    K_INITIALLY=86
    K_INNER=87
    K_INSERT=88
    K_INSTEAD=89
    K_INTERSECT=90
    K_INTO=91
    K_IS=92
    K_ISNULL=93
    K_JOIN=94
    K_KEY=95
    K_LEFT=96
    K_LIKE=97
    K_LIMIT=98
    K_MATCH=99
    K_NATURAL=100
    K_NO=101
    K_NOT=102
    K_NOTNULL=103
    K_NULL=104
    K_OF=105
    K_OFFSET=106
    K_ON=107
    K_OR=108
    K_ORDER=109
    K_OUTER=110
    K_PLAN=111
    K_PRAGMA=112
    K_PRIMARY=113
    K_QUERY=114
    K_RAISE=115
    K_RECURSIVE=116
    K_REFERENCES=117
    K_REGEXP=118
    K_REINDEX=119
    K_RELEASE=120
    K_RENAME=121
    K_REPLACE=122
    K_RESTRICT=123
    K_RIGHT=124
    K_ROLLBACK=125
    K_ROW=126
    K_SAVEPOINT=127
    K_SELECT=128
    K_SET=129
    K_TABLE=130
    K_TEMP=131
    K_TEMPORARY=132
    K_THEN=133
    K_TO=134
    K_TRANSACTION=135
    K_TRIGGER=136
    K_UNION=137
    K_UNIQUE=138
    K_UPDATE=139
    K_USING=140
    K_VACUUM=141
    K_VALUES=142
    K_VIEW=143
    K_VIRTUAL=144
    K_WHEN=145
    K_WHERE=146
    K_WITH=147
    K_WITHOUT=148
    IDENTIFIER=149
    NUMERIC_LITERAL=150
    BIND_PARAMETER=151
    STRING_LITERAL=152
    BLOB_LITERAL=153
    SINGLE_LINE_COMMENT=154
    MULTILINE_COMMENT=155
    SPACES=156
    UNEXPECTED_CHAR=157

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._query_statements_list = None # Query_statements_listContext
            self.queries = list() # of Query_statements_listContexts

        def EOF(self):
            return self.getToken(sqlParser.EOF, 0)

        def query_statements_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Query_statements_listContext)
            else:
                return self.getTypedRuleContext(sqlParser.Query_statements_listContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = sqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 81
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.SCOL or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (sqlParser.K_INSERT - 88)) | (1 << (sqlParser.K_REPLACE - 88)) | (1 << (sqlParser.K_SELECT - 88)) | (1 << (sqlParser.K_UPDATE - 88)) | (1 << (sqlParser.K_VACUUM - 88)) | (1 << (sqlParser.K_VALUES - 88)) | (1 << (sqlParser.K_WITH - 88)))) != 0):
                self.state = 78
                localctx._query_statements_list = self.query_statements_list()
                localctx.queries.append(localctx._query_statements_list)
                self.state = 83
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 84
            self.match(sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_statements_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._statement_node = None # Statement_nodeContext
            self.query_statements = list() # of Statement_nodeContexts

        def statement_node(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Statement_nodeContext)
            else:
                return self.getTypedRuleContext(sqlParser.Statement_nodeContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.SCOL)
            else:
                return self.getToken(sqlParser.SCOL, i)

        def getRuleIndex(self):
            return sqlParser.RULE_query_statements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_statements_list" ):
                listener.enterQuery_statements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_statements_list" ):
                listener.exitQuery_statements_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_statements_list" ):
                return visitor.visitQuery_statements_list(self)
            else:
                return visitor.visitChildren(self)




    def query_statements_list(self):

        localctx = sqlParser.Query_statements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query_statements_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 89
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.SCOL:
                self.state = 86
                self.match(sqlParser.SCOL)
                self.state = 91
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 92
            localctx._statement_node = self.statement_node()
            localctx.query_statements.append(localctx._statement_node)
            self.state = 101
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 94 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 93
                        self.match(sqlParser.SCOL)
                        self.state = 96 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==sqlParser.SCOL):
                            break

                    self.state = 98
                    localctx._statement_node = self.statement_node()
                    localctx.query_statements.append(localctx._statement_node) 
                self.state = 103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 107
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 104
                    self.match(sqlParser.SCOL) 
                self.state = 109
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nodeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Compound_select_stmtContext,0)


        def factored_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Factored_select_stmtContext,0)


        def simple_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Simple_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(sqlParser.Vacuum_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(sqlParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(sqlParser.Update_stmt_limitedContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(sqlParser.Insert_stmtContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_statement_node

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_node" ):
                listener.enterStatement_node(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_node" ):
                listener.exitStatement_node(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_node" ):
                return visitor.visitStatement_node(self)
            else:
                return visitor.visitChildren(self)




    def statement_node(self):

        localctx = sqlParser.Statement_nodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement_node)
        try:
            self.state = 118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 110
                self.compound_select_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 111
                self.factored_select_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 112
                self.simple_select_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 113
                self.select_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 114
                self.vacuum_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 115
                self.update_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 116
                self.update_stmt_limited()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 117
                self.insert_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_UNION(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_UNION)
            else:
                return self.getToken(sqlParser.K_UNION, i)

        def K_INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_INTERSECT)
            else:
                return self.getToken(sqlParser.K_INTERSECT, i)

        def K_EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_EXCEPT)
            else:
                return self.getToken(sqlParser.K_EXCEPT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def K_ALL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ALL)
            else:
                return self.getToken(sqlParser.K_ALL, i)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_select_stmt" ):
                return visitor.visitCompound_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_select_stmt(self):

        localctx = sqlParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 120
                self.with_clause()


            self.state = 123
            self.select_core()
            self.state = 133 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 130
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_UNION]:
                    self.state = 124
                    self.match(sqlParser.K_UNION)
                    self.state = 126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_ALL:
                        self.state = 125
                        self.match(sqlParser.K_ALL)


                    pass
                elif token in [sqlParser.K_INTERSECT]:
                    self.state = 128
                    self.match(sqlParser.K_INTERSECT)
                    pass
                elif token in [sqlParser.K_EXCEPT]:
                    self.state = 129
                    self.match(sqlParser.K_EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 132
                self.select_core()
                self.state = 135 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION):
                    break

            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 137
                self.match(sqlParser.K_ORDER)
                self.state = 138
                self.match(sqlParser.K_BY)
                self.state = 139
                self.ordering_term()
                self.state = 144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 140
                    self.match(sqlParser.COMMA)
                    self.state = 141
                    self.ordering_term()
                    self.state = 146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 149
                self.match(sqlParser.K_LIMIT)
                self.state = 150
                self.expr(0)
                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 151
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 152
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._select_core = None # Select_coreContext
            self.select_parts = list() # of Select_coreContexts
            self._compound_operator = None # Compound_operatorContext
            self.operators = list() # of Compound_operatorContexts

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_coreContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactored_select_stmt" ):
                return visitor.visitFactored_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def factored_select_stmt(self):

        localctx = sqlParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_factored_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 157
                self.with_clause()


            self.state = 160
            localctx._select_core = self.select_core()
            localctx.select_parts.append(localctx._select_core)
            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION:
                self.state = 161
                localctx._compound_operator = self.compound_operator()
                localctx.operators.append(localctx._compound_operator)
                self.state = 162
                localctx._select_core = self.select_core()
                localctx.select_parts.append(localctx._select_core)
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 169
                self.match(sqlParser.K_ORDER)
                self.state = 170
                self.match(sqlParser.K_BY)
                self.state = 171
                self.ordering_term()
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 172
                    self.match(sqlParser.COMMA)
                    self.state = 173
                    self.ordering_term()
                    self.state = 178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 181
                self.match(sqlParser.K_LIMIT)
                self.state = 182
                self.expr(0)
                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 183
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 184
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(sqlParser.Select_coreContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_select_stmt" ):
                return visitor.visitSimple_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_select_stmt(self):

        localctx = sqlParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 189
                self.with_clause()


            self.state = 192
            self.select_core()
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 193
                self.match(sqlParser.K_ORDER)
                self.state = 194
                self.match(sqlParser.K_BY)
                self.state = 195
                self.ordering_term()
                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 196
                    self.match(sqlParser.COMMA)
                    self.state = 197
                    self.ordering_term()
                    self.state = 202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 205
                self.match(sqlParser.K_LIMIT)
                self.state = 206
                self.expr(0)
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 207
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 208
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_or_valuesContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_stmt" ):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def select_stmt(self):

        localctx = sqlParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 213
                self.with_clause()


            self.state = 216
            self.select_or_values()
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION:
                self.state = 217
                self.compound_operator()
                self.state = 218
                self.select_or_values()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 225
                self.match(sqlParser.K_ORDER)
                self.state = 226
                self.match(sqlParser.K_BY)
                self.state = 227
                self.ordering_term()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 228
                    self.match(sqlParser.COMMA)
                    self.state = 229
                    self.ordering_term()
                    self.state = 234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 237
                self.match(sqlParser.K_LIMIT)
                self.state = 238
                self.expr(0)
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 239
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 240
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return sqlParser.RULE_select_or_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_values" ):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_values" ):
                listener.exitSelect_or_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_or_values" ):
                return visitor.visitSelect_or_values(self)
            else:
                return visitor.visitChildren(self)




    def select_or_values(self):

        localctx = sqlParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self.match(sqlParser.K_SELECT)
                self.state = 247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 246
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 249
                self.result_column()
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 250
                    self.match(sqlParser.COMMA)
                    self.state = 251
                    self.result_column()
                    self.state = 256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_FROM:
                    self.state = 257
                    self.match(sqlParser.K_FROM)
                    self.state = 267
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        self.state = 258
                        self.table_or_subquery()
                        self.state = 263
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==sqlParser.COMMA:
                            self.state = 259
                            self.match(sqlParser.COMMA)
                            self.state = 260
                            self.table_or_subquery()
                            self.state = 265
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 266
                        self.join_clause()
                        pass




                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WHERE:
                    self.state = 271
                    self.match(sqlParser.K_WHERE)
                    self.state = 272
                    self.expr(0)


                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_GROUP:
                    self.state = 275
                    self.match(sqlParser.K_GROUP)
                    self.state = 276
                    self.match(sqlParser.K_BY)
                    self.state = 277
                    self.expr(0)
                    self.state = 282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 278
                        self.match(sqlParser.COMMA)
                        self.state = 279
                        self.expr(0)
                        self.state = 284
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_HAVING:
                        self.state = 285
                        self.match(sqlParser.K_HAVING)
                        self.state = 286
                        self.expr(0)




                pass
            elif token in [sqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 291
                self.match(sqlParser.K_VALUES)
                self.state = 292
                self.match(sqlParser.OPEN_PAR)
                self.state = 293
                self.expr(0)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 294
                    self.match(sqlParser.COMMA)
                    self.state = 295
                    self.expr(0)
                    self.state = 300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 301
                self.match(sqlParser.CLOSE_PAR)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 302
                    self.match(sqlParser.COMMA)
                    self.state = 303
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 304
                    self.expr(0)
                    self.state = 309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 305
                        self.match(sqlParser.COMMA)
                        self.state = 306
                        self.expr(0)
                        self.state = 311
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 312
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(sqlParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVacuum_stmt" ):
                return visitor.visitVacuum_stmt(self)
            else:
                return visitor.visitChildren(self)




    def vacuum_stmt(self):

        localctx = sqlParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(sqlParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = sqlParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 323
                self.with_clause()


            self.state = 326
            self.match(sqlParser.K_UPDATE)
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 327
                self.match(sqlParser.K_OR)
                self.state = 328
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 329
                self.match(sqlParser.K_OR)
                self.state = 330
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 331
                self.match(sqlParser.K_OR)
                self.state = 332
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 333
                self.match(sqlParser.K_OR)
                self.state = 334
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 335
                self.match(sqlParser.K_OR)
                self.state = 336
                self.match(sqlParser.K_IGNORE)


            self.state = 339
            self.qualified_table_name()
            self.state = 340
            self.match(sqlParser.K_SET)
            self.state = 341
            self.column_name()
            self.state = 342
            self.match(sqlParser.ASSIGN)
            self.state = 343
            self.expr(0)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 344
                self.match(sqlParser.COMMA)
                self.state = 345
                self.column_name()
                self.state = 346
                self.match(sqlParser.ASSIGN)
                self.state = 347
                self.expr(0)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 354
                self.match(sqlParser.K_WHERE)
                self.state = 355
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt_limited" ):
                return visitor.visitUpdate_stmt_limited(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt_limited(self):

        localctx = sqlParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 358
                self.with_clause()


            self.state = 361
            self.match(sqlParser.K_UPDATE)
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 362
                self.match(sqlParser.K_OR)
                self.state = 363
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 364
                self.match(sqlParser.K_OR)
                self.state = 365
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 366
                self.match(sqlParser.K_OR)
                self.state = 367
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 368
                self.match(sqlParser.K_OR)
                self.state = 369
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 370
                self.match(sqlParser.K_OR)
                self.state = 371
                self.match(sqlParser.K_IGNORE)


            self.state = 374
            self.qualified_table_name()
            self.state = 375
            self.match(sqlParser.K_SET)
            self.state = 376
            self.column_name()
            self.state = 377
            self.match(sqlParser.ASSIGN)
            self.state = 378
            self.expr(0)
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 379
                self.match(sqlParser.COMMA)
                self.state = 380
                self.column_name()
                self.state = 381
                self.match(sqlParser.ASSIGN)
                self.state = 382
                self.expr(0)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 389
                self.match(sqlParser.K_WHERE)
                self.state = 390
                self.expr(0)


            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT or _la==sqlParser.K_ORDER:
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ORDER:
                    self.state = 393
                    self.match(sqlParser.K_ORDER)
                    self.state = 394
                    self.match(sqlParser.K_BY)
                    self.state = 395
                    self.ordering_term()
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 396
                        self.match(sqlParser.COMMA)
                        self.state = 397
                        self.ordering_term()
                        self.state = 402
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 405
                self.match(sqlParser.K_LIMIT)
                self.state = 406
                self.expr(0)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 407
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 408
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = sqlParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 413
                self.with_clause()


            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 416
                self.match(sqlParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 417
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 418
                self.match(sqlParser.K_INSERT)
                self.state = 419
                self.match(sqlParser.K_OR)
                self.state = 420
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 421
                self.match(sqlParser.K_INSERT)
                self.state = 422
                self.match(sqlParser.K_OR)
                self.state = 423
                self.match(sqlParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 424
                self.match(sqlParser.K_INSERT)
                self.state = 425
                self.match(sqlParser.K_OR)
                self.state = 426
                self.match(sqlParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 427
                self.match(sqlParser.K_INSERT)
                self.state = 428
                self.match(sqlParser.K_OR)
                self.state = 429
                self.match(sqlParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 430
                self.match(sqlParser.K_INSERT)
                self.state = 431
                self.match(sqlParser.K_OR)
                self.state = 432
                self.match(sqlParser.K_IGNORE)
                pass


            self.state = 435
            self.match(sqlParser.K_INTO)
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 436
                self.database_name()
                self.state = 437
                self.match(sqlParser.DOT)


            self.state = 441
            self.table_name()
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 442
                self.match(sqlParser.OPEN_PAR)
                self.state = 443
                self.column_name()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 444
                    self.match(sqlParser.COMMA)
                    self.state = 445
                    self.column_name()
                    self.state = 450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 451
                self.match(sqlParser.CLOSE_PAR)


            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 455
                self.match(sqlParser.K_VALUES)
                self.state = 456
                self.match(sqlParser.OPEN_PAR)
                self.state = 457
                self.expr(0)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 458
                    self.match(sqlParser.COMMA)
                    self.state = 459
                    self.expr(0)
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 465
                self.match(sqlParser.CLOSE_PAR)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 466
                    self.match(sqlParser.COMMA)
                    self.state = 467
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 468
                    self.expr(0)
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 469
                        self.match(sqlParser.COMMA)
                        self.state = 470
                        self.expr(0)
                        self.state = 475
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 476
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 483
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 484
                self.match(sqlParser.K_DEFAULT)
                self.state = 485
                self.match(sqlParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_table_name" ):
                return visitor.visitQualified_table_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_table_name(self):

        localctx = sqlParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 488
                self.database_name()
                self.state = 489
                self.match(sqlParser.DOT)


            self.state = 493
            self.table_name()
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_INDEXED]:
                self.state = 494
                self.match(sqlParser.K_INDEXED)
                self.state = 495
                self.match(sqlParser.K_BY)
                self.state = 496
                self.index_name()
                pass
            elif token in [sqlParser.K_NOT]:
                self.state = 497
                self.match(sqlParser.K_NOT)
                self.state = 498
                self.match(sqlParser.K_INDEXED)
                pass
            elif token in [sqlParser.K_SET]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(sqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.DOT)
            else:
                return self.getToken(sqlParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(sqlParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_WHEN)
            else:
                return self.getToken(sqlParser.K_WHEN, i)

        def K_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_THEN)
            else:
                return self.getToken(sqlParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def PIPE2(self):
            return self.getToken(sqlParser.PIPE2, 0)

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def DIV(self):
            return self.getToken(sqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(sqlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def LT2(self):
            return self.getToken(sqlParser.LT2, 0)

        def GT2(self):
            return self.getToken(sqlParser.GT2, 0)

        def AMP(self):
            return self.getToken(sqlParser.AMP, 0)

        def PIPE(self):
            return self.getToken(sqlParser.PIPE, 0)

        def LT(self):
            return self.getToken(sqlParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(sqlParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(sqlParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(sqlParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(sqlParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(sqlParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(sqlParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(sqlParser.NOT_EQ2, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sqlParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 502
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 503
                self.match(sqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 507
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                    if la_ == 1:
                        self.state = 504
                        self.database_name()
                        self.state = 505
                        self.match(sqlParser.DOT)


                    self.state = 509
                    self.table_name()
                    self.state = 510
                    self.match(sqlParser.DOT)


                self.state = 514
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 515
                self.unary_operator()
                self.state = 516
                self.expr(18)
                pass

            elif la_ == 5:
                self.state = 518
                self.match(sqlParser.OPEN_PAR)
                self.state = 519
                self.expr(0)
                self.state = 520
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_EXISTS or _la==sqlParser.K_NOT:
                    self.state = 523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_NOT:
                        self.state = 522
                        self.match(sqlParser.K_NOT)


                    self.state = 525
                    self.match(sqlParser.K_EXISTS)


                self.state = 528
                self.match(sqlParser.OPEN_PAR)
                self.state = 529
                self.select_stmt()
                self.state = 530
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 532
                self.match(sqlParser.K_CASE)
                self.state = 534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 533
                    self.expr(0)


                self.state = 541 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 536
                    self.match(sqlParser.K_WHEN)
                    self.state = 537
                    self.expr(0)
                    self.state = 538
                    self.match(sqlParser.K_THEN)
                    self.state = 539
                    self.expr(0)
                    self.state = 543 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==sqlParser.K_WHEN):
                        break

                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ELSE:
                    self.state = 545
                    self.match(sqlParser.K_ELSE)
                    self.state = 546
                    self.expr(0)


                self.state = 549
                self.match(sqlParser.K_END)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 640
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 638
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 553
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 554
                        self.match(sqlParser.PIPE2)
                        self.state = 555
                        self.expr(18)
                        pass

                    elif la_ == 2:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 556
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 557
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.STAR) | (1 << sqlParser.DIV) | (1 << sqlParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 558
                        self.expr(17)
                        pass

                    elif la_ == 3:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 559
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 560
                        _la = self._input.LA(1)
                        if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 561
                        self.expr(16)
                        pass

                    elif la_ == 4:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 562
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 563
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT2) | (1 << sqlParser.GT2) | (1 << sqlParser.AMP) | (1 << sqlParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 564
                        self.expr(15)
                        pass

                    elif la_ == 5:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 565
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 566
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT) | (1 << sqlParser.LT_EQ) | (1 << sqlParser.GT) | (1 << sqlParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 567
                        self.expr(14)
                        pass

                    elif la_ == 6:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 568
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 569
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.ASSIGN) | (1 << sqlParser.EQ) | (1 << sqlParser.NOT_EQ1) | (1 << sqlParser.NOT_EQ2))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 570
                        self.expr(13)
                        pass

                    elif la_ == 7:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 571
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 572
                        self.match(sqlParser.K_AND)
                        self.state = 573
                        self.expr(11)
                        pass

                    elif la_ == 8:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 574
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 575
                        self.match(sqlParser.K_OR)
                        self.state = 576
                        self.expr(10)
                        pass

                    elif la_ == 9:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 577
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 578
                        self.match(sqlParser.K_IS)
                        self.state = 580
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                        if la_ == 1:
                            self.state = 579
                            self.match(sqlParser.K_NOT)


                        self.state = 582
                        self.expr(5)
                        pass

                    elif la_ == 10:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 583
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 585
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 584
                            self.match(sqlParser.K_NOT)


                        self.state = 587
                        self.match(sqlParser.K_BETWEEN)
                        self.state = 588
                        self.expr(0)
                        self.state = 589
                        self.match(sqlParser.K_AND)
                        self.state = 590
                        self.expr(4)
                        pass

                    elif la_ == 11:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 592
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 594
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 593
                            self.match(sqlParser.K_NOT)


                        self.state = 596
                        self.match(sqlParser.K_IN)
                        self.state = 616
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                        if la_ == 1:
                            self.state = 597
                            self.match(sqlParser.OPEN_PAR)
                            self.state = 607
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                            if la_ == 1:
                                self.state = 598
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 599
                                self.expr(0)
                                self.state = 604
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==sqlParser.COMMA:
                                    self.state = 600
                                    self.match(sqlParser.COMMA)
                                    self.state = 601
                                    self.expr(0)
                                    self.state = 606
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 609
                            self.match(sqlParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 613
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                            if la_ == 1:
                                self.state = 610
                                self.database_name()
                                self.state = 611
                                self.match(sqlParser.DOT)


                            self.state = 615
                            self.table_name()
                            pass


                        pass

                    elif la_ == 12:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 618
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 619
                        self.match(sqlParser.K_COLLATE)
                        self.state = 620
                        self.collation_name()
                        pass

                    elif la_ == 13:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 621
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 623
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 622
                            self.match(sqlParser.K_NOT)


                        self.state = 625
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (sqlParser.K_GLOB - 77)) | (1 << (sqlParser.K_LIKE - 77)) | (1 << (sqlParser.K_MATCH - 77)) | (1 << (sqlParser.K_REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 626
                        self.expr(0)
                        self.state = 629
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                        if la_ == 1:
                            self.state = 627
                            self.match(sqlParser.K_ESCAPE)
                            self.state = 628
                            self.expr(0)


                        pass

                    elif la_ == 14:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 631
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 636
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [sqlParser.K_ISNULL]:
                            self.state = 632
                            self.match(sqlParser.K_ISNULL)
                            pass
                        elif token in [sqlParser.K_NOTNULL]:
                            self.state = 633
                            self.match(sqlParser.K_NOTNULL)
                            pass
                        elif token in [sqlParser.K_NOT]:
                            self.state = 634
                            self.match(sqlParser.K_NOT)
                            self.state = 635
                            self.match(sqlParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 642
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(sqlParser.Common_table_expressionContext,i)


        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = sqlParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(sqlParser.K_WITH)
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 644
                self.match(sqlParser.K_RECURSIVE)


            self.state = 647
            self.common_table_expression()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 648
                self.match(sqlParser.COMMA)
                self.state = 649
                self.common_table_expression()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = sqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.table_name()
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 656
                self.match(sqlParser.OPEN_PAR)
                self.state = 657
                self.column_name()
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 658
                    self.match(sqlParser.COMMA)
                    self.state = 659
                    self.column_name()
                    self.state = 664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 665
                self.match(sqlParser.CLOSE_PAR)


            self.state = 669
            self.match(sqlParser.K_AS)
            self.state = 670
            self.match(sqlParser.OPEN_PAR)
            self.state = 671
            self.select_stmt()
            self.state = 672
            self.match(sqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdering_term" ):
                return visitor.visitOrdering_term(self)
            else:
                return visitor.visitChildren(self)




    def ordering_term(self):

        localctx = sqlParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.expr(0)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_COLLATE:
                self.state = 675
                self.match(sqlParser.K_COLLATE)
                self.state = 676
                self.collation_name()


            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 679
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(sqlParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column" ):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)




    def result_column(self):

        localctx = sqlParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 682
                self.match(sqlParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 683
                self.table_name()
                self.state = 684
                self.match(sqlParser.DOT)
                self.state = 685
                self.match(sqlParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 687
                self.expr(0)
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 688
                        self.match(sqlParser.K_AS)


                    self.state = 691
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(sqlParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(sqlParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_or_subquery" ):
                return visitor.visitTable_or_subquery(self)
            else:
                return visitor.visitChildren(self)




    def table_or_subquery(self):

        localctx = sqlParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 696
                    self.schema_name()
                    self.state = 697
                    self.match(sqlParser.DOT)


                self.state = 701
                self.table_name()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 702
                        self.match(sqlParser.K_AS)


                    self.state = 705
                    self.table_alias()


                self.state = 713
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_INDEXED]:
                    self.state = 708
                    self.match(sqlParser.K_INDEXED)
                    self.state = 709
                    self.match(sqlParser.K_BY)
                    self.state = 710
                    self.index_name()
                    pass
                elif token in [sqlParser.K_NOT]:
                    self.state = 711
                    self.match(sqlParser.K_NOT)
                    self.state = 712
                    self.match(sqlParser.K_INDEXED)
                    pass
                elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CROSS, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ON, sqlParser.K_ORDER, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_WHERE, sqlParser.K_WITH]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 715
                    self.schema_name()
                    self.state = 716
                    self.match(sqlParser.DOT)


                self.state = 720
                self.table_function_name()
                self.state = 721
                self.match(sqlParser.OPEN_PAR)
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.OPEN_PAR) | (1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE) | (1 << sqlParser.K_ABORT) | (1 << sqlParser.K_ACTION) | (1 << sqlParser.K_ADD) | (1 << sqlParser.K_AFTER) | (1 << sqlParser.K_ALL) | (1 << sqlParser.K_ALTER) | (1 << sqlParser.K_ANALYZE) | (1 << sqlParser.K_AND) | (1 << sqlParser.K_AS) | (1 << sqlParser.K_ASC) | (1 << sqlParser.K_ATTACH) | (1 << sqlParser.K_AUTOINCREMENT) | (1 << sqlParser.K_BEFORE) | (1 << sqlParser.K_BEGIN) | (1 << sqlParser.K_BETWEEN) | (1 << sqlParser.K_BY) | (1 << sqlParser.K_CASCADE) | (1 << sqlParser.K_CASE) | (1 << sqlParser.K_CAST) | (1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLLATE) | (1 << sqlParser.K_COLUMN) | (1 << sqlParser.K_COMMIT) | (1 << sqlParser.K_CONFLICT) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_CREATE) | (1 << sqlParser.K_CROSS) | (1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP) | (1 << sqlParser.K_DATABASE) | (1 << sqlParser.K_DEFAULT) | (1 << sqlParser.K_DEFERRABLE) | (1 << sqlParser.K_DEFERRED) | (1 << sqlParser.K_DELETE) | (1 << sqlParser.K_DESC) | (1 << sqlParser.K_DETACH) | (1 << sqlParser.K_DISTINCT) | (1 << sqlParser.K_DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (sqlParser.K_EACH - 64)) | (1 << (sqlParser.K_ELSE - 64)) | (1 << (sqlParser.K_END - 64)) | (1 << (sqlParser.K_ESCAPE - 64)) | (1 << (sqlParser.K_EXCEPT - 64)) | (1 << (sqlParser.K_EXCLUSIVE - 64)) | (1 << (sqlParser.K_EXISTS - 64)) | (1 << (sqlParser.K_EXPLAIN - 64)) | (1 << (sqlParser.K_FAIL - 64)) | (1 << (sqlParser.K_FOR - 64)) | (1 << (sqlParser.K_FOREIGN - 64)) | (1 << (sqlParser.K_FROM - 64)) | (1 << (sqlParser.K_FULL - 64)) | (1 << (sqlParser.K_GLOB - 64)) | (1 << (sqlParser.K_GROUP - 64)) | (1 << (sqlParser.K_HAVING - 64)) | (1 << (sqlParser.K_IF - 64)) | (1 << (sqlParser.K_IGNORE - 64)) | (1 << (sqlParser.K_IMMEDIATE - 64)) | (1 << (sqlParser.K_IN - 64)) | (1 << (sqlParser.K_INDEX - 64)) | (1 << (sqlParser.K_INDEXED - 64)) | (1 << (sqlParser.K_INITIALLY - 64)) | (1 << (sqlParser.K_INNER - 64)) | (1 << (sqlParser.K_INSERT - 64)) | (1 << (sqlParser.K_INSTEAD - 64)) | (1 << (sqlParser.K_INTERSECT - 64)) | (1 << (sqlParser.K_INTO - 64)) | (1 << (sqlParser.K_IS - 64)) | (1 << (sqlParser.K_ISNULL - 64)) | (1 << (sqlParser.K_JOIN - 64)) | (1 << (sqlParser.K_KEY - 64)) | (1 << (sqlParser.K_LEFT - 64)) | (1 << (sqlParser.K_LIKE - 64)) | (1 << (sqlParser.K_LIMIT - 64)) | (1 << (sqlParser.K_MATCH - 64)) | (1 << (sqlParser.K_NATURAL - 64)) | (1 << (sqlParser.K_NO - 64)) | (1 << (sqlParser.K_NOT - 64)) | (1 << (sqlParser.K_NOTNULL - 64)) | (1 << (sqlParser.K_NULL - 64)) | (1 << (sqlParser.K_OF - 64)) | (1 << (sqlParser.K_OFFSET - 64)) | (1 << (sqlParser.K_ON - 64)) | (1 << (sqlParser.K_OR - 64)) | (1 << (sqlParser.K_ORDER - 64)) | (1 << (sqlParser.K_OUTER - 64)) | (1 << (sqlParser.K_PLAN - 64)) | (1 << (sqlParser.K_PRAGMA - 64)) | (1 << (sqlParser.K_PRIMARY - 64)) | (1 << (sqlParser.K_QUERY - 64)) | (1 << (sqlParser.K_RAISE - 64)) | (1 << (sqlParser.K_RECURSIVE - 64)) | (1 << (sqlParser.K_REFERENCES - 64)) | (1 << (sqlParser.K_REGEXP - 64)) | (1 << (sqlParser.K_REINDEX - 64)) | (1 << (sqlParser.K_RELEASE - 64)) | (1 << (sqlParser.K_RENAME - 64)) | (1 << (sqlParser.K_REPLACE - 64)) | (1 << (sqlParser.K_RESTRICT - 64)) | (1 << (sqlParser.K_RIGHT - 64)) | (1 << (sqlParser.K_ROLLBACK - 64)) | (1 << (sqlParser.K_ROW - 64)) | (1 << (sqlParser.K_SAVEPOINT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (sqlParser.K_SELECT - 128)) | (1 << (sqlParser.K_SET - 128)) | (1 << (sqlParser.K_TABLE - 128)) | (1 << (sqlParser.K_TEMP - 128)) | (1 << (sqlParser.K_TEMPORARY - 128)) | (1 << (sqlParser.K_THEN - 128)) | (1 << (sqlParser.K_TO - 128)) | (1 << (sqlParser.K_TRANSACTION - 128)) | (1 << (sqlParser.K_TRIGGER - 128)) | (1 << (sqlParser.K_UNION - 128)) | (1 << (sqlParser.K_UNIQUE - 128)) | (1 << (sqlParser.K_UPDATE - 128)) | (1 << (sqlParser.K_USING - 128)) | (1 << (sqlParser.K_VACUUM - 128)) | (1 << (sqlParser.K_VALUES - 128)) | (1 << (sqlParser.K_VIEW - 128)) | (1 << (sqlParser.K_VIRTUAL - 128)) | (1 << (sqlParser.K_WHEN - 128)) | (1 << (sqlParser.K_WHERE - 128)) | (1 << (sqlParser.K_WITH - 128)) | (1 << (sqlParser.K_WITHOUT - 128)) | (1 << (sqlParser.IDENTIFIER - 128)) | (1 << (sqlParser.NUMERIC_LITERAL - 128)) | (1 << (sqlParser.BIND_PARAMETER - 128)) | (1 << (sqlParser.STRING_LITERAL - 128)) | (1 << (sqlParser.BLOB_LITERAL - 128)))) != 0):
                    self.state = 722
                    self.expr(0)
                    self.state = 727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 723
                        self.match(sqlParser.COMMA)
                        self.state = 724
                        self.expr(0)
                        self.state = 729
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 732
                self.match(sqlParser.CLOSE_PAR)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 733
                        self.match(sqlParser.K_AS)


                    self.state = 736
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 739
                self.match(sqlParser.OPEN_PAR)
                self.state = 749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 740
                    self.table_or_subquery()
                    self.state = 745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 741
                        self.match(sqlParser.COMMA)
                        self.state = 742
                        self.table_or_subquery()
                        self.state = 747
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 748
                    self.join_clause()
                    pass


                self.state = 751
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 753
                self.match(sqlParser.OPEN_PAR)
                self.state = 754
                self.select_stmt()
                self.state = 755
                self.match(sqlParser.CLOSE_PAR)
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 756
                        self.match(sqlParser.K_AS)


                    self.state = 759
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = sqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.table_or_subquery()
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA or _la==sqlParser.K_CROSS or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (sqlParser.K_INNER - 87)) | (1 << (sqlParser.K_JOIN - 87)) | (1 << (sqlParser.K_LEFT - 87)) | (1 << (sqlParser.K_NATURAL - 87)))) != 0):
                self.state = 765
                self.join_operator()
                self.state = 766
                self.table_or_subquery()
                self.state = 767
                self.join_constraint()
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(sqlParser.COMMA, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_operator" ):
                return visitor.visitJoin_operator(self)
            else:
                return visitor.visitChildren(self)




    def join_operator(self):

        localctx = sqlParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.match(sqlParser.COMMA)
                pass
            elif token in [sqlParser.K_CROSS, sqlParser.K_INNER, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NATURAL:
                    self.state = 775
                    self.match(sqlParser.K_NATURAL)


                self.state = 784
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_LEFT]:
                    self.state = 778
                    self.match(sqlParser.K_LEFT)
                    self.state = 780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_OUTER:
                        self.state = 779
                        self.match(sqlParser.K_OUTER)


                    pass
                elif token in [sqlParser.K_INNER]:
                    self.state = 782
                    self.match(sqlParser.K_INNER)
                    pass
                elif token in [sqlParser.K_CROSS]:
                    self.state = 783
                    self.match(sqlParser.K_CROSS)
                    pass
                elif token in [sqlParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 786
                self.match(sqlParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_constraint" ):
                return visitor.visitJoin_constraint(self)
            else:
                return visitor.visitChildren(self)




    def join_constraint(self):

        localctx = sqlParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_ON]:
                self.state = 789
                self.match(sqlParser.K_ON)
                self.state = 790
                self.expr(0)
                pass
            elif token in [sqlParser.K_USING]:
                self.state = 791
                self.match(sqlParser.K_USING)
                self.state = 792
                self.match(sqlParser.OPEN_PAR)
                self.state = 793
                self.column_name()
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 794
                    self.match(sqlParser.COMMA)
                    self.state = 795
                    self.column_name()
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 801
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CROSS, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ORDER, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_WHERE, sqlParser.K_WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._result_column = None # Result_columnContext
            self.columns = list() # of Result_columnContexts
            self._table_or_subquery = None # Table_or_subqueryContext
            self.tables = list() # of Table_or_subqueryContexts
            self.join = None # Join_clauseContext
            self.where = None # ExprContext
            self._expr = None # ExprContext
            self.group_by = list() # of ExprContexts
            self.having = None # ExprContext

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_core" ):
                return visitor.visitSelect_core(self)
            else:
                return visitor.visitChildren(self)




    def select_core(self):

        localctx = sqlParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(sqlParser.K_SELECT)
            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 806
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 809
            localctx._result_column = self.result_column()
            localctx.columns.append(localctx._result_column)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 810
                self.match(sqlParser.COMMA)
                self.state = 811
                localctx._result_column = self.result_column()
                localctx.columns.append(localctx._result_column)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_FROM:
                self.state = 817
                self.match(sqlParser.K_FROM)
                self.state = 827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 818
                    localctx._table_or_subquery = self.table_or_subquery()
                    localctx.tables.append(localctx._table_or_subquery)
                    self.state = 823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 819
                        self.match(sqlParser.COMMA)
                        self.state = 820
                        localctx._table_or_subquery = self.table_or_subquery()
                        localctx.tables.append(localctx._table_or_subquery)
                        self.state = 825
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 826
                    localctx.join = self.join_clause()
                    pass




            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 831
                self.match(sqlParser.K_WHERE)
                self.state = 832
                localctx.where = self.expr(0)


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_GROUP:
                self.state = 835
                self.match(sqlParser.K_GROUP)
                self.state = 836
                self.match(sqlParser.K_BY)
                self.state = 837
                localctx._expr = self.expr(0)
                localctx.group_by.append(localctx._expr)
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 838
                    self.match(sqlParser.COMMA)
                    self.state = 839
                    localctx._expr = self.expr(0)
                    localctx.group_by.append(localctx._expr)
                    self.state = 844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_HAVING:
                    self.state = 845
                    self.match(sqlParser.K_HAVING)
                    self.state = 846
                    localctx.having = self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_operator" ):
                return visitor.visitCompound_operator(self)
            else:
                return visitor.visitChildren(self)




    def compound_operator(self):

        localctx = sqlParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_compound_operator)
        try:
            self.state = 856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 851
                self.match(sqlParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.match(sqlParser.K_UNION)
                self.state = 853
                self.match(sqlParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 854
                self.match(sqlParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 855
                self.match(sqlParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = sqlParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.PLUS or _la==sqlParser.MINUS:
                self.state = 858
                _la = self._input.LA(1)
                if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 861
            self.match(sqlParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(sqlParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_value" ):
                return visitor.visitLiteral_value(self)
            else:
                return visitor.visitChildren(self)




    def literal_value(self):

        localctx = sqlParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (sqlParser.K_NULL - 104)) | (1 << (sqlParser.NUMERIC_LITERAL - 104)) | (1 << (sqlParser.STRING_LITERAL - 104)) | (1 << (sqlParser.BLOB_LITERAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(sqlParser.TILDE, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator" ):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator(self):

        localctx = sqlParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE))) != 0) or _la==sqlParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = sqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            _la = self._input.LA(1)
            if not(_la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(sqlParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(sqlParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(sqlParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(sqlParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(sqlParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(sqlParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(sqlParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(sqlParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(sqlParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(sqlParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(sqlParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(sqlParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(sqlParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(sqlParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(sqlParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(sqlParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(sqlParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(sqlParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(sqlParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(sqlParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(sqlParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(sqlParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(sqlParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(sqlParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(sqlParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(sqlParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(sqlParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(sqlParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(sqlParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(sqlParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(sqlParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(sqlParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(sqlParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(sqlParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(sqlParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(sqlParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(sqlParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(sqlParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(sqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(sqlParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(sqlParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(sqlParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(sqlParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(sqlParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(sqlParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(sqlParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(sqlParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(sqlParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(sqlParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = sqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (sqlParser.K_ABORT - 25)) | (1 << (sqlParser.K_ACTION - 25)) | (1 << (sqlParser.K_ADD - 25)) | (1 << (sqlParser.K_AFTER - 25)) | (1 << (sqlParser.K_ALL - 25)) | (1 << (sqlParser.K_ALTER - 25)) | (1 << (sqlParser.K_ANALYZE - 25)) | (1 << (sqlParser.K_AND - 25)) | (1 << (sqlParser.K_AS - 25)) | (1 << (sqlParser.K_ASC - 25)) | (1 << (sqlParser.K_ATTACH - 25)) | (1 << (sqlParser.K_AUTOINCREMENT - 25)) | (1 << (sqlParser.K_BEFORE - 25)) | (1 << (sqlParser.K_BEGIN - 25)) | (1 << (sqlParser.K_BETWEEN - 25)) | (1 << (sqlParser.K_BY - 25)) | (1 << (sqlParser.K_CASCADE - 25)) | (1 << (sqlParser.K_CASE - 25)) | (1 << (sqlParser.K_CAST - 25)) | (1 << (sqlParser.K_CHECK - 25)) | (1 << (sqlParser.K_COLLATE - 25)) | (1 << (sqlParser.K_COLUMN - 25)) | (1 << (sqlParser.K_COMMIT - 25)) | (1 << (sqlParser.K_CONFLICT - 25)) | (1 << (sqlParser.K_CONSTRAINT - 25)) | (1 << (sqlParser.K_CREATE - 25)) | (1 << (sqlParser.K_CROSS - 25)) | (1 << (sqlParser.K_CURRENT_DATE - 25)) | (1 << (sqlParser.K_CURRENT_TIME - 25)) | (1 << (sqlParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (sqlParser.K_DATABASE - 25)) | (1 << (sqlParser.K_DEFAULT - 25)) | (1 << (sqlParser.K_DEFERRABLE - 25)) | (1 << (sqlParser.K_DEFERRED - 25)) | (1 << (sqlParser.K_DELETE - 25)) | (1 << (sqlParser.K_DESC - 25)) | (1 << (sqlParser.K_DETACH - 25)) | (1 << (sqlParser.K_DISTINCT - 25)) | (1 << (sqlParser.K_DROP - 25)) | (1 << (sqlParser.K_EACH - 25)) | (1 << (sqlParser.K_ELSE - 25)) | (1 << (sqlParser.K_END - 25)) | (1 << (sqlParser.K_ESCAPE - 25)) | (1 << (sqlParser.K_EXCEPT - 25)) | (1 << (sqlParser.K_EXCLUSIVE - 25)) | (1 << (sqlParser.K_EXISTS - 25)) | (1 << (sqlParser.K_EXPLAIN - 25)) | (1 << (sqlParser.K_FAIL - 25)) | (1 << (sqlParser.K_FOR - 25)) | (1 << (sqlParser.K_FOREIGN - 25)) | (1 << (sqlParser.K_FROM - 25)) | (1 << (sqlParser.K_FULL - 25)) | (1 << (sqlParser.K_GLOB - 25)) | (1 << (sqlParser.K_GROUP - 25)) | (1 << (sqlParser.K_HAVING - 25)) | (1 << (sqlParser.K_IF - 25)) | (1 << (sqlParser.K_IGNORE - 25)) | (1 << (sqlParser.K_IMMEDIATE - 25)) | (1 << (sqlParser.K_IN - 25)) | (1 << (sqlParser.K_INDEX - 25)) | (1 << (sqlParser.K_INDEXED - 25)) | (1 << (sqlParser.K_INITIALLY - 25)) | (1 << (sqlParser.K_INNER - 25)) | (1 << (sqlParser.K_INSERT - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (sqlParser.K_INSTEAD - 89)) | (1 << (sqlParser.K_INTERSECT - 89)) | (1 << (sqlParser.K_INTO - 89)) | (1 << (sqlParser.K_IS - 89)) | (1 << (sqlParser.K_ISNULL - 89)) | (1 << (sqlParser.K_JOIN - 89)) | (1 << (sqlParser.K_KEY - 89)) | (1 << (sqlParser.K_LEFT - 89)) | (1 << (sqlParser.K_LIKE - 89)) | (1 << (sqlParser.K_LIMIT - 89)) | (1 << (sqlParser.K_MATCH - 89)) | (1 << (sqlParser.K_NATURAL - 89)) | (1 << (sqlParser.K_NO - 89)) | (1 << (sqlParser.K_NOT - 89)) | (1 << (sqlParser.K_NOTNULL - 89)) | (1 << (sqlParser.K_NULL - 89)) | (1 << (sqlParser.K_OF - 89)) | (1 << (sqlParser.K_OFFSET - 89)) | (1 << (sqlParser.K_ON - 89)) | (1 << (sqlParser.K_OR - 89)) | (1 << (sqlParser.K_ORDER - 89)) | (1 << (sqlParser.K_OUTER - 89)) | (1 << (sqlParser.K_PLAN - 89)) | (1 << (sqlParser.K_PRAGMA - 89)) | (1 << (sqlParser.K_PRIMARY - 89)) | (1 << (sqlParser.K_QUERY - 89)) | (1 << (sqlParser.K_RAISE - 89)) | (1 << (sqlParser.K_RECURSIVE - 89)) | (1 << (sqlParser.K_REFERENCES - 89)) | (1 << (sqlParser.K_REGEXP - 89)) | (1 << (sqlParser.K_REINDEX - 89)) | (1 << (sqlParser.K_RELEASE - 89)) | (1 << (sqlParser.K_RENAME - 89)) | (1 << (sqlParser.K_REPLACE - 89)) | (1 << (sqlParser.K_RESTRICT - 89)) | (1 << (sqlParser.K_RIGHT - 89)) | (1 << (sqlParser.K_ROLLBACK - 89)) | (1 << (sqlParser.K_ROW - 89)) | (1 << (sqlParser.K_SAVEPOINT - 89)) | (1 << (sqlParser.K_SELECT - 89)) | (1 << (sqlParser.K_SET - 89)) | (1 << (sqlParser.K_TABLE - 89)) | (1 << (sqlParser.K_TEMP - 89)) | (1 << (sqlParser.K_TEMPORARY - 89)) | (1 << (sqlParser.K_THEN - 89)) | (1 << (sqlParser.K_TO - 89)) | (1 << (sqlParser.K_TRANSACTION - 89)) | (1 << (sqlParser.K_TRIGGER - 89)) | (1 << (sqlParser.K_UNION - 89)) | (1 << (sqlParser.K_UNIQUE - 89)) | (1 << (sqlParser.K_UPDATE - 89)) | (1 << (sqlParser.K_USING - 89)) | (1 << (sqlParser.K_VACUUM - 89)) | (1 << (sqlParser.K_VALUES - 89)) | (1 << (sqlParser.K_VIEW - 89)) | (1 << (sqlParser.K_VIRTUAL - 89)) | (1 << (sqlParser.K_WHEN - 89)) | (1 << (sqlParser.K_WHERE - 89)) | (1 << (sqlParser.K_WITH - 89)) | (1 << (sqlParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = sqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_name" ):
                return visitor.visitDatabase_name(self)
            else:
                return visitor.visitChildren(self)




    def database_name(self):

        localctx = sqlParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = sqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_function_name" ):
                return visitor.visitTable_function_name(self)
            else:
                return visitor.visitChildren(self)




    def table_function_name(self):

        localctx = sqlParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = sqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = sqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollation_name" ):
                return visitor.visitCollation_name(self)
            else:
                return visitor.visitChildren(self)




    def collation_name(self):

        localctx = sqlParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = sqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = sqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_table_alias)
        try:
            self.state = 893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 888
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 889
                self.match(sqlParser.OPEN_PAR)
                self.state = 890
                self.table_alias()
                self.state = 891
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(sqlParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_name" ):
                return visitor.visitAny_name(self)
            else:
                return visitor.visitChildren(self)




    def any_name(self):

        localctx = sqlParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_any_name)
        try:
            self.state = 902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.K_ABORT, sqlParser.K_ACTION, sqlParser.K_ADD, sqlParser.K_AFTER, sqlParser.K_ALL, sqlParser.K_ALTER, sqlParser.K_ANALYZE, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_ATTACH, sqlParser.K_AUTOINCREMENT, sqlParser.K_BEFORE, sqlParser.K_BEGIN, sqlParser.K_BETWEEN, sqlParser.K_BY, sqlParser.K_CASCADE, sqlParser.K_CASE, sqlParser.K_CAST, sqlParser.K_CHECK, sqlParser.K_COLLATE, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONFLICT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_CURRENT_DATE, sqlParser.K_CURRENT_TIME, sqlParser.K_CURRENT_TIMESTAMP, sqlParser.K_DATABASE, sqlParser.K_DEFAULT, sqlParser.K_DEFERRABLE, sqlParser.K_DEFERRED, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DETACH, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EACH, sqlParser.K_ELSE, sqlParser.K_END, sqlParser.K_ESCAPE, sqlParser.K_EXCEPT, sqlParser.K_EXCLUSIVE, sqlParser.K_EXISTS, sqlParser.K_EXPLAIN, sqlParser.K_FAIL, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GLOB, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IF, sqlParser.K_IGNORE, sqlParser.K_IMMEDIATE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INDEXED, sqlParser.K_INITIALLY, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INSTEAD, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_ISNULL, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_MATCH, sqlParser.K_NATURAL, sqlParser.K_NO, sqlParser.K_NOT, sqlParser.K_NOTNULL, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_OUTER, sqlParser.K_PLAN, sqlParser.K_PRAGMA, sqlParser.K_PRIMARY, sqlParser.K_QUERY, sqlParser.K_RAISE, sqlParser.K_RECURSIVE, sqlParser.K_REFERENCES, sqlParser.K_REGEXP, sqlParser.K_REINDEX, sqlParser.K_RELEASE, sqlParser.K_RENAME, sqlParser.K_REPLACE, sqlParser.K_RESTRICT, sqlParser.K_RIGHT, sqlParser.K_ROLLBACK, sqlParser.K_ROW, sqlParser.K_SAVEPOINT, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_TABLE, sqlParser.K_TEMP, sqlParser.K_TEMPORARY, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_TRIGGER, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_VIEW, sqlParser.K_VIRTUAL, sqlParser.K_WHEN, sqlParser.K_WHERE, sqlParser.K_WITH, sqlParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 896
                self.keyword()
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 897
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 898
                self.match(sqlParser.OPEN_PAR)
                self.state = 899
                self.any_name()
                self.state = 900
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[13] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 5)
         




